{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6","program":"/home/namn/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","ahash","--edition=2018","/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=d073647523553f88","-C","extra-filename=-d073647523553f88","--out-dir","/home/namn/Desktop/n/dev/minigame/shooting_rst/target/rls/debug/deps","-L","dependency=/home/namn/Desktop/n/dev/minigame/shooting_rst/target/rls/debug/deps","--extern","getrandom=/home/namn/Desktop/n/dev/minigame/shooting_rst/target/rls/debug/deps/libgetrandom-e828cef4785a80a4.rmeta","--extern","once_cell=/home/namn/Desktop/n/dev/minigame/shooting_rst/target/rls/debug/deps/libonce_cell-39550ab683f1e8f2.rmeta","--cap-lints","allow","--cfg","feature=\"runtime-rng\"","--cfg","feature=\"folded_multiply\"","--error-format=json","--sysroot","/home/namn/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/namn/Desktop/n/dev/minigame/shooting_rst/target/rls/debug/deps/libahash-d073647523553f88.rmeta"},"prelude":{"crate_id":{"name":"ahash","disambiguator":[14538504793779397103,7773875912745800578]},"crate_root":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src","external_crates":[{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15256637969148649584,12170509131058075833]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","num":2,"id":{"name":"core","disambiguator":[2572959971889902175,17506693968225989007]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7380289047210505863,13821127130725723065]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15494144285296940423,1517275930380298805]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[16074686111301742862,11174094882134223101]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9848143689052418189,5596786287495938678]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4765876764407181064,11122159180720543906]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3249135693812064660,5763443684941168569]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17048817722375060837,16920886256309599893]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13552797903376776722,10482089333731059857]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[5989449439605467183,7256304997069434828]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13279369789493161905,12463804053127379464]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[295047501211602818,3843164955111373824]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[14781020588812023641,7393321088923443539]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[1927264790928947756,6617054577979570835]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[7597657085106642381,11470551509849691989]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[2355022556203982070,155364045674250901]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[3046834347757213021,4625500188193743608]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","num":19,"id":{"name":"once_cell","disambiguator":[18064076242324893215,10121382814782865620]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","num":20,"id":{"name":"getrandom","disambiguator":[17382795656287689888,5576179494571072321]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","num":21,"id":{"name":"cfg_if","disambiguator":[663853888918535240,12010312547204163862]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","num":22,"id":{"name":"libc","disambiguator":[4064415281189198582,3055739755356656190]}}],"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":0,"byte_end":8507,"line_start":1,"line_end":263,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1077},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":2432,"byte_end":2439,"line_start":65,"line_end":65,"column_start":31,"column_end":38},"alias_span":null,"name":"AHasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1106},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":2470,"byte_end":2481,"line_start":66,"line_end":66,"column_start":30,"column_end":41},"alias_span":null,"name":"RandomState","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":487},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":2511,"byte_end":2521,"line_start":68,"line_end":68,"column_start":28,"column_end":38},"alias_span":null,"name":"CallHasher","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1086},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":2573,"byte_end":2581,"line_start":71,"line_end":71,"column_start":26,"column_end":34},"alias_span":null,"name":"AHashMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1097},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":2632,"byte_end":2640,"line_start":73,"line_end":73,"column_start":26,"column_end":34},"alias_span":null,"name":"AHashSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":0,"byte_end":8507,"line_start":1,"line_end":263,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":43},{"krate":0,"index":83},{"krate":0,"index":241},{"krate":0,"index":375},{"krate":0,"index":392},{"krate":0,"index":476},{"krate":0,"index":497},{"krate":0,"index":500},{"krate":0,"index":503},{"krate":0,"index":506},{"krate":0,"index":509},{"krate":0,"index":512},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":521},{"krate":0,"index":523},{"krate":0,"index":530}],"decl_id":null,"docs":" AHash is a hashing algorithm is intended to be a high performance, (hardware specific), keyed hash function.\n This can be seen as a DOS resistant alternative to `FxHash`, or a fast equivalent to `SipHash`.\n It provides a high speed hash algorithm, but where the result is not predictable without knowing a Key.\n This allows it to be used in a `HashMap` without allowing for the possibility that an malicious user can\n induce a collision.","sig":null,"attributes":[{"value":"/ AHash is a hashing algorithm is intended to be a high performance, (hardware specific), keyed hash function.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":0,"byte_end":112,"line_start":1,"line_end":1,"column_start":1,"column_end":113}},{"value":"/ This can be seen as a DOS resistant alternative to `FxHash`, or a fast equivalent to `SipHash`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":113,"byte_end":212,"line_start":2,"line_end":2,"column_start":1,"column_end":100}},{"value":"/ It provides a high speed hash algorithm, but where the result is not predictable without knowing a Key.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":213,"byte_end":320,"line_start":3,"line_end":3,"column_start":1,"column_end":108}},{"value":"/ This allows it to be used in a `HashMap` without allowing for the possibility that an malicious user can","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":321,"byte_end":429,"line_start":4,"line_end":4,"column_start":1,"column_end":109}},{"value":"/ induce a collision.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":430,"byte_end":453,"line_start":5,"line_end":5,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":454,"byte_end":457,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # How aHash works","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":458,"byte_end":479,"line_start":7,"line_end":7,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":480,"byte_end":483,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ aHash uses the hardware AES instruction on x86 processors to provide a keyed hash function.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":484,"byte_end":579,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"/ aHash is not a cryptographically secure hash.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":580,"byte_end":629,"line_start":10,"line_end":10,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":630,"byte_end":633,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":634,"byte_end":647,"line_start":12,"line_end":12,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":648,"byte_end":655,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ use ahash::{AHasher, RandomState};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":656,"byte_end":694,"line_start":14,"line_end":14,"column_start":1,"column_end":39}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":695,"byte_end":729,"line_start":15,"line_end":15,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":730,"byte_end":733,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ let mut map: HashMap<i32, i32, RandomState> = HashMap::default();","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":734,"byte_end":803,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"/ map.insert(12, 34);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":804,"byte_end":827,"line_start":18,"line_end":18,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":828,"byte_end":835,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ For convinence wrappers called `AHashMap` and `AHashSet` are also provided.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":836,"byte_end":915,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ These to the same thing with slightly less typing.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":916,"byte_end":970,"line_start":21,"line_end":21,"column_start":1,"column_end":55}},{"value":"/ ```ignore","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":971,"byte_end":984,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/ use ahash::AHashMap;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":985,"byte_end":1009,"line_start":23,"line_end":23,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":1010,"byte_end":1013,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let mut map: AHashMap<i32, i32> = AHashMap::with_capacity(4);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":1014,"byte_end":1079,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/ map.insert(12, 34);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":1080,"byte_end":1103,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/ map.insert(56, 78);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":1104,"byte_end":1127,"line_start":27,"line_end":27,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":1128,"byte_end":1135,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"deny(clippy :: correctness, clippy :: complexity, clippy :: perf)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":1136,"byte_end":1199,"line_start":29,"line_end":29,"column_start":1,"column_end":64}},{"value":"allow(clippy :: pedantic, clippy :: cast_lossless, clippy ::\n        unreadable_literal)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":1200,"byte_end":1278,"line_start":30,"line_end":30,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":1077},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":13934,"byte_end":13941,"line_start":24,"line_end":24,"column_start":12,"column_end":19},"name":"AHasher","qualname":"::fallback_hash::AHasher","value":"AHasher {  }","parent":null,"children":[{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1080}],"decl_id":null,"docs":" A `Hasher` for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"/ A `Hasher` for hashing an arbitrary stream of bytes.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":13440,"byte_end":13496,"line_start":12,"line_end":12,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":13497,"byte_end":13500,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Instances of [`AHasher`] represent state that is updated while hashing data.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":13501,"byte_end":13581,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":13582,"byte_end":13585,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Each method updates the internal state based on the new data provided. Once","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":13586,"byte_end":13665,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/ all of the data has been provided, the resulting hash can be obtained by calling","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":13666,"byte_end":13750,"line_start":17,"line_end":17,"column_start":1,"column_end":85}},{"value":"/ `finish()`","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":13751,"byte_end":13765,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":13766,"byte_end":13769,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ [Clone] is also provided in case you wish to calculate hashes for two different items that","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":13770,"byte_end":13864,"line_start":20,"line_end":20,"column_start":1,"column_end":95}},{"value":"/ start with the same data.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":13865,"byte_end":13894,"line_start":21,"line_end":21,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":13895,"byte_end":13898,"line_start":22,"line_end":22,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":14171,"byte_end":14184,"line_start":34,"line_end":34,"column_start":12,"column_end":25},"name":"new_with_keys","qualname":"<AHasher>::new_with_keys","value":"pub fn new_with_keys(u128, u128) -> AHasher","parent":null,"children":[],"decl_id":null,"docs":" Creates a new hasher keyed to the provided key.\n","sig":null,"attributes":[{"value":"/ Creates a new hasher keyed to the provided key.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":14023,"byte_end":14074,"line_start":31,"line_end":31,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":14079,"byte_end":14088,"line_start":32,"line_end":32,"column_start":5,"column_end":14}},{"value":"allow(dead_code)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":14093,"byte_end":14112,"line_start":33,"line_end":33,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1086},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":26861,"byte_end":26869,"line_start":20,"line_end":20,"column_start":12,"column_end":20},"name":"AHashMap","qualname":"::hash_map::AHashMap","value":"","parent":null,"children":[],"decl_id":null,"docs":" A [`HashMap`](std::collections::HashMap) using [`RandomState`](crate::RandomState) to hash the items.\n (Requires the `std` feature to be enabled.)\n","sig":null,"attributes":[{"value":"/ A [`HashMap`](std::collections::HashMap) using [`RandomState`](crate::RandomState) to hash the items.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":26679,"byte_end":26784,"line_start":17,"line_end":17,"column_start":1,"column_end":106}},{"value":"/ (Requires the `std` feature to be enabled.)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":26785,"byte_end":26832,"line_start":18,"line_end":18,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":27292,"byte_end":27295,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<AHashMap<K, V, RandomState>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":27389,"byte_end":27402,"line_start":39,"line_end":39,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<AHashMap<K, V, RandomState>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":27596,"byte_end":27607,"line_start":48,"line_end":48,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<AHashMap<K, V, S>>::with_hasher","value":"pub fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":27706,"byte_end":27730,"line_start":52,"line_end":52,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<AHashMap<K, V, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28456,"byte_end":28459,"line_start":79,"line_end":79,"column_start":12,"column_end":15},"name":"get","qualname":"<AHashMap<K, V, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&V> where K: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":27942,"byte_end":28004,"line_start":62,"line_end":62,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28009,"byte_end":28012,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28017,"byte_end":28080,"line_start":64,"line_end":64,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28085,"byte_end":28152,"line_start":65,"line_end":65,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28157,"byte_end":28174,"line_start":66,"line_end":66,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28179,"byte_end":28182,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28187,"byte_end":28201,"line_start":68,"line_end":68,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28206,"byte_end":28209,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28214,"byte_end":28221,"line_start":70,"line_end":70,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28226,"byte_end":28260,"line_start":71,"line_end":71,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28265,"byte_end":28268,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28273,"byte_end":28306,"line_start":73,"line_end":73,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28311,"byte_end":28334,"line_start":74,"line_end":74,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28339,"byte_end":28379,"line_start":75,"line_end":75,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28384,"byte_end":28418,"line_start":76,"line_end":76,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28423,"byte_end":28430,"line_start":77,"line_end":77,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28435,"byte_end":28444,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29144,"byte_end":29157,"line_start":104,"line_end":104,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<AHashMap<K, V, S>>::get_key_value","value":"pub fn get_key_value<Q: ?Sized>(&Self, &Q) -> Option<(&K, &V)> where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28592,"byte_end":28657,"line_start":87,"line_end":87,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28662,"byte_end":28665,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28670,"byte_end":28742,"line_start":89,"line_end":89,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28747,"byte_end":28814,"line_start":90,"line_end":90,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28819,"byte_end":28836,"line_start":91,"line_end":91,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28841,"byte_end":28844,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28849,"byte_end":28863,"line_start":93,"line_end":93,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28868,"byte_end":28871,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28876,"byte_end":28883,"line_start":95,"line_end":95,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28888,"byte_end":28922,"line_start":96,"line_end":96,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28927,"byte_end":28930,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28935,"byte_end":28968,"line_start":98,"line_end":98,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":28973,"byte_end":28996,"line_start":99,"line_end":99,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29001,"byte_end":29057,"line_start":100,"line_end":100,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map.get_key_value(&2), None);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29062,"byte_end":29106,"line_start":101,"line_end":101,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29111,"byte_end":29118,"line_start":102,"line_end":102,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29123,"byte_end":29132,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29853,"byte_end":29860,"line_start":131,"line_end":131,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AHashMap<K, V, S>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<&mut V> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29306,"byte_end":29376,"line_start":112,"line_end":112,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29381,"byte_end":29384,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29389,"byte_end":29452,"line_start":114,"line_end":114,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29457,"byte_end":29524,"line_start":115,"line_end":115,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29529,"byte_end":29546,"line_start":116,"line_end":116,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29551,"byte_end":29554,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29559,"byte_end":29573,"line_start":118,"line_end":118,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29578,"byte_end":29581,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29586,"byte_end":29593,"line_start":120,"line_end":120,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29598,"byte_end":29632,"line_start":121,"line_end":121,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29637,"byte_end":29640,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29645,"byte_end":29678,"line_start":123,"line_end":123,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29683,"byte_end":29706,"line_start":124,"line_end":124,"column_start":5,"column_end":28}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29711,"byte_end":29749,"line_start":125,"line_end":125,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29754,"byte_end":29771,"line_start":126,"line_end":126,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29776,"byte_end":29781,"line_start":127,"line_end":127,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29786,"byte_end":29815,"line_start":128,"line_end":128,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29820,"byte_end":29827,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":29832,"byte_end":29841,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30875,"byte_end":30881,"line_start":164,"line_end":164,"column_start":12,"column_end":18},"name":"insert","qualname":"<AHashMap<K, V, S>>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30005,"byte_end":30047,"line_start":139,"line_end":139,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30052,"byte_end":30055,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, [`None`] is returned.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30060,"byte_end":30127,"line_start":141,"line_end":141,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30132,"byte_end":30135,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30140,"byte_end":30215,"line_start":143,"line_end":143,"column_start":5,"column_end":80}},{"value":"/ value is returned. The key is not updated, though; this matters for","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30220,"byte_end":30291,"line_start":144,"line_end":144,"column_start":5,"column_end":76}},{"value":"/ types that can be `==` without being identical. See the [module-level","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30296,"byte_end":30369,"line_start":145,"line_end":145,"column_start":5,"column_end":78}},{"value":"/ documentation] for more.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30374,"byte_end":30402,"line_start":146,"line_end":146,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30407,"byte_end":30410,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ [module-level documentation]: crate::collections#insert-and-complex-keys","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30415,"byte_end":30491,"line_start":148,"line_end":148,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30496,"byte_end":30499,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30504,"byte_end":30518,"line_start":150,"line_end":150,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30523,"byte_end":30526,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30531,"byte_end":30538,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30543,"byte_end":30577,"line_start":153,"line_end":153,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30582,"byte_end":30585,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30590,"byte_end":30623,"line_start":155,"line_end":155,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.insert(37, \"a\"), None);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30628,"byte_end":30670,"line_start":156,"line_end":156,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30675,"byte_end":30713,"line_start":157,"line_end":157,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30718,"byte_end":30721,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\");","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30726,"byte_end":30750,"line_start":159,"line_end":159,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(map.insert(37, \"c\"), Some(\"b\"));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30755,"byte_end":30802,"line_start":160,"line_end":160,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30807,"byte_end":30837,"line_start":161,"line_end":161,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30842,"byte_end":30849,"line_start":162,"line_end":162,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30854,"byte_end":30863,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31524,"byte_end":31530,"line_start":186,"line_end":186,"column_start":12,"column_end":18},"name":"remove","qualname":"<AHashMap<K, V, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key\n was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":30959,"byte_end":31032,"line_start":168,"line_end":168,"column_start":5,"column_end":78}},{"value":"/ was previously in the map.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31037,"byte_end":31067,"line_start":169,"line_end":169,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31072,"byte_end":31075,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31080,"byte_end":31143,"line_start":171,"line_end":171,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31148,"byte_end":31215,"line_start":172,"line_end":172,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31220,"byte_end":31237,"line_start":173,"line_end":173,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31242,"byte_end":31245,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31250,"byte_end":31264,"line_start":175,"line_end":175,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31269,"byte_end":31272,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31277,"byte_end":31284,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31289,"byte_end":31323,"line_start":178,"line_end":178,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31328,"byte_end":31331,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31336,"byte_end":31369,"line_start":180,"line_end":180,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31374,"byte_end":31397,"line_start":181,"line_end":181,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31402,"byte_end":31444,"line_start":182,"line_end":182,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31449,"byte_end":31486,"line_start":183,"line_end":183,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31491,"byte_end":31498,"line_start":184,"line_end":184,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31503,"byte_end":31512,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1097},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":36259,"byte_end":36267,"line_start":17,"line_end":17,"column_start":12,"column_end":20},"name":"AHashSet","qualname":"::hash_set::AHashSet","value":"","parent":null,"children":[],"decl_id":null,"docs":" A [`HashSet`](std::collections::HashSet) using [`RandomState`](crate::RandomState) to hash the items.\n (Requires the `std` feature to be enabled.)\n","sig":null,"attributes":[{"value":"/ A [`HashSet`](std::collections::HashSet) using [`RandomState`](crate::RandomState) to hash the items.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":36077,"byte_end":36182,"line_start":14,"line_end":14,"column_start":1,"column_end":106}},{"value":"/ (Requires the `std` feature to be enabled.)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":36183,"byte_end":36230,"line_start":15,"line_end":15,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":36654,"byte_end":36657,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<AHashSet<T, RandomState>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":36751,"byte_end":36764,"line_start":36,"line_end":36,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<AHashSet<T, RandomState>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":36952,"byte_end":36963,"line_start":45,"line_end":45,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<AHashSet<T, S>>::with_hasher","value":"pub fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":37062,"byte_end":37086,"line_start":49,"line_end":49,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<AHashSet<T, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":429},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":56346,"byte_end":56358,"line_start":53,"line_end":53,"column_start":11,"column_end":23},"name":"RandomSource","qualname":"::random_state::RandomSource","value":"RandomSource","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":433}],"decl_id":null,"docs":" A supplier of Randomness used for different hashers.\n See [RandomState.set_random_source].\n","sig":null,"attributes":[{"value":"/ A supplier of Randomness used for different hashers.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":56238,"byte_end":56294,"line_start":51,"line_end":51,"column_start":1,"column_end":57}},{"value":"/ See [RandomState.set_random_source].","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":56295,"byte_end":56335,"line_start":52,"line_end":52,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":56369,"byte_end":56384,"line_start":55,"line_end":55,"column_start":8,"column_end":23},"name":"get_fixed_seeds","qualname":"::random_state::RandomSource::get_fixed_seeds","value":"pub fn get_fixed_seeds(&Self) -> &'static [[u64; ]; ]","parent":{"krate":0,"index":429},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":56427,"byte_end":56442,"line_start":57,"line_end":57,"column_start":8,"column_end":23},"name":"gen_hasher_seed","qualname":"::random_state::RandomSource::gen_hasher_seed","value":"pub fn gen_hasher_seed(&Self) -> usize","parent":{"krate":0,"index":429},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1106},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":59216,"byte_end":59227,"line_start":153,"line_end":153,"column_start":12,"column_end":23},"name":"RandomState","qualname":"::random_state::RandomState","value":"RandomState {  }","parent":null,"children":[{"krate":0,"index":1107},{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110}],"decl_id":null,"docs":" Provides a [Hasher] factory. This is typically used (e.g. by [HashMap]) to create\n [AHasher]s in order to hash the keys of the map. See `build_hasher` below.","sig":null,"attributes":[{"value":"/ Provides a [Hasher] factory. This is typically used (e.g. by [HashMap]) to create","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":58876,"byte_end":58961,"line_start":145,"line_end":145,"column_start":1,"column_end":86}},{"value":"/ [AHasher]s in order to hash the keys of the map. See `build_hasher` below.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":58962,"byte_end":59040,"line_start":146,"line_end":146,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":59041,"byte_end":59044,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ [build_hasher]: ahash::","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":59045,"byte_end":59072,"line_start":148,"line_end":148,"column_start":1,"column_end":28}},{"value":"/ [Hasher]: std::hash::Hasher","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":59073,"byte_end":59104,"line_start":149,"line_end":149,"column_start":1,"column_end":32}},{"value":"/ [BuildHasher]: std::hash::BuildHasher","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":59105,"byte_end":59146,"line_start":150,"line_end":150,"column_start":1,"column_end":42}},{"value":"/ [HashMap]: std::collections::HashMap","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":59147,"byte_end":59187,"line_start":151,"line_end":151,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":60238,"byte_end":60255,"line_start":177,"line_end":177,"column_start":12,"column_end":29},"name":"set_random_source","qualname":"<RandomState>::set_random_source","value":"pub fn set_random_source<impl RandomSource + Send + Sync + 'static: RandomSource +\n                         Send + Sync +\n                         'static>(impl RandomSource + Send + Sync + 'static)\n-> Result<(), bool>","parent":null,"children":[],"decl_id":null,"docs":" Provides an optional way to manually supply a source of randomness for Hasher keys.","sig":null,"attributes":[{"value":"/ Provides an optional way to manually supply a source of randomness for Hasher keys.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":59495,"byte_end":59582,"line_start":168,"line_end":168,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":59587,"byte_end":59590,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ The provided [RandomSource] will be used to be used as a source of randomness by [RandomState] to generate new states.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":59595,"byte_end":59717,"line_start":170,"line_end":170,"column_start":5,"column_end":127}},{"value":"/ If this method is not invoked the standard source of randomness is used as described in the Readme.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":59722,"byte_end":59825,"line_start":171,"line_end":171,"column_start":5,"column_end":108}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":59830,"byte_end":59833,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ The source of randomness can only be set once, and must be set before the first RandomState is created.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":59838,"byte_end":59945,"line_start":173,"line_end":173,"column_start":5,"column_end":112}},{"value":"/ If the source has already been specified `Err` is returned with a `bool` indicating if the set failed because","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":59950,"byte_end":60063,"line_start":174,"line_end":174,"column_start":5,"column_end":118}},{"value":"/ method was previously invoked (true) or if the default source is already being used (false).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":60068,"byte_end":60164,"line_start":175,"line_end":175,"column_start":5,"column_end":101}},{"value":"cfg(not(all(target_arch = \"arm\", target_os = \"none\")))","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":60169,"byte_end":60226,"line_start":176,"line_end":176,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":60975,"byte_end":60978,"line_start":196,"line_end":196,"column_start":12,"column_end":15},"name":"new","qualname":"<RandomState>::new","value":"pub fn new() -> RandomState","parent":null,"children":[],"decl_id":null,"docs":" Use randomly generated keys\n","sig":null,"attributes":[{"value":"/ Use randomly generated keys","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":60918,"byte_end":60949,"line_start":194,"line_end":194,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":60954,"byte_end":60963,"line_start":195,"line_end":195,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":61368,"byte_end":61381,"line_start":205,"line_end":205,"column_start":12,"column_end":25},"name":"generate_with","qualname":"<RandomState>::generate_with","value":"pub fn generate_with(u64, u64, u64, u64) -> RandomState","parent":null,"children":[],"decl_id":null,"docs":" Allows for supplying seeds, but each time it is called the resulting state will be different.\n This is done using a static counter, so it can safely be used with a fixed keys.\n","sig":null,"attributes":[{"value":"/ Allows for supplying seeds, but each time it is called the resulting state will be different.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":61156,"byte_end":61253,"line_start":202,"line_end":202,"column_start":5,"column_end":102}},{"value":"/ This is done using a static counter, so it can safely be used with a fixed keys.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":61258,"byte_end":61342,"line_start":203,"line_end":203,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":61347,"byte_end":61356,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":62485,"byte_end":62494,"line_start":239,"line_end":239,"column_start":12,"column_end":21},"name":"with_seed","qualname":"<RandomState>::with_seed","value":"pub fn with_seed(usize) -> RandomState","parent":null,"children":[],"decl_id":null,"docs":" Allows for explicitly setting a seed to used.","sig":null,"attributes":[{"value":"/ Allows for explicitly setting a seed to used.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":62327,"byte_end":62376,"line_start":235,"line_end":235,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":62381,"byte_end":62384,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ Note: This method does not require the provided seed to be strong.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":62389,"byte_end":62459,"line_start":237,"line_end":237,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":62464,"byte_end":62473,"line_start":238,"line_end":238,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":62902,"byte_end":62912,"line_start":249,"line_end":249,"column_start":18,"column_end":28},"name":"with_seeds","qualname":"<RandomState>::with_seeds","value":"pub const fn with_seeds(u64, u64, u64, u64) -> RandomState","parent":null,"children":[],"decl_id":null,"docs":" Allows for explicitly setting the seeds to used.","sig":null,"attributes":[{"value":"/ Allows for explicitly setting the seeds to used.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":62648,"byte_end":62700,"line_start":244,"line_end":244,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":62705,"byte_end":62708,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Note: This method is robust against 0s being passed for one or more of the parameters","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":62713,"byte_end":62802,"line_start":246,"line_end":246,"column_start":5,"column_end":94}},{"value":"/ or the same value being passed for more than one parameter.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":62807,"byte_end":62870,"line_start":247,"line_end":247,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":62875,"byte_end":62884,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":487},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":67441,"byte_end":67451,"line_start":41,"line_end":41,"column_start":11,"column_end":21},"name":"CallHasher","qualname":"::specialize::CallHasher","value":"CallHasher","parent":null,"children":[{"krate":0,"index":488}],"decl_id":null,"docs":" Provides a way to get an optimized hasher for a given data type.\n Rather than using a Hasher generically which can hash any value, this provides a way to get a specialized hash\n for a specific type. So this may be faster for primitive types.\n # Example\n ```\n use std::hash::BuildHasher;\n use ahash::RandomState;\n use ahash::CallHasher;","sig":null,"attributes":[{"value":"/ Provides a way to get an optimized hasher for a given data type.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":66519,"byte_end":66587,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/ Rather than using a Hasher generically which can hash any value, this provides a way to get a specialized hash","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":66588,"byte_end":66702,"line_start":18,"line_end":18,"column_start":1,"column_end":115}},{"value":"/ for a specific type. So this may be faster for primitive types.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":66703,"byte_end":66770,"line_start":19,"line_end":19,"column_start":1,"column_end":68}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":66771,"byte_end":66784,"line_start":20,"line_end":20,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":66785,"byte_end":66792,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use std::hash::BuildHasher;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":66793,"byte_end":66824,"line_start":22,"line_end":22,"column_start":1,"column_end":32}},{"value":"/ use ahash::RandomState;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":66825,"byte_end":66852,"line_start":23,"line_end":23,"column_start":1,"column_end":28}},{"value":"/ use ahash::CallHasher;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":66853,"byte_end":66879,"line_start":24,"line_end":24,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":66880,"byte_end":66883,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let hash_builder = RandomState::new();","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":66884,"byte_end":66926,"line_start":26,"line_end":26,"column_start":1,"column_end":43}},{"value":"/ //...","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":66927,"byte_end":66936,"line_start":27,"line_end":27,"column_start":1,"column_end":10}},{"value":"/ let value: u32 = 17;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":66937,"byte_end":66961,"line_start":28,"line_end":28,"column_start":1,"column_end":25}},{"value":"/ let hash = u32::get_hash(&value, &hash_builder);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":66962,"byte_end":67014,"line_start":29,"line_end":29,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":67015,"byte_end":67022,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ Note that the type used to invoke `get_hash` must be the same a the type of value passed.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":67023,"byte_end":67116,"line_start":31,"line_end":31,"column_start":1,"column_end":94}},{"value":"/ For example get a hasher specialized on `[u8]` can invoke:","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":67117,"byte_end":67179,"line_start":32,"line_end":32,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":67180,"byte_end":67187,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/ /// use std::hash::BuildHasher;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":67188,"byte_end":67223,"line_start":34,"line_end":34,"column_start":1,"column_end":36}},{"value":"/ # use ahash::RandomState;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":67224,"byte_end":67253,"line_start":35,"line_end":35,"column_start":1,"column_end":30}},{"value":"/ # use ahash::CallHasher;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":67254,"byte_end":67282,"line_start":36,"line_end":36,"column_start":1,"column_end":29}},{"value":"/ # let hash_builder = RandomState::new();","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":67283,"byte_end":67327,"line_start":37,"line_end":37,"column_start":1,"column_end":45}},{"value":"/ let bytes: [u8; 4] = [1, 2, 3, 4];","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":67328,"byte_end":67366,"line_start":38,"line_end":38,"column_start":1,"column_end":39}},{"value":"/ let hash = <[u8]>::get_hash(&bytes, &hash_builder);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":67367,"byte_end":67422,"line_start":39,"line_end":39,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":67423,"byte_end":67430,"line_start":40,"line_end":40,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":67461,"byte_end":67469,"line_start":42,"line_end":42,"column_start":8,"column_end":16},"name":"get_hash","qualname":"::specialize::CallHasher::get_hash","value":"pub fn get_hash<H: Hash + ?Sized, B: BuildHasher>(&H, &B) -> u64","parent":{"krate":0,"index":487},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":12,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":14009,"byte_end":14016,"line_start":30,"line_end":30,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":20004,"byte_end":20011,"line_start":146,"line_end":146,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":26975,"byte_end":26983,"line_start":22,"line_end":22,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":27142,"byte_end":27150,"line_start":28,"line_end":28,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":27251,"byte_end":27259,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":27539,"byte_end":27547,"line_start":44,"line_end":44,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":27874,"byte_end":27882,"line_start":57,"line_end":57,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31691,"byte_end":31699,"line_start":195,"line_end":195,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31838,"byte_end":31846,"line_start":202,"line_end":202,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31967,"byte_end":31975,"line_start":208,"line_end":208,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":32062,"byte_end":32070,"line_start":215,"line_end":215,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":32256,"byte_end":32264,"line_start":226,"line_end":226,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":32373,"byte_end":32381,"line_start":234,"line_end":234,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":32767,"byte_end":32775,"line_start":253,"line_end":253,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":32974,"byte_end":32982,"line_start":264,"line_end":264,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":33646,"byte_end":33654,"line_start":290,"line_end":290,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":33848,"byte_end":33856,"line_start":298,"line_end":298,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":34076,"byte_end":34084,"line_start":309,"line_end":309,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":34320,"byte_end":34328,"line_start":321,"line_end":321,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":36361,"byte_end":36369,"line_start":19,"line_end":19,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":36516,"byte_end":36524,"line_start":25,"line_end":25,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":36616,"byte_end":36624,"line_start":31,"line_end":31,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":36898,"byte_end":36906,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":301},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":37237,"byte_end":37245,"line_start":54,"line_end":54,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":306},{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":37375,"byte_end":37383,"line_start":61,"line_end":61,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":37497,"byte_end":37505,"line_start":67,"line_end":67,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":37664,"byte_end":37672,"line_start":77,"line_end":77,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":40975,"byte_end":40983,"line_start":212,"line_end":212,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":41161,"byte_end":41169,"line_start":222,"line_end":222,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":41595,"byte_end":41603,"line_start":241,"line_end":241,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":41778,"byte_end":41786,"line_start":249,"line_end":249,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":41986,"byte_end":41994,"line_start":260,"line_end":260,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":42197,"byte_end":42205,"line_start":271,"line_end":271,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":56820,"byte_end":56839,"line_start":79,"line_end":79,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":57166,"byte_end":57185,"line_start":93,"line_end":93,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":444},{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":59349,"byte_end":59360,"line_start":160,"line_end":160,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":59476,"byte_end":59487,"line_start":166,"line_end":166,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":457},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":63083,"byte_end":63094,"line_start":254,"line_end":254,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":63188,"byte_end":63199,"line_start":261,"line_end":261,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":67603,"byte_end":67604,"line_start":46,"line_end":46,"column_start":24,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":3498,"byte_end":3505,"line_start":99,"line_end":99,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":4952,"byte_end":4953,"line_start":141,"line_end":141,"column_start":41,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":534},{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":14009,"byte_end":14016,"line_start":30,"line_end":30,"column_start":6,"column_end":13},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1077},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/fallback_hash.rs","byte_start":20004,"byte_end":20011,"line_start":146,"line_end":146,"column_start":17,"column_end":24},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1077},"to":{"krate":2,"index":9103}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":26975,"byte_end":26983,"line_start":22,"line_end":22,"column_start":56,"column_end":64},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":27142,"byte_end":27150,"line_start":28,"line_end":28,"column_start":56,"column_end":64},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":2756}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":27251,"byte_end":27259,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1086},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":27539,"byte_end":27547,"line_start":44,"line_end":44,"column_start":15,"column_end":23},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1086},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":27874,"byte_end":27882,"line_start":57,"line_end":57,"column_start":15,"column_end":23},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1086},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31691,"byte_end":31699,"line_start":195,"line_end":195,"column_start":25,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":3064}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31838,"byte_end":31846,"line_start":202,"line_end":202,"column_start":28,"column_end":36},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":3077}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":31967,"byte_end":31975,"line_start":208,"line_end":208,"column_start":30,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1086},"to":{"krate":1,"index":6430}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":32062,"byte_end":32070,"line_start":215,"line_end":215,"column_start":29,"column_end":37},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":32256,"byte_end":32264,"line_start":226,"line_end":226,"column_start":22,"column_end":30},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":32373,"byte_end":32381,"line_start":234,"line_end":234,"column_start":40,"column_end":48},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":3149}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":32767,"byte_end":32775,"line_start":253,"line_end":253,"column_start":25,"column_end":33},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":32974,"byte_end":32982,"line_start":264,"line_end":264,"column_start":40,"column_end":48},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":7143}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":33646,"byte_end":33654,"line_start":290,"line_end":290,"column_start":32,"column_end":40},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":7147}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":33848,"byte_end":33856,"line_start":298,"line_end":298,"column_start":34,"column_end":42},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":7156}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":34076,"byte_end":34084,"line_start":309,"line_end":309,"column_start":46,"column_end":54},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":7156}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_map.rs","byte_start":34320,"byte_end":34328,"line_start":321,"line_end":321,"column_start":24,"column_end":32},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1086},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":36361,"byte_end":36369,"line_start":19,"line_end":19,"column_start":50,"column_end":58},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1097},"to":{"krate":2,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":36516,"byte_end":36524,"line_start":25,"line_end":25,"column_start":50,"column_end":58},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1097},"to":{"krate":2,"index":2756}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":36616,"byte_end":36624,"line_start":31,"line_end":31,"column_start":9,"column_end":17},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1097},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":36898,"byte_end":36906,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1097},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":37237,"byte_end":37245,"line_start":54,"line_end":54,"column_start":22,"column_end":30},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1097},"to":{"krate":2,"index":3064}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":37375,"byte_end":37383,"line_start":61,"line_end":61,"column_start":25,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1097},"to":{"krate":2,"index":3077}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":37497,"byte_end":37505,"line_start":67,"line_end":67,"column_start":26,"column_end":34},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1097},"to":{"krate":2,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":37664,"byte_end":37672,"line_start":77,"line_end":77,"column_start":19,"column_end":27},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1097},"to":{"krate":2,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":40975,"byte_end":40983,"line_start":212,"line_end":212,"column_start":22,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1097},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":41161,"byte_end":41169,"line_start":222,"line_end":222,"column_start":32,"column_end":40},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1097},"to":{"krate":2,"index":7143}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":41595,"byte_end":41603,"line_start":241,"line_end":241,"column_start":29,"column_end":37},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1097},"to":{"krate":2,"index":7147}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":41778,"byte_end":41786,"line_start":249,"line_end":249,"column_start":26,"column_end":34},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1097},"to":{"krate":2,"index":7156}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":41986,"byte_end":41994,"line_start":260,"line_end":260,"column_start":34,"column_end":42},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1097},"to":{"krate":2,"index":7156}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/hash_set.rs","byte_start":42197,"byte_end":42205,"line_start":271,"line_end":271,"column_start":21,"column_end":29},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1097},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":56820,"byte_end":56839,"line_start":79,"line_end":79,"column_start":6,"column_end":25},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":57166,"byte_end":57185,"line_start":93,"line_end":93,"column_start":23,"column_end":42},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":438},"to":{"krate":0,"index":429}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":59349,"byte_end":59360,"line_start":160,"line_end":160,"column_start":21,"column_end":32},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1106},"to":{"krate":2,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":59476,"byte_end":59487,"line_start":166,"line_end":166,"column_start":6,"column_end":17},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1106},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":63083,"byte_end":63094,"line_start":254,"line_end":254,"column_start":18,"column_end":29},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1106},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/random_state.rs","byte_start":63188,"byte_end":63199,"line_start":261,"line_end":261,"column_start":22,"column_end":33},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1106},"to":{"krate":2,"index":9134}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/specialize.rs","byte_start":67603,"byte_end":67604,"line_start":46,"line_end":46,"column_start":24,"column_end":25},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":492},"to":{"krate":0,"index":487}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":3498,"byte_end":3505,"line_start":99,"line_end":99,"column_start":18,"column_end":25},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1077},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":4638,"byte_end":4649,"line_start":130,"line_end":130,"column_start":34,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":9134},"to":{"krate":0,"index":523}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/ahash-0.7.6/src/lib.rs","byte_start":4952,"byte_end":4953,"line_start":141,"line_end":141,"column_start":41,"column_end":42},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":531},"to":{"krate":0,"index":523}}]}