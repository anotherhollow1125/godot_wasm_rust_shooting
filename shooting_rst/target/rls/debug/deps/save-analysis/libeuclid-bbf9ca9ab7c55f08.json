{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6","program":"/home/namn/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","euclid","--edition=2018","/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=bbf9ca9ab7c55f08","-C","extra-filename=-bbf9ca9ab7c55f08","--out-dir","/home/namn/Desktop/n/dev/minigame/shooting_rst/target/rls/debug/deps","-L","dependency=/home/namn/Desktop/n/dev/minigame/shooting_rst/target/rls/debug/deps","--extern","num_traits=/home/namn/Desktop/n/dev/minigame/shooting_rst/target/rls/debug/deps/libnum_traits-e1926912147b19ed.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/namn/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/namn/Desktop/n/dev/minigame/shooting_rst/target/rls/debug/deps/libeuclid-bbf9ca9ab7c55f08.rmeta"},"prelude":{"crate_id":{"name":"euclid","disambiguator":[7030690057359270665,4918931082950710409]},"crate_root":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src","external_crates":[{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2572959971889902175,17506693968225989007]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[7380289047210505863,13821127130725723065]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[15494144285296940423,1517275930380298805]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","num":4,"id":{"name":"num_traits","disambiguator":[10629931036731870069,16874145148152983886]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","num":5,"id":{"name":"std","disambiguator":[15256637969148649584,12170509131058075833]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","num":6,"id":{"name":"alloc","disambiguator":[16074686111301742862,11174094882134223101]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","num":7,"id":{"name":"libc","disambiguator":[9848143689052418189,5596786287495938678]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","num":8,"id":{"name":"unwind","disambiguator":[4765876764407181064,11122159180720543906]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","num":9,"id":{"name":"cfg_if","disambiguator":[3249135693812064660,5763443684941168569]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","num":10,"id":{"name":"hashbrown","disambiguator":[17048817722375060837,16920886256309599893]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","num":11,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13552797903376776722,10482089333731059857]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[5989449439605467183,7256304997069434828]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","num":13,"id":{"name":"std_detect","disambiguator":[13279369789493161905,12463804053127379464]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","num":14,"id":{"name":"addr2line","disambiguator":[295047501211602818,3843164955111373824]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","num":15,"id":{"name":"gimli","disambiguator":[14781020588812023641,7393321088923443539]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","num":16,"id":{"name":"object","disambiguator":[1927264790928947756,6617054577979570835]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[7597657085106642381,11470551509849691989]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","num":18,"id":{"name":"adler","disambiguator":[2355022556203982070,155364045674250901]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[3046834347757213021,4625500188193743608]}}],"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":427,"byte_end":4536,"line_start":10,"line_end":115,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":4520},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1894,"byte_end":1899,"line_start":43,"line_end":43,"column_start":23,"column_end":28},"alias_span":null,"name":"Angle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":370},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1923,"byte_end":1928,"line_start":44,"line_end":44,"column_start":23,"column_end":28},"alias_span":null,"name":"Box2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":829},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1954,"byte_end":1971,"line_start":45,"line_end":45,"column_start":25,"column_end":42},"alias_span":null,"name":"HomogeneousVector","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":960},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1996,"byte_end":2002,"line_start":46,"line_end":46,"column_start":24,"column_end":30},"alias_span":null,"name":"Length","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":961},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1996,"byte_end":2002,"line_start":46,"line_end":46,"column_start":24,"column_end":30},"alias_span":null,"name":"Length","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1662},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2027,"byte_end":2033,"line_start":47,"line_end":47,"column_start":24,"column_end":30},"alias_span":null,"name":"point2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1665},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2035,"byte_end":2041,"line_start":47,"line_end":47,"column_start":32,"column_end":38},"alias_span":null,"name":"point3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1227},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2043,"byte_end":2050,"line_start":47,"line_end":47,"column_start":40,"column_end":47},"alias_span":null,"name":"Point2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1442},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2052,"byte_end":2059,"line_start":47,"line_end":47,"column_start":49,"column_end":56},"alias_span":null,"name":"Point3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2282},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2084,"byte_end":2089,"line_start":48,"line_end":48,"column_start":23,"column_end":28},"alias_span":null,"name":"Scale","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2283},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2084,"byte_end":2089,"line_start":48,"line_end":48,"column_start":23,"column_end":28},"alias_span":null,"name":"Scale","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3120},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2119,"byte_end":2130,"line_start":49,"line_end":49,"column_start":29,"column_end":40},"alias_span":null,"name":"Transform2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3361},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2160,"byte_end":2171,"line_start":50,"line_end":50,"column_start":29,"column_end":40},"alias_span":null,"name":"Transform3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4474},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2197,"byte_end":2202,"line_start":51,"line_end":51,"column_start":25,"column_end":30},"alias_span":null,"name":"bvec2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4475},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2204,"byte_end":2209,"line_start":51,"line_end":51,"column_start":32,"column_end":37},"alias_span":null,"name":"bvec3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4683},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2211,"byte_end":2223,"line_start":51,"line_end":51,"column_start":39,"column_end":51},"alias_span":null,"name":"BoolVector2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4701},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2225,"byte_end":2237,"line_start":51,"line_end":51,"column_start":53,"column_end":65},"alias_span":null,"name":"BoolVector3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4468},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2264,"byte_end":2268,"line_start":52,"line_end":52,"column_start":25,"column_end":29},"alias_span":null,"name":"vec2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4471},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2270,"byte_end":2274,"line_start":52,"line_end":52,"column_start":31,"column_end":35},"alias_span":null,"name":"vec3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3960},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2276,"byte_end":2284,"line_start":52,"line_end":52,"column_start":37,"column_end":45},"alias_span":null,"name":"Vector2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4197},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2286,"byte_end":2294,"line_start":52,"line_end":52,"column_start":47,"column_end":55},"alias_span":null,"name":"Vector3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":785},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2321,"byte_end":2326,"line_start":54,"line_end":54,"column_start":24,"column_end":29},"alias_span":null,"name":"box3d","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":614},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2328,"byte_end":2333,"line_start":54,"line_end":54,"column_start":31,"column_end":36},"alias_span":null,"name":"Box3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1924},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2358,"byte_end":2362,"line_start":55,"line_end":55,"column_start":23,"column_end":27},"alias_span":null,"name":"rect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1736},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2364,"byte_end":2368,"line_start":55,"line_end":55,"column_start":29,"column_end":33},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4618},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2393,"byte_end":2409,"line_start":56,"line_end":56,"column_start":23,"column_end":39},"alias_span":null,"name":"RigidTransform3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2071},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2437,"byte_end":2447,"line_start":57,"line_end":57,"column_start":27,"column_end":37},"alias_span":null,"name":"Rotation2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2137},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2449,"byte_end":2459,"line_start":57,"line_end":57,"column_start":39,"column_end":49},"alias_span":null,"name":"Rotation3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2429},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2491,"byte_end":2504,"line_start":58,"line_end":58,"column_start":30,"column_end":43},"alias_span":null,"name":"SideOffsets2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2802},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2528,"byte_end":2533,"line_start":59,"line_end":59,"column_start":23,"column_end":28},"alias_span":null,"name":"size2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3040},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2535,"byte_end":2540,"line_start":59,"line_end":59,"column_start":30,"column_end":35},"alias_span":null,"name":"size3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2615},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2542,"byte_end":2548,"line_start":59,"line_end":59,"column_start":37,"column_end":43},"alias_span":null,"name":"Size2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2829},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2550,"byte_end":2556,"line_start":59,"line_end":59,"column_start":45,"column_end":51},"alias_span":null,"name":"Size3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3624},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2588,"byte_end":2601,"line_start":60,"line_end":60,"column_start":30,"column_end":43},"alias_span":null,"name":"Translation2D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3728},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2603,"byte_end":2616,"line_start":60,"line_end":60,"column_start":45,"column_end":58},"alias_span":null,"name":"Translation3D","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3836},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2640,"byte_end":2644,"line_start":61,"line_end":61,"column_start":22,"column_end":26},"alias_span":null,"name":"Trig","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":427,"byte_end":4536,"line_start":10,"line_end":115,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":275},{"krate":0,"index":282},{"krate":0,"index":287},{"krate":0,"index":541},{"krate":0,"index":788},{"krate":0,"index":885},{"krate":0,"index":1113},{"krate":0,"index":1135},{"krate":0,"index":1668},{"krate":0,"index":1927},{"krate":0,"index":1987},{"krate":0,"index":2224},{"krate":0,"index":2381},{"krate":0,"index":2520},{"krate":0,"index":3043},{"krate":0,"index":3260},{"krate":0,"index":3543},{"krate":0,"index":3835},{"krate":0,"index":3844},{"krate":0,"index":4720},{"krate":0,"index":4722},{"krate":0,"index":4724},{"krate":0,"index":4725},{"krate":0,"index":4727},{"krate":0,"index":4729},{"krate":0,"index":4730},{"krate":0,"index":4732},{"krate":0,"index":4733},{"krate":0,"index":4735},{"krate":0,"index":4737},{"krate":0,"index":4739},{"krate":0,"index":4476}],"decl_id":null,"docs":" A collection of strongly typed math tools for computer graphics with an inclination\n towards 2d graphics and layout.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":450,"byte_end":456,"line_start":10,"line_end":10,"column_start":24,"column_end":30}},{"value":"/ A collection of strongly typed math tools for computer graphics with an inclination","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":460,"byte_end":547,"line_start":12,"line_end":12,"column_start":1,"column_end":88}},{"value":"/ towards 2d graphics and layout.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":548,"byte_end":583,"line_start":13,"line_end":13,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":584,"byte_end":587,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ All types are generic over the scalar type of their component (`f32`, `i32`, etc.),","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":588,"byte_end":675,"line_start":15,"line_end":15,"column_start":1,"column_end":88}},{"value":"/ and tagged with a generic Unit parameter which is useful to prevent mixing","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":676,"byte_end":754,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ values from different spaces. For example it should not be legal to translate","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":755,"byte_end":836,"line_start":17,"line_end":17,"column_start":1,"column_end":82}},{"value":"/ a screen-space position by a world-space vector and this can be expressed using","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":837,"byte_end":920,"line_start":18,"line_end":18,"column_start":1,"column_end":84}},{"value":"/ the generic Unit parameter.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":921,"byte_end":952,"line_start":19,"line_end":19,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":953,"byte_end":956,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This unit system is not mandatory and all structures have an alias","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":957,"byte_end":1027,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/ with the default unit: `UnknownUnit`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1028,"byte_end":1069,"line_start":22,"line_end":22,"column_start":1,"column_end":42}},{"value":"/ for example ```default::Point2D<T>``` is equivalent to ```Point2D<T, UnknownUnit>```.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1070,"byte_end":1159,"line_start":23,"line_end":23,"column_start":1,"column_end":90}},{"value":"/ Client code typically creates a set of aliases for each type and doesn't need","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1160,"byte_end":1241,"line_start":24,"line_end":24,"column_start":1,"column_end":82}},{"value":"/ to deal with the specifics of typed units further. For example:","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1242,"byte_end":1309,"line_start":25,"line_end":25,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1310,"byte_end":1313,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1314,"byte_end":1325,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/ use euclid::*;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1326,"byte_end":1344,"line_start":28,"line_end":28,"column_start":1,"column_end":19}},{"value":"/ pub struct ScreenSpace;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1345,"byte_end":1372,"line_start":29,"line_end":29,"column_start":1,"column_end":28}},{"value":"/ pub type ScreenPoint = Point2D<f32, ScreenSpace>;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1373,"byte_end":1426,"line_start":30,"line_end":30,"column_start":1,"column_end":54}},{"value":"/ pub type ScreenSize = Size2D<f32, ScreenSpace>;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1427,"byte_end":1478,"line_start":31,"line_end":31,"column_start":1,"column_end":52}},{"value":"/ pub struct WorldSpace;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1479,"byte_end":1505,"line_start":32,"line_end":32,"column_start":1,"column_end":27}},{"value":"/ pub type WorldPoint = Point3D<f32, WorldSpace>;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1506,"byte_end":1557,"line_start":33,"line_end":33,"column_start":1,"column_end":52}},{"value":"/ pub type ProjectionMatrix = Transform3D<f32, WorldSpace, ScreenSpace>;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1558,"byte_end":1632,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ // etc...","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1633,"byte_end":1646,"line_start":35,"line_end":35,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1647,"byte_end":1654,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1655,"byte_end":1658,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ All euclid types are marked `#[repr(C)]` in order to facilitate exposing them to","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1659,"byte_end":1743,"line_start":38,"line_end":38,"column_start":1,"column_end":85}},{"value":"/ foreign function interfaces (provided the underlying scalar type is also `repr(C)`).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1744,"byte_end":1832,"line_start":39,"line_end":39,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1833,"byte_end":1836,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"deny(unconditional_recursion)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":1837,"byte_end":1870,"line_start":41,"line_end":41,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":4520},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":6630,"byte_end":6635,"line_start":24,"line_end":24,"column_start":12,"column_end":17},"name":"Angle","qualname":"::angle::Angle","value":"Angle { radians }","parent":null,"children":[{"krate":0,"index":4522}],"decl_id":null,"docs":" An angle in radians\n","sig":null,"attributes":[{"value":"/ An angle in radians","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":6395,"byte_end":6418,"line_start":20,"line_end":20,"column_start":1,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":4522},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":6649,"byte_end":6656,"line_start":25,"line_end":25,"column_start":9,"column_end":16},"name":"radians","qualname":"::angle::Angle::radians","value":"T","parent":{"krate":0,"index":4520},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":6708,"byte_end":6715,"line_start":30,"line_end":30,"column_start":12,"column_end":19},"name":"radians","qualname":"<Angle<T>>::radians","value":"pub fn radians(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":6687,"byte_end":6696,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":6796,"byte_end":6799,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"get","qualname":"<Angle<T>>::get","value":"pub fn get(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":6775,"byte_end":6784,"line_start":34,"line_end":34,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":6906,"byte_end":6913,"line_start":45,"line_end":45,"column_start":12,"column_end":19},"name":"degrees","qualname":"<Angle<T>>::degrees","value":"pub fn degrees(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":6885,"byte_end":6894,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":7039,"byte_end":7049,"line_start":52,"line_end":52,"column_start":12,"column_end":22},"name":"to_degrees","qualname":"<Angle<T>>::to_degrees","value":"pub fn to_degrees(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":7018,"byte_end":7027,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":7303,"byte_end":7311,"line_start":62,"line_end":62,"column_start":12,"column_end":20},"name":"positive","qualname":"<Angle<T>>::positive","value":"pub fn positive(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns this angle in the [0..2*PI[ range.\n","sig":null,"attributes":[{"value":"/ Returns this angle in the [0..2*PI[ range.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":7245,"byte_end":7291,"line_start":61,"line_end":61,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":7572,"byte_end":7578,"line_start":72,"line_end":72,"column_start":12,"column_end":18},"name":"signed","qualname":"<Angle<T>>::signed","value":"pub fn signed(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns this angle in the ]-PI..PI] range.\n","sig":null,"attributes":[{"value":"/ Returns this angle in the ]-PI..PI] range.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":7514,"byte_end":7560,"line_start":71,"line_end":71,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":7965,"byte_end":7973,"line_start":90,"line_end":90,"column_start":12,"column_end":20},"name":"angle_to","qualname":"<Angle<T>>::angle_to","value":"pub fn angle_to(&Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the shortest signed angle between two angles.","sig":null,"attributes":[{"value":"/ Returns the shortest signed angle between two angles.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":7841,"byte_end":7898,"line_start":87,"line_end":87,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":7903,"byte_end":7906,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Takes wrapping and signs into account.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":7911,"byte_end":7953,"line_start":89,"line_end":89,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":8259,"byte_end":8263,"line_start":99,"line_end":99,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Angle<T>>::lerp","value":"pub fn lerp(&Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linear interpolation between two angles, using the shortest path.\n","sig":null,"attributes":[{"value":"/ Linear interpolation between two angles, using the shortest path.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":8178,"byte_end":8247,"line_start":98,"line_end":98,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":8440,"byte_end":8447,"line_start":109,"line_end":109,"column_start":12,"column_end":19},"name":"sin_cos","qualname":"<Angle<T>>::sin_cos","value":"pub fn sin_cos(Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Returns (sin(self), cos(self)).\n","sig":null,"attributes":[{"value":"/ Returns (sin(self), cos(self)).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":8393,"byte_end":8428,"line_start":108,"line_end":108,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":8583,"byte_end":8592,"line_start":115,"line_end":115,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Angle<T>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the angle is a finite number.\n","sig":null,"attributes":[{"value":"/ Returns true if the angle is a finite number.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":8508,"byte_end":8557,"line_start":113,"line_end":113,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":8562,"byte_end":8571,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":8700,"byte_end":8704,"line_start":124,"line_end":124,"column_start":12,"column_end":16},"name":"zero","qualname":"<Angle<T>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":8833,"byte_end":8835,"line_start":133,"line_end":133,"column_start":12,"column_end":14},"name":"pi","qualname":"<Angle<T>>::pi","value":"pub fn pi() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":8898,"byte_end":8904,"line_start":137,"line_end":137,"column_start":12,"column_end":18},"name":"two_pi","qualname":"<Angle<T>>::two_pi","value":"pub fn two_pi() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":8977,"byte_end":8986,"line_start":141,"line_end":141,"column_start":12,"column_end":21},"name":"frac_pi_2","qualname":"<Angle<T>>::frac_pi_2","value":"pub fn frac_pi_2() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":9056,"byte_end":9065,"line_start":145,"line_end":145,"column_start":12,"column_end":21},"name":"frac_pi_3","qualname":"<Angle<T>>::frac_pi_3","value":"pub fn frac_pi_3() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":9135,"byte_end":9144,"line_start":149,"line_end":149,"column_start":12,"column_end":21},"name":"frac_pi_4","qualname":"<Angle<T>>::frac_pi_4","value":"pub fn frac_pi_4() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":9335,"byte_end":9339,"line_start":160,"line_end":160,"column_start":12,"column_end":16},"name":"cast","qualname":"<Angle<T>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Angle<NewT>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":9257,"byte_end":9309,"line_start":158,"line_end":158,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":9314,"byte_end":9323,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":9496,"byte_end":9504,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Angle<T>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Angle<NewT>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":9423,"byte_end":9484,"line_start":164,"line_end":164,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":9730,"byte_end":9736,"line_start":173,"line_end":173,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Angle<T>>::to_f32","value":"pub fn to_f32(&Self) -> Angle<f32>","parent":null,"children":[],"decl_id":null,"docs":" Cast angle to `f32`.\n","sig":null,"attributes":[{"value":"/ Cast angle to `f32`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":9680,"byte_end":9704,"line_start":171,"line_end":171,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":9709,"byte_end":9718,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":9838,"byte_end":9844,"line_start":179,"line_end":179,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Angle<T>>::to_f64","value":"pub fn to_f64(&Self) -> Angle<f64>","parent":null,"children":[],"decl_id":null,"docs":" Cast angle `f64`.\n","sig":null,"attributes":[{"value":"/ Cast angle `f64`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":9791,"byte_end":9812,"line_start":177,"line_end":177,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":9817,"byte_end":9826,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":275},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/approxeq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"approxeq","qualname":"::approxeq","value":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/approxeq.rs","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":4552},{"krate":0,"index":4555}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":276},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/approxeq.rs","byte_start":15088,"byte_end":15096,"line_start":11,"line_end":11,"column_start":11,"column_end":19},"name":"ApproxEq","qualname":"::approxeq::ApproxEq","value":"ApproxEq<Eps>","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280}],"decl_id":null,"docs":" Trait for testing approximate equality\n","sig":null,"attributes":[{"value":"/ Trait for testing approximate equality","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/approxeq.rs","byte_start":15035,"byte_end":15077,"line_start":10,"line_end":10,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/approxeq.rs","byte_start":15141,"byte_end":15155,"line_start":13,"line_end":13,"column_start":8,"column_end":22},"name":"approx_epsilon","qualname":"::approxeq::ApproxEq::approx_epsilon","value":"pub fn approx_epsilon() -> Eps","parent":{"krate":0,"index":276},"children":[],"decl_id":null,"docs":" Default epsilon value\n","sig":null,"attributes":[{"value":"/ Default epsilon value","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/approxeq.rs","byte_start":15108,"byte_end":15133,"line_start":12,"line_end":12,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/approxeq.rs","byte_start":15293,"byte_end":15306,"line_start":17,"line_end":17,"column_start":8,"column_end":21},"name":"approx_eq_eps","qualname":"::approxeq::ApproxEq::approx_eq_eps","value":"pub fn approx_eq_eps(&Self, &Self, &Eps) -> bool","parent":{"krate":0,"index":276},"children":[],"decl_id":null,"docs":" Returns `true` is this object is approximately equal to the other one, using\n a provided epsilon value.\n","sig":null,"attributes":[{"value":"/ Returns `true` is this object is approximately equal to the other one, using","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/approxeq.rs","byte_start":15171,"byte_end":15251,"line_start":15,"line_end":15,"column_start":5,"column_end":85}},{"value":"/ a provided epsilon value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/approxeq.rs","byte_start":15256,"byte_end":15285,"line_start":16,"line_end":16,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/approxeq.rs","byte_start":15498,"byte_end":15507,"line_start":21,"line_end":21,"column_start":8,"column_end":17},"name":"approx_eq","qualname":"::approxeq::ApproxEq::approx_eq","value":"pub fn approx_eq(&Self, &Self) -> bool","parent":{"krate":0,"index":276},"children":[],"decl_id":null,"docs":" Returns `true` is this object is approximately equal to the other one, using\n the `approx_epsilon()` epsilon value.\n","sig":null,"attributes":[{"value":"/ Returns `true` is this object is approximately equal to the other one, using","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/approxeq.rs","byte_start":15364,"byte_end":15444,"line_start":19,"line_end":19,"column_start":5,"column_end":85}},{"value":"/ the `approx_epsilon()` epsilon value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/approxeq.rs","byte_start":15449,"byte_end":15490,"line_start":20,"line_end":20,"column_start":5,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":282},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/approxord.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"approxord","qualname":"::approxord","value":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/approxord.rs","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":285}],"decl_id":null,"docs":" Utilities for testing approximate ordering - especially true for\n floating point types, where NaN's cannot be ordered.\n","sig":null,"attributes":[{"value":"/ Utilities for testing approximate ordering - especially true for","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/approxord.rs","byte_start":16484,"byte_end":16552,"line_start":10,"line_end":10,"column_start":1,"column_end":69}},{"value":"/ floating point types, where NaN's cannot be ordered.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/approxord.rs","byte_start":16553,"byte_end":16609,"line_start":11,"line_end":11,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":283},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/approxord.rs","byte_start":16618,"byte_end":16621,"line_start":13,"line_end":13,"column_start":8,"column_end":11},"name":"min","qualname":"::approxord::min","value":"pub fn min<T: PartialOrd>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":285},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/approxord.rs","byte_start":16721,"byte_end":16724,"line_start":21,"line_end":21,"column_start":8,"column_end":11},"name":"max","qualname":"::approxord::max","value":"pub fn max<T: PartialOrd>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":370},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19592,"byte_end":19597,"line_start":65,"line_end":65,"column_start":12,"column_end":17},"name":"Box2D","qualname":"::box2d::Box2D","value":"Box2D { min, max }","parent":null,"children":[{"krate":0,"index":373},{"krate":0,"index":374}],"decl_id":null,"docs":" A 2d axis aligned rectangle represented by its minimum and maximum coordinates.","sig":null,"attributes":[{"value":"/ A 2d axis aligned rectangle represented by its minimum and maximum coordinates.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":18081,"byte_end":18164,"line_start":30,"line_end":30,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":18165,"byte_end":18168,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Representation","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":18169,"byte_end":18189,"line_start":32,"line_end":32,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":18190,"byte_end":18193,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ This struct is similar to [`Rect`], but stores rectangle as two endpoints","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":18194,"byte_end":18271,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ instead of origin point and size. Such representation has several advantages over","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":18272,"byte_end":18357,"line_start":35,"line_end":35,"column_start":1,"column_end":86}},{"value":"/ [`Rect`] representation:","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":18358,"byte_end":18386,"line_start":36,"line_end":36,"column_start":1,"column_end":29}},{"value":"/ - Several operations are more efficient with `Box2D`, including [`intersection`],","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":18387,"byte_end":18472,"line_start":37,"line_end":37,"column_start":1,"column_end":86}},{"value":"/   [`union`], and point-in-rect.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":18473,"byte_end":18508,"line_start":38,"line_end":38,"column_start":1,"column_end":36}},{"value":"/ - The representation is less susceptible to overflow. With [`Rect`], computation","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":18509,"byte_end":18593,"line_start":39,"line_end":39,"column_start":1,"column_end":85}},{"value":"/   of second point can overflow for a large range of values of origin and size.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":18594,"byte_end":18676,"line_start":40,"line_end":40,"column_start":1,"column_end":83}},{"value":"/   However, with `Box2D`, computation of [`size`] cannot overflow if the coordinates","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":18677,"byte_end":18764,"line_start":41,"line_end":41,"column_start":1,"column_end":88}},{"value":"/   are signed and the resulting size is unsigned.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":18765,"byte_end":18817,"line_start":42,"line_end":42,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":18818,"byte_end":18821,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ A known disadvantage of `Box2D` is that translating the rectangle requires translating","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":18822,"byte_end":18912,"line_start":44,"line_end":44,"column_start":1,"column_end":91}},{"value":"/ both points, whereas translating [`Rect`] only requires translating one point.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":18913,"byte_end":18995,"line_start":45,"line_end":45,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":18996,"byte_end":18999,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Empty box","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19000,"byte_end":19015,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19016,"byte_end":19019,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ A box is considered empty (see [`is_empty`]) if any of the following is true:","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19020,"byte_end":19101,"line_start":49,"line_end":49,"column_start":1,"column_end":82}},{"value":"/ - it's area is empty,","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19102,"byte_end":19127,"line_start":50,"line_end":50,"column_start":1,"column_end":26}},{"value":"/ - it's area is negative (`min.x > max.x` or `min.y > max.y`),","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19128,"byte_end":19193,"line_start":51,"line_end":51,"column_start":1,"column_end":66}},{"value":"/ - it contains NaNs.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19194,"byte_end":19217,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19218,"byte_end":19221,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ [`Rect`]: struct.Rect.html","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19222,"byte_end":19252,"line_start":54,"line_end":54,"column_start":1,"column_end":31}},{"value":"/ [`intersection`]: #method.intersection","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19253,"byte_end":19295,"line_start":55,"line_end":55,"column_start":1,"column_end":43}},{"value":"/ [`is_empty`]: #method.is_empty","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19296,"byte_end":19330,"line_start":56,"line_end":56,"column_start":1,"column_end":35}},{"value":"/ [`union`]: #method.union","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19331,"byte_end":19359,"line_start":57,"line_end":57,"column_start":1,"column_end":29}},{"value":"/ [`size`]: #method.size","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19360,"byte_end":19386,"line_start":58,"line_end":58,"column_start":1,"column_end":27}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19387,"byte_end":19397,"line_start":59,"line_end":59,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":373},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19614,"byte_end":19617,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"name":"min","qualname":"::box2d::Box2D::min","value":"point::Point2D<T, U>","parent":{"krate":0,"index":370},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":374},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19642,"byte_end":19645,"line_start":67,"line_end":67,"column_start":9,"column_end":12},"name":"max","qualname":"::box2d::Box2D::max","value":"point::Point2D<T, U>","parent":{"krate":0,"index":370},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":20493,"byte_end":20496,"line_start":105,"line_end":105,"column_start":18,"column_end":21},"name":"new","qualname":"<Box2D<T, U>>::new","value":"pub const fn new(Point2D<T, U>, Point2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":20445,"byte_end":20461,"line_start":103,"line_end":103,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":20466,"byte_end":20475,"line_start":104,"line_end":104,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":20627,"byte_end":20647,"line_start":111,"line_end":111,"column_start":12,"column_end":32},"name":"from_origin_and_size","qualname":"<Box2D<T, U>>::from_origin_and_size","value":"pub fn from_origin_and_size(Point2D<T, U>, Size2D<T, U>) -> Self where\nT: Copy + Add<T, Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":20585,"byte_end":20601,"line_start":109,"line_end":109,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":20606,"byte_end":20615,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":20967,"byte_end":20976,"line_start":123,"line_end":123,"column_start":12,"column_end":21},"name":"from_size","qualname":"<Box2D<T, U>>::from_size","value":"pub fn from_size(Size2D<T, U>) -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Creates a Box2D of the given size, at offset zero.\n","sig":null,"attributes":[{"value":"/ Creates a Box2D of the given size, at offset zero.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":20887,"byte_end":20941,"line_start":121,"line_end":121,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":20946,"byte_end":20955,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":21449,"byte_end":21460,"line_start":140,"line_end":140,"column_start":12,"column_end":23},"name":"is_negative","qualname":"<Box2D<T, U>>::is_negative","value":"pub fn is_negative(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the box has a negative area.","sig":null,"attributes":[{"value":"/ Returns true if the box has a negative area.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":21194,"byte_end":21242,"line_start":135,"line_end":135,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":21247,"byte_end":21250,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ The common interpretation for a negative box is to consider it empty. It can be obtained","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":21255,"byte_end":21347,"line_start":137,"line_end":137,"column_start":5,"column_end":97}},{"value":"/ by calculating the intersection of two boxes that do not intersect.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":21352,"byte_end":21423,"line_start":138,"line_end":138,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":21428,"byte_end":21437,"line_start":139,"line_end":139,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":21628,"byte_end":21636,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Box2D<T, U>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the size is zero, negative or NaN.\n","sig":null,"attributes":[{"value":"/ Returns true if the size is zero, negative or NaN.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":21548,"byte_end":21602,"line_start":144,"line_end":144,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":21607,"byte_end":21616,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":21799,"byte_end":21809,"line_start":152,"line_end":152,"column_start":12,"column_end":22},"name":"intersects","qualname":"<Box2D<T, U>>::intersects","value":"pub fn intersects(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the two boxes intersect.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the two boxes intersect.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":21727,"byte_end":21773,"line_start":150,"line_end":150,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":21778,"byte_end":21787,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":22235,"byte_end":22243,"line_start":163,"line_end":163,"column_start":12,"column_end":20},"name":"contains","qualname":"<Box2D<T, U>>::contains","value":"pub fn contains(&Self, Point2D<T, U>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box contains the point. Points are considered\n in the box if they are on the front, left or top faces, but outside if they\n are on the back, right or bottom faces.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box contains the point. Points are considered","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":22005,"byte_end":22077,"line_start":159,"line_end":159,"column_start":5,"column_end":77}},{"value":"/ in the box if they are on the front, left or top faces, but outside if they","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":22082,"byte_end":22161,"line_start":160,"line_end":160,"column_start":5,"column_end":84}},{"value":"/ are on the back, right or bottom faces.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":22166,"byte_end":22209,"line_start":161,"line_end":161,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":22214,"byte_end":22223,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":22601,"byte_end":22613,"line_start":171,"line_end":171,"column_start":12,"column_end":24},"name":"contains_box","qualname":"<Box2D<T, U>>::contains_box","value":"pub fn contains_box(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box contains the interior of the other box. Always\n returns `true` if other is empty, and always returns `false` if other is\n nonempty but this box is empty.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box contains the interior of the other box. Always","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":22377,"byte_end":22454,"line_start":167,"line_end":167,"column_start":5,"column_end":82}},{"value":"/ returns `true` if other is empty, and always returns `false` if other is","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":22459,"byte_end":22535,"line_start":168,"line_end":168,"column_start":5,"column_end":81}},{"value":"/ nonempty but this box is empty.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":22540,"byte_end":22575,"line_start":169,"line_end":169,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":22580,"byte_end":22589,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":22939,"byte_end":22951,"line_start":185,"line_end":185,"column_start":12,"column_end":24},"name":"to_non_empty","qualname":"<Box2D<T, U>>::to_non_empty","value":"pub fn to_non_empty(&Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":22918,"byte_end":22927,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":23190,"byte_end":23202,"line_start":195,"line_end":195,"column_start":12,"column_end":24},"name":"intersection","qualname":"<Box2D<T, U>>::intersection","value":"pub fn intersection(&Self, &Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Computes the intersection of two boxes, returning `None` if the boxes do not intersect.\n","sig":null,"attributes":[{"value":"/ Computes the intersection of two boxes, returning `None` if the boxes do not intersect.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":23073,"byte_end":23164,"line_start":193,"line_end":193,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":23169,"byte_end":23178,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":23780,"byte_end":23802,"line_start":212,"line_end":212,"column_start":12,"column_end":34},"name":"intersection_unchecked","qualname":"<Box2D<T, U>>::intersection_unchecked","value":"pub fn intersection_unchecked(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the intersection of two boxes without check whether they do intersect.","sig":null,"attributes":[{"value":"/ Computes the intersection of two boxes without check whether they do intersect.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":23384,"byte_end":23467,"line_start":205,"line_end":205,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":23472,"byte_end":23475,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ The result is a negative box if the boxes do not intersect.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":23480,"byte_end":23543,"line_start":207,"line_end":207,"column_start":5,"column_end":68}},{"value":"/ This can be useful for computing the intersection of more than two boxes, as","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":23548,"byte_end":23628,"line_start":208,"line_end":208,"column_start":5,"column_end":85}},{"value":"/ it is possible to chain multiple intersection_unchecked calls and check for","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":23633,"byte_end":23712,"line_start":209,"line_end":209,"column_start":5,"column_end":84}},{"value":"/ empty/negative result at the end.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":23717,"byte_end":23754,"line_start":210,"line_end":210,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":23759,"byte_end":23768,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":24179,"byte_end":24184,"line_start":223,"line_end":223,"column_start":12,"column_end":17},"name":"union","qualname":"<Box2D<T, U>>::union","value":"pub fn union(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the union of two boxes.","sig":null,"attributes":[{"value":"/ Computes the union of two boxes.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":24041,"byte_end":24077,"line_start":219,"line_end":219,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":24082,"byte_end":24085,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ If either of the boxes is empty, the other one is returned.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":24090,"byte_end":24153,"line_start":221,"line_end":221,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":24158,"byte_end":24167,"line_start":222,"line_end":222,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":24698,"byte_end":24707,"line_start":244,"line_end":244,"column_start":12,"column_end":21},"name":"translate","qualname":"<Box2D<T, U>>::translate","value":"pub fn translate(&Self, Vector2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the same box, translated by a vector.\n","sig":null,"attributes":[{"value":"/ Returns the same box, translated by a vector.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":24623,"byte_end":24672,"line_start":242,"line_end":242,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":24677,"byte_end":24686,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":24934,"byte_end":24938,"line_start":257,"line_end":257,"column_start":12,"column_end":16},"name":"size","qualname":"<Box2D<T, U>>::size","value":"pub fn size(&Self) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":24913,"byte_end":24922,"line_start":256,"line_end":256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":25145,"byte_end":25153,"line_start":264,"line_end":264,"column_start":12,"column_end":20},"name":"set_size","qualname":"<Box2D<T, U>>::set_size","value":"pub fn set_size(&mut Self, Size2D<T, U>)","parent":null,"children":[],"decl_id":null,"docs":" Change the size of the box by adjusting the max endpoint\n without modifying the min endpoint.\n","sig":null,"attributes":[{"value":"/ Change the size of the box by adjusting the max endpoint","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":25015,"byte_end":25075,"line_start":261,"line_end":261,"column_start":5,"column_end":65}},{"value":"/ without modifying the min endpoint.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":25080,"byte_end":25119,"line_start":262,"line_end":262,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":25124,"byte_end":25133,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":25298,"byte_end":25303,"line_start":270,"line_end":270,"column_start":12,"column_end":17},"name":"width","qualname":"<Box2D<T, U>>::width","value":"pub fn width(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":25277,"byte_end":25286,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":25382,"byte_end":25388,"line_start":275,"line_end":275,"column_start":12,"column_end":18},"name":"height","qualname":"<Box2D<T, U>>::height","value":"pub fn height(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":25361,"byte_end":25370,"line_start":274,"line_end":274,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":25467,"byte_end":25474,"line_start":280,"line_end":280,"column_start":12,"column_end":19},"name":"to_rect","qualname":"<Box2D<T, U>>::to_rect","value":"pub fn to_rect(&Self) -> Rect<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":25446,"byte_end":25455,"line_start":279,"line_end":279,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":25795,"byte_end":25802,"line_start":295,"line_end":295,"column_start":12,"column_end":19},"name":"inflate","qualname":"<Box2D<T, U>>::inflate","value":"pub fn inflate(&Self, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Inflates the box by the specified sizes on each side respectively.\n","sig":null,"attributes":[{"value":"/ Inflates the box by the specified sizes on each side respectively.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":25683,"byte_end":25753,"line_start":292,"line_end":292,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":25758,"byte_end":25767,"line_start":293,"line_end":293,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":25772,"byte_end":25783,"line_start":294,"line_end":294,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":26238,"byte_end":26247,"line_start":306,"line_end":306,"column_start":12,"column_end":21},"name":"inner_box","qualname":"<Box2D<T, U>>::inner_box","value":"pub fn inner_box(&Self, SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the size and position of an inner box.","sig":null,"attributes":[{"value":"/ Calculate the size and position of an inner box.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":26010,"byte_end":26062,"line_start":302,"line_end":302,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":26067,"byte_end":26070,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ Subtracts the side offsets from all sides. The horizontal, vertical","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":26075,"byte_end":26146,"line_start":304,"line_end":304,"column_start":5,"column_end":76}},{"value":"/ and applicate offsets must not be larger than the original side length.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":26151,"byte_end":26226,"line_start":305,"line_end":305,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":26595,"byte_end":26604,"line_start":316,"line_end":316,"column_start":12,"column_end":21},"name":"outer_box","qualname":"<Box2D<T, U>>::outer_box","value":"pub fn outer_box(&Self, SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the b and position of an outer box.","sig":null,"attributes":[{"value":"/ Calculate the b and position of an outer box.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":26458,"byte_end":26507,"line_start":313,"line_end":313,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":26512,"byte_end":26515,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ Add the offsets to all sides. The expanded box is returned.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":26520,"byte_end":26583,"line_start":315,"line_end":315,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":26960,"byte_end":26971,"line_start":329,"line_end":329,"column_start":12,"column_end":23},"name":"from_points","qualname":"<Box2D<T, U>>::from_points","value":"pub fn from_points<I>(I) -> Self where I: IntoIterator,\nI::Item: Borrow<Point2D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest box containing all of the provided points.\n","sig":null,"attributes":[{"value":"/ Returns the smallest box containing all of the provided points.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":26881,"byte_end":26948,"line_start":328,"line_end":328,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":28007,"byte_end":28011,"line_start":371,"line_end":371,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Box2D<T, U>>::lerp","value":"pub fn lerp(&Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this box and another box.\n","sig":null,"attributes":[{"value":"/ Linearly interpolate between this box and another box.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":27923,"byte_end":27981,"line_start":369,"line_end":369,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":27986,"byte_end":27995,"line_start":370,"line_end":370,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":28230,"byte_end":28236,"line_start":380,"line_end":380,"column_start":12,"column_end":18},"name":"center","qualname":"<Box2D<T, U>>::center","value":"pub fn center(&Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":28470,"byte_end":28474,"line_start":391,"line_end":391,"column_start":12,"column_end":16},"name":"area","qualname":"<Box2D<T, U>>::area","value":"pub fn area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":28449,"byte_end":28458,"line_start":390,"line_end":390,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":28666,"byte_end":28670,"line_start":402,"line_end":402,"column_start":12,"column_end":16},"name":"zero","qualname":"<Box2D<T, U>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":28611,"byte_end":28654,"line_start":401,"line_end":401,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":30460,"byte_end":30467,"line_start":478,"line_end":478,"column_start":12,"column_end":19},"name":"x_range","qualname":"<Box2D<T, U>>::x_range","value":"pub fn x_range(&Self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":30439,"byte_end":30448,"line_start":477,"line_end":477,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":30552,"byte_end":30559,"line_start":483,"line_end":483,"column_start":12,"column_end":19},"name":"y_range","qualname":"<Box2D<T, U>>::y_range","value":"pub fn y_range(&Self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":30531,"byte_end":30540,"line_start":482,"line_end":482,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":30703,"byte_end":30713,"line_start":489,"line_end":489,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Box2D<T, U>>::to_untyped","value":"pub fn to_untyped(&Self) -> Box2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":30623,"byte_end":30677,"line_start":487,"line_end":487,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":30682,"byte_end":30691,"line_start":488,"line_end":488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":30886,"byte_end":30898,"line_start":495,"line_end":495,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Box2D<T, U>>::from_untyped","value":"pub fn from_untyped(&Box2D<T, UnknownUnit>) -> Box2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":30824,"byte_end":30860,"line_start":493,"line_end":493,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":30865,"byte_end":30874,"line_start":494,"line_end":494,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":31076,"byte_end":31085,"line_start":501,"line_end":501,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Box2D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(&Self) -> Box2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":31033,"byte_end":31050,"line_start":499,"line_end":499,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":31055,"byte_end":31064,"line_start":500,"line_end":500,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":31208,"byte_end":31213,"line_start":506,"line_end":506,"column_start":12,"column_end":17},"name":"scale","qualname":"<Box2D<T, U>>::scale","value":"pub fn scale<S: Copy>(&Self, S, S) -> Self where T: Mul<S, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":31187,"byte_end":31196,"line_start":505,"line_end":505,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":31871,"byte_end":31875,"line_start":524,"line_end":524,"column_start":12,"column_end":16},"name":"cast","qualname":"<Box2D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Box2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":31491,"byte_end":31565,"line_start":518,"line_end":518,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":31570,"byte_end":31573,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":31578,"byte_end":31665,"line_start":520,"line_end":520,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":31670,"byte_end":31758,"line_start":521,"line_end":521,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":31763,"byte_end":31845,"line_start":522,"line_end":522,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":31850,"byte_end":31859,"line_start":523,"line_end":523,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":32357,"byte_end":32365,"line_start":533,"line_end":533,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Box2D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Box2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":31982,"byte_end":32065,"line_start":528,"line_end":528,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":32070,"byte_end":32073,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":32078,"byte_end":32165,"line_start":530,"line_end":530,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":32170,"byte_end":32258,"line_start":531,"line_end":531,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":32263,"byte_end":32345,"line_start":532,"line_end":532,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":32677,"byte_end":32683,"line_start":544,"line_end":544,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Box2D<T, U>>::to_f32","value":"pub fn to_f32(&Self) -> Box2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` box.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` box.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":32624,"byte_end":32651,"line_start":542,"line_end":542,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":32656,"byte_end":32665,"line_start":543,"line_end":543,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":32794,"byte_end":32800,"line_start":550,"line_end":550,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Box2D<T, U>>::to_f64","value":"pub fn to_f64(&Self) -> Box2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` box.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` box.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":32741,"byte_end":32768,"line_start":548,"line_end":548,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":32773,"byte_end":32782,"line_start":549,"line_end":549,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":33157,"byte_end":33165,"line_start":560,"line_end":560,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Box2D<T, U>>::to_usize","value":"pub fn to_usize(&Self) -> Box2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` box, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":32858,"byte_end":32915,"line_start":554,"line_end":554,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":32920,"byte_end":32923,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":32928,"byte_end":33003,"line_start":556,"line_end":556,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":33008,"byte_end":33083,"line_start":557,"line_end":557,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":33088,"byte_end":33131,"line_start":558,"line_end":558,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":33136,"byte_end":33145,"line_start":559,"line_end":559,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":33522,"byte_end":33528,"line_start":570,"line_end":570,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Box2D<T, U>>::to_u32","value":"pub fn to_u32(&Self) -> Box2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` box, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":33225,"byte_end":33280,"line_start":564,"line_end":564,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":33285,"byte_end":33288,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":33293,"byte_end":33368,"line_start":566,"line_end":566,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":33373,"byte_end":33448,"line_start":567,"line_end":567,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":33453,"byte_end":33496,"line_start":568,"line_end":568,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":33501,"byte_end":33510,"line_start":569,"line_end":569,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":33883,"byte_end":33889,"line_start":580,"line_end":580,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Box2D<T, U>>::to_i32","value":"pub fn to_i32(&Self) -> Box2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` box, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":33586,"byte_end":33641,"line_start":574,"line_end":574,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":33646,"byte_end":33649,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":33654,"byte_end":33729,"line_start":576,"line_end":576,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":33734,"byte_end":33809,"line_start":577,"line_end":577,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":33814,"byte_end":33857,"line_start":578,"line_end":578,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":33862,"byte_end":33871,"line_start":579,"line_end":579,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34244,"byte_end":34250,"line_start":590,"line_end":590,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Box2D<T, U>>::to_i64","value":"pub fn to_i64(&Self) -> Box2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` box, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` box, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":33947,"byte_end":34002,"line_start":584,"line_end":584,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34007,"byte_end":34010,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point boxes, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34015,"byte_end":34090,"line_start":586,"line_end":586,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34095,"byte_end":34170,"line_start":587,"line_end":587,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34175,"byte_end":34218,"line_start":588,"line_end":588,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34223,"byte_end":34232,"line_start":589,"line_end":589,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34411,"byte_end":34420,"line_start":598,"line_end":598,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Box2D<T, U>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members are finite.\n","sig":null,"attributes":[{"value":"/ Returns true if all members are finite.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34342,"byte_end":34385,"line_start":596,"line_end":596,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34390,"byte_end":34399,"line_start":597,"line_end":597,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":35092,"byte_end":35097,"line_start":617,"line_end":617,"column_start":12,"column_end":17},"name":"round","qualname":"<Box2D<T, U>>::round","value":"pub fn round(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box with edges rounded to integer coordinates, such that\n the returned box has the same set of pixel centers as the original\n one.\n Values equal to 0.5 round up.\n Suitable for most places where integral device coordinates\n are needed, but note that any translation should be applied first to\n avoid pixel rounding errors.\n Note that this is *not* rounding to nearest integer if the values are negative.\n They are always rounding as floor(n + 0.5).\n","sig":null,"attributes":[{"value":"/ Return a box with edges rounded to integer coordinates, such that","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34548,"byte_end":34617,"line_start":607,"line_end":607,"column_start":5,"column_end":74}},{"value":"/ the returned box has the same set of pixel centers as the original","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34622,"byte_end":34692,"line_start":608,"line_end":608,"column_start":5,"column_end":75}},{"value":"/ one.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34697,"byte_end":34705,"line_start":609,"line_end":609,"column_start":5,"column_end":13}},{"value":"/ Values equal to 0.5 round up.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34710,"byte_end":34743,"line_start":610,"line_end":610,"column_start":5,"column_end":38}},{"value":"/ Suitable for most places where integral device coordinates","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34748,"byte_end":34810,"line_start":611,"line_end":611,"column_start":5,"column_end":67}},{"value":"/ are needed, but note that any translation should be applied first to","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34815,"byte_end":34887,"line_start":612,"line_end":612,"column_start":5,"column_end":77}},{"value":"/ avoid pixel rounding errors.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34892,"byte_end":34924,"line_start":613,"line_end":613,"column_start":5,"column_end":37}},{"value":"/ Note that this is *not* rounding to nearest integer if the values are negative.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34929,"byte_end":35012,"line_start":614,"line_end":614,"column_start":5,"column_end":88}},{"value":"/ They are always rounding as floor(n + 0.5).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":35017,"byte_end":35064,"line_start":615,"line_end":615,"column_start":5,"column_end":52}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":35069,"byte_end":35080,"line_start":616,"line_end":616,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":35391,"byte_end":35399,"line_start":629,"line_end":629,"column_start":12,"column_end":20},"name":"round_in","qualname":"<Box2D<T, U>>::round_in","value":"pub fn round_in(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box with faces/edges rounded to integer coordinates, such that\n the original box contains the resulting box.\n","sig":null,"attributes":[{"value":"/ Return a box with faces/edges rounded to integer coordinates, such that","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":35235,"byte_end":35310,"line_start":626,"line_end":626,"column_start":5,"column_end":80}},{"value":"/ the original box contains the resulting box.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":35315,"byte_end":35363,"line_start":627,"line_end":627,"column_start":5,"column_end":53}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":35368,"byte_end":35379,"line_start":628,"line_end":628,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":35689,"byte_end":35698,"line_start":638,"line_end":638,"column_start":12,"column_end":21},"name":"round_out","qualname":"<Box2D<T, U>>::round_out","value":"pub fn round_out(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box with faces/edges rounded to integer coordinates, such that\n the original box is contained in the resulting box.\n","sig":null,"attributes":[{"value":"/ Return a box with faces/edges rounded to integer coordinates, such that","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":35526,"byte_end":35601,"line_start":635,"line_end":635,"column_start":5,"column_end":80}},{"value":"/ the original box is contained in the resulting box.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":35606,"byte_end":35661,"line_start":636,"line_end":636,"column_start":5,"column_end":60}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":35666,"byte_end":35677,"line_start":637,"line_end":637,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":614},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":44868,"byte_end":44873,"line_start":35,"line_end":35,"column_start":12,"column_end":17},"name":"Box3D","qualname":"::box3d::Box3D","value":"Box3D { min, max }","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618}],"decl_id":null,"docs":" An axis aligned 3D box represented by its minimum and maximum coordinates.\n","sig":null,"attributes":[{"value":"/ An axis aligned 3D box represented by its minimum and maximum coordinates.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":44584,"byte_end":44662,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":44663,"byte_end":44673,"line_start":29,"line_end":29,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":617},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":44890,"byte_end":44893,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"name":"min","qualname":"::box3d::Box3D::min","value":"point::Point3D<T, U>","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":618},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":44918,"byte_end":44921,"line_start":37,"line_end":37,"column_start":9,"column_end":12},"name":"max","qualname":"::box3d::Box3D::max","value":"point::Point3D<T, U>","parent":{"krate":0,"index":614},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":45769,"byte_end":45772,"line_start":75,"line_end":75,"column_start":18,"column_end":21},"name":"new","qualname":"<Box3D<T, U>>::new","value":"pub const fn new(Point3D<T, U>, Point3D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":45721,"byte_end":45737,"line_start":73,"line_end":73,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":45742,"byte_end":45751,"line_start":74,"line_end":74,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":45941,"byte_end":45950,"line_start":81,"line_end":81,"column_start":12,"column_end":21},"name":"from_size","qualname":"<Box3D<T, U>>::from_size","value":"pub fn from_size(Size3D<T, U>) -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Creates a Box3D of the given size, at offset zero.\n","sig":null,"attributes":[{"value":"/ Creates a Box3D of the given size, at offset zero.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":45861,"byte_end":45915,"line_start":79,"line_end":79,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":45920,"byte_end":45929,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":46437,"byte_end":46448,"line_start":98,"line_end":98,"column_start":12,"column_end":23},"name":"is_negative","qualname":"<Box3D<T, U>>::is_negative","value":"pub fn is_negative(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the box has a negative volume.","sig":null,"attributes":[{"value":"/ Returns true if the box has a negative volume.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":46180,"byte_end":46230,"line_start":93,"line_end":93,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":46235,"byte_end":46238,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ The common interpretation for a negative box is to consider it empty. It can be obtained","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":46243,"byte_end":46335,"line_start":95,"line_end":95,"column_start":5,"column_end":97}},{"value":"/ by calculating the intersection of two boxes that do not intersect.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":46340,"byte_end":46411,"line_start":96,"line_end":96,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":46416,"byte_end":46425,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":46643,"byte_end":46651,"line_start":104,"line_end":104,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Box3D<T, U>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the size is zero, negative or NaN.\n","sig":null,"attributes":[{"value":"/ Returns true if the size is zero, negative or NaN.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":46563,"byte_end":46617,"line_start":102,"line_end":102,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":46622,"byte_end":46631,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":46790,"byte_end":46800,"line_start":109,"line_end":109,"column_start":12,"column_end":22},"name":"intersects","qualname":"<Box3D<T, U>>::intersects","value":"pub fn intersects(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":46769,"byte_end":46778,"line_start":108,"line_end":108,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":47310,"byte_end":47318,"line_start":122,"line_end":122,"column_start":12,"column_end":20},"name":"contains","qualname":"<Box3D<T, U>>::contains","value":"pub fn contains(&Self, Point3D<T, U>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box3d contains the point. Points are considered\n in the box3d if they are on the front, left or top faces, but outside if they\n are on the back, right or bottom faces.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box3d contains the point. Points are considered","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":47076,"byte_end":47150,"line_start":118,"line_end":118,"column_start":5,"column_end":79}},{"value":"/ in the box3d if they are on the front, left or top faces, but outside if they","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":47155,"byte_end":47236,"line_start":119,"line_end":119,"column_start":5,"column_end":86}},{"value":"/ are on the back, right or bottom faces.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":47241,"byte_end":47284,"line_start":120,"line_end":120,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":47289,"byte_end":47298,"line_start":121,"line_end":121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":47811,"byte_end":47823,"line_start":135,"line_end":135,"column_start":12,"column_end":24},"name":"contains_box","qualname":"<Box3D<T, U>>::contains_box","value":"pub fn contains_box(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this box3d contains the interior of the other box3d. Always\n returns `true` if other is empty, and always returns `false` if other is\n nonempty but this box3d is empty.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this box3d contains the interior of the other box3d. Always","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":47581,"byte_end":47662,"line_start":131,"line_end":131,"column_start":5,"column_end":86}},{"value":"/ returns `true` if other is empty, and always returns `false` if other is","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":47667,"byte_end":47743,"line_start":132,"line_end":132,"column_start":5,"column_end":81}},{"value":"/ nonempty but this box3d is empty.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":47748,"byte_end":47785,"line_start":133,"line_end":133,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":47790,"byte_end":47799,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":48239,"byte_end":48251,"line_start":151,"line_end":151,"column_start":12,"column_end":24},"name":"to_non_empty","qualname":"<Box3D<T, U>>::to_non_empty","value":"pub fn to_non_empty(&Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":48218,"byte_end":48227,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":48394,"byte_end":48406,"line_start":160,"line_end":160,"column_start":12,"column_end":24},"name":"intersection","qualname":"<Box3D<T, U>>::intersection","value":"pub fn intersection(&Self, &Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":48373,"byte_end":48382,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":48595,"byte_end":48617,"line_start":170,"line_end":170,"column_start":12,"column_end":34},"name":"intersection_unchecked","qualname":"<Box3D<T, U>>::intersection_unchecked","value":"pub fn intersection_unchecked(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":49219,"byte_end":49224,"line_start":190,"line_end":190,"column_start":12,"column_end":17},"name":"union","qualname":"<Box3D<T, U>>::union","value":"pub fn union(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the union of two boxes.","sig":null,"attributes":[{"value":"/ Computes the union of two boxes.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":49081,"byte_end":49117,"line_start":186,"line_end":186,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":49122,"byte_end":49125,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ If either of the boxes is empty, the other one is returned.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":49130,"byte_end":49193,"line_start":188,"line_end":188,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":49198,"byte_end":49207,"line_start":189,"line_end":189,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":49948,"byte_end":49957,"line_start":220,"line_end":220,"column_start":12,"column_end":21},"name":"translate","qualname":"<Box3D<T, U>>::translate","value":"pub fn translate(&Self, Vector3D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the same box3d, translated by a vector.\n","sig":null,"attributes":[{"value":"/ Returns the same box3d, translated by a vector.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":49855,"byte_end":49906,"line_start":217,"line_end":217,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":49911,"byte_end":49920,"line_start":218,"line_end":218,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":49925,"byte_end":49936,"line_start":219,"line_end":219,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":50184,"byte_end":50188,"line_start":233,"line_end":233,"column_start":12,"column_end":16},"name":"size","qualname":"<Box3D<T, U>>::size","value":"pub fn size(&Self) -> Size3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":50163,"byte_end":50172,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":50388,"byte_end":50393,"line_start":242,"line_end":242,"column_start":12,"column_end":17},"name":"width","qualname":"<Box3D<T, U>>::width","value":"pub fn width(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":50367,"byte_end":50376,"line_start":241,"line_end":241,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":50472,"byte_end":50478,"line_start":247,"line_end":247,"column_start":12,"column_end":18},"name":"height","qualname":"<Box3D<T, U>>::height","value":"pub fn height(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":50451,"byte_end":50460,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":50557,"byte_end":50562,"line_start":252,"line_end":252,"column_start":12,"column_end":17},"name":"depth","qualname":"<Box3D<T, U>>::depth","value":"pub fn depth(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":50536,"byte_end":50545,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":50820,"byte_end":50827,"line_start":264,"line_end":264,"column_start":12,"column_end":19},"name":"inflate","qualname":"<Box3D<T, U>>::inflate","value":"pub fn inflate(&Self, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Inflates the box by the specified sizes on each side respectively.\n","sig":null,"attributes":[{"value":"/ Inflates the box by the specified sizes on each side respectively.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":50708,"byte_end":50778,"line_start":261,"line_end":261,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":50783,"byte_end":50792,"line_start":262,"line_end":262,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":50797,"byte_end":50808,"line_start":263,"line_end":263,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":51236,"byte_end":51247,"line_start":277,"line_end":277,"column_start":12,"column_end":23},"name":"from_points","qualname":"<Box3D<T, U>>::from_points","value":"pub fn from_points<I>(I) -> Self where I: IntoIterator,\nI::Item: Borrow<Point3D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest box containing all of the provided points.\n","sig":null,"attributes":[{"value":"/ Returns the smallest box containing all of the provided points.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":51157,"byte_end":51224,"line_start":276,"line_end":276,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":52472,"byte_end":52476,"line_start":325,"line_end":325,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Box3D<T, U>>::lerp","value":"pub fn lerp(&Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this box3d and another box3d.\n","sig":null,"attributes":[{"value":"/ Linearly interpolate between this box3d and another box3d.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":52384,"byte_end":52446,"line_start":323,"line_end":323,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":52451,"byte_end":52460,"line_start":324,"line_end":324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":52695,"byte_end":52701,"line_start":334,"line_end":334,"column_start":12,"column_end":18},"name":"center","qualname":"<Box3D<T, U>>::center","value":"pub fn center(&Self) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":52935,"byte_end":52941,"line_start":345,"line_end":345,"column_start":12,"column_end":18},"name":"volume","qualname":"<Box3D<T, U>>::volume","value":"pub fn volume(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":52914,"byte_end":52923,"line_start":344,"line_end":344,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":53066,"byte_end":53073,"line_start":351,"line_end":351,"column_start":12,"column_end":19},"name":"xy_area","qualname":"<Box3D<T, U>>::xy_area","value":"pub fn xy_area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":53045,"byte_end":53054,"line_start":350,"line_end":350,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":53185,"byte_end":53192,"line_start":357,"line_end":357,"column_start":12,"column_end":19},"name":"yz_area","qualname":"<Box3D<T, U>>::yz_area","value":"pub fn yz_area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":53164,"byte_end":53173,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":53304,"byte_end":53311,"line_start":363,"line_end":363,"column_start":12,"column_end":19},"name":"xz_area","qualname":"<Box3D<T, U>>::xz_area","value":"pub fn xz_area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":53283,"byte_end":53292,"line_start":362,"line_end":362,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":53502,"byte_end":53506,"line_start":374,"line_end":374,"column_start":12,"column_end":16},"name":"zero","qualname":"<Box3D<T, U>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":53447,"byte_end":53490,"line_start":373,"line_end":373,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":55372,"byte_end":55379,"line_start":452,"line_end":452,"column_start":12,"column_end":19},"name":"x_range","qualname":"<Box3D<T, U>>::x_range","value":"pub fn x_range(&Self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":55351,"byte_end":55360,"line_start":451,"line_end":451,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":55464,"byte_end":55471,"line_start":457,"line_end":457,"column_start":12,"column_end":19},"name":"y_range","qualname":"<Box3D<T, U>>::y_range","value":"pub fn y_range(&Self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":55443,"byte_end":55452,"line_start":456,"line_end":456,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":55556,"byte_end":55563,"line_start":462,"line_end":462,"column_start":12,"column_end":19},"name":"z_range","qualname":"<Box3D<T, U>>::z_range","value":"pub fn z_range(&Self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":55535,"byte_end":55544,"line_start":461,"line_end":461,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":55707,"byte_end":55717,"line_start":468,"line_end":468,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Box3D<T, U>>::to_untyped","value":"pub fn to_untyped(&Self) -> Box3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":55627,"byte_end":55681,"line_start":466,"line_end":466,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":55686,"byte_end":55695,"line_start":467,"line_end":467,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":55931,"byte_end":55943,"line_start":477,"line_end":477,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Box3D<T, U>>::from_untyped","value":"pub fn from_untyped(&Box3D<T, UnknownUnit>) -> Box3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":55869,"byte_end":55905,"line_start":475,"line_end":475,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":55910,"byte_end":55919,"line_start":476,"line_end":476,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":747},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":56162,"byte_end":56171,"line_start":486,"line_end":486,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Box3D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(&Self) -> Box3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":56119,"byte_end":56136,"line_start":484,"line_end":484,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":56141,"byte_end":56150,"line_start":485,"line_end":485,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":56294,"byte_end":56299,"line_start":491,"line_end":491,"column_start":12,"column_end":17},"name":"scale","qualname":"<Box3D<T, U>>::scale","value":"pub fn scale<S: Copy>(&Self, S, S, S) -> Self where T: Mul<S, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":56273,"byte_end":56282,"line_start":490,"line_end":490,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":57001,"byte_end":57005,"line_start":509,"line_end":509,"column_start":12,"column_end":16},"name":"cast","qualname":"<Box3D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Box3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":56621,"byte_end":56695,"line_start":503,"line_end":503,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":56700,"byte_end":56703,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":56708,"byte_end":56795,"line_start":505,"line_end":505,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":56800,"byte_end":56888,"line_start":506,"line_end":506,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":56893,"byte_end":56975,"line_start":507,"line_end":507,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":56980,"byte_end":56989,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":57487,"byte_end":57495,"line_start":518,"line_end":518,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Box3D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Box3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":57112,"byte_end":57195,"line_start":513,"line_end":513,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":57200,"byte_end":57203,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":57208,"byte_end":57295,"line_start":515,"line_end":515,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":57300,"byte_end":57388,"line_start":516,"line_end":516,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":57393,"byte_end":57475,"line_start":517,"line_end":517,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":57809,"byte_end":57815,"line_start":529,"line_end":529,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Box3D<T, U>>::to_f32","value":"pub fn to_f32(&Self) -> Box3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` box3d.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` box3d.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":57754,"byte_end":57783,"line_start":527,"line_end":527,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":57788,"byte_end":57797,"line_start":528,"line_end":528,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":57928,"byte_end":57934,"line_start":535,"line_end":535,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Box3D<T, U>>::to_f64","value":"pub fn to_f64(&Self) -> Box3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` box3d.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` box3d.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":57873,"byte_end":57902,"line_start":533,"line_end":533,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":57907,"byte_end":57916,"line_start":534,"line_end":534,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":58295,"byte_end":58303,"line_start":545,"line_end":545,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Box3D<T, U>>::to_usize","value":"pub fn to_usize(&Self) -> Box3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` box3d, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":57992,"byte_end":58051,"line_start":539,"line_end":539,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":58056,"byte_end":58059,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":58064,"byte_end":58141,"line_start":541,"line_end":541,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":58146,"byte_end":58221,"line_start":542,"line_end":542,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":58226,"byte_end":58269,"line_start":543,"line_end":543,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":58274,"byte_end":58283,"line_start":544,"line_end":544,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":58664,"byte_end":58670,"line_start":555,"line_end":555,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Box3D<T, U>>::to_u32","value":"pub fn to_u32(&Self) -> Box3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` box3d, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":58363,"byte_end":58420,"line_start":549,"line_end":549,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":58425,"byte_end":58428,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":58433,"byte_end":58510,"line_start":551,"line_end":551,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":58515,"byte_end":58590,"line_start":552,"line_end":552,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":58595,"byte_end":58638,"line_start":553,"line_end":553,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":58643,"byte_end":58652,"line_start":554,"line_end":554,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59029,"byte_end":59035,"line_start":565,"line_end":565,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Box3D<T, U>>::to_i32","value":"pub fn to_i32(&Self) -> Box3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` box3d, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":58728,"byte_end":58785,"line_start":559,"line_end":559,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":58790,"byte_end":58793,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":58798,"byte_end":58875,"line_start":561,"line_end":561,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":58880,"byte_end":58955,"line_start":562,"line_end":562,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":58960,"byte_end":59003,"line_start":563,"line_end":563,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59008,"byte_end":59017,"line_start":564,"line_end":564,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59394,"byte_end":59400,"line_start":575,"line_end":575,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Box3D<T, U>>::to_i64","value":"pub fn to_i64(&Self) -> Box3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` box3d, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` box3d, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59093,"byte_end":59150,"line_start":569,"line_end":569,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59155,"byte_end":59158,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point cuboids, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59163,"byte_end":59240,"line_start":571,"line_end":571,"column_start":5,"column_end":82}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59245,"byte_end":59320,"line_start":572,"line_end":572,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59325,"byte_end":59368,"line_start":573,"line_end":573,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59373,"byte_end":59382,"line_start":574,"line_end":574,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59561,"byte_end":59570,"line_start":583,"line_end":583,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Box3D<T, U>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members are finite.\n","sig":null,"attributes":[{"value":"/ Returns true if all members are finite.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59492,"byte_end":59535,"line_start":581,"line_end":581,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59540,"byte_end":59549,"line_start":582,"line_end":582,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":60246,"byte_end":60251,"line_start":602,"line_end":602,"column_start":12,"column_end":17},"name":"round","qualname":"<Box3D<T, U>>::round","value":"pub fn round(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box3d with edges rounded to integer coordinates, such that\n the returned box3d has the same set of pixel centers as the original\n one.\n Values equal to 0.5 round up.\n Suitable for most places where integral device coordinates\n are needed, but note that any translation should be applied first to\n avoid pixel rounding errors.\n Note that this is *not* rounding to nearest integer if the values are negative.\n They are always rounding as floor(n + 0.5).\n","sig":null,"attributes":[{"value":"/ Return a box3d with edges rounded to integer coordinates, such that","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59698,"byte_end":59769,"line_start":592,"line_end":592,"column_start":5,"column_end":76}},{"value":"/ the returned box3d has the same set of pixel centers as the original","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59774,"byte_end":59846,"line_start":593,"line_end":593,"column_start":5,"column_end":77}},{"value":"/ one.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59851,"byte_end":59859,"line_start":594,"line_end":594,"column_start":5,"column_end":13}},{"value":"/ Values equal to 0.5 round up.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59864,"byte_end":59897,"line_start":595,"line_end":595,"column_start":5,"column_end":38}},{"value":"/ Suitable for most places where integral device coordinates","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59902,"byte_end":59964,"line_start":596,"line_end":596,"column_start":5,"column_end":67}},{"value":"/ are needed, but note that any translation should be applied first to","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59969,"byte_end":60041,"line_start":597,"line_end":597,"column_start":5,"column_end":77}},{"value":"/ avoid pixel rounding errors.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":60046,"byte_end":60078,"line_start":598,"line_end":598,"column_start":5,"column_end":37}},{"value":"/ Note that this is *not* rounding to nearest integer if the values are negative.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":60083,"byte_end":60166,"line_start":599,"line_end":599,"column_start":5,"column_end":88}},{"value":"/ They are always rounding as floor(n + 0.5).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":60171,"byte_end":60218,"line_start":600,"line_end":600,"column_start":5,"column_end":52}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":60223,"byte_end":60234,"line_start":601,"line_end":601,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":60551,"byte_end":60559,"line_start":614,"line_end":614,"column_start":12,"column_end":20},"name":"round_in","qualname":"<Box3D<T, U>>::round_in","value":"pub fn round_in(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box3d with faces/edges rounded to integer coordinates, such that\n the original box3d contains the resulting box3d.\n","sig":null,"attributes":[{"value":"/ Return a box3d with faces/edges rounded to integer coordinates, such that","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":60389,"byte_end":60466,"line_start":611,"line_end":611,"column_start":5,"column_end":82}},{"value":"/ the original box3d contains the resulting box3d.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":60471,"byte_end":60523,"line_start":612,"line_end":612,"column_start":5,"column_end":57}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":60528,"byte_end":60539,"line_start":613,"line_end":613,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":60852,"byte_end":60861,"line_start":624,"line_end":624,"column_start":12,"column_end":21},"name":"round_out","qualname":"<Box3D<T, U>>::round_out","value":"pub fn round_out(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a box3d with faces/edges rounded to integer coordinates, such that\n the original box3d is contained in the resulting box3d.\n","sig":null,"attributes":[{"value":"/ Return a box3d with faces/edges rounded to integer coordinates, such that","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":60683,"byte_end":60760,"line_start":621,"line_end":621,"column_start":5,"column_end":82}},{"value":"/ the original box3d is contained in the resulting box3d.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":60765,"byte_end":60824,"line_start":622,"line_end":622,"column_start":5,"column_end":64}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":60829,"byte_end":60840,"line_start":623,"line_end":623,"column_start":5,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":785},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":61418,"byte_end":61423,"line_start":651,"line_end":651,"column_start":8,"column_end":13},"name":"box3d","qualname":"::box3d::box3d","value":"pub fn box3d<T: Copy, U>(T, T, T, T, T, T) -> Box3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Box3D::new(Point3D::new(x1, y1, z1), Point3D::new(x2, y2, z2))`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Box3D::new(Point3D::new(x1, y1, z1), Point3D::new(x2, y2, z2))`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":61327,"byte_end":61410,"line_start":650,"line_end":650,"column_start":1,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":829},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":71278,"byte_end":71295,"line_start":25,"line_end":25,"column_start":12,"column_end":29},"name":"HomogeneousVector","qualname":"::homogen::HomogeneousVector","value":"HomogeneousVector { x, y, z, w, _unit }","parent":null,"children":[{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836}],"decl_id":null,"docs":" Homogeneous vector in 3D space.\n","sig":null,"attributes":[{"value":"/ Homogeneous vector in 3D space.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":71220,"byte_end":71255,"line_start":23,"line_end":23,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":71256,"byte_end":71266,"line_start":24,"line_end":24,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":832},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":71312,"byte_end":71313,"line_start":26,"line_end":26,"column_start":9,"column_end":10},"name":"x","qualname":"::homogen::HomogeneousVector::x","value":"T","parent":{"krate":0,"index":829},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":833},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":71326,"byte_end":71327,"line_start":27,"line_end":27,"column_start":9,"column_end":10},"name":"y","qualname":"::homogen::HomogeneousVector::y","value":"T","parent":{"krate":0,"index":829},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":834},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":71340,"byte_end":71341,"line_start":28,"line_end":28,"column_start":9,"column_end":10},"name":"z","qualname":"::homogen::HomogeneousVector::z","value":"T","parent":{"krate":0,"index":829},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":835},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":71354,"byte_end":71355,"line_start":29,"line_end":29,"column_start":9,"column_end":10},"name":"w","qualname":"::homogen::HomogeneousVector::w","value":"T","parent":{"krate":0,"index":829},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":836},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":71387,"byte_end":71392,"line_start":31,"line_end":31,"column_start":9,"column_end":14},"name":"_unit","qualname":"::homogen::HomogeneousVector::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":829},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":73146,"byte_end":73149,"line_start":107,"line_end":107,"column_start":18,"column_end":21},"name":"new","qualname":"<HomogeneousVector<T, U>>::new","value":"pub const fn new(T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":73068,"byte_end":73114,"line_start":105,"line_end":105,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":73119,"byte_end":73128,"line_start":106,"line_end":106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":73551,"byte_end":73561,"line_start":123,"line_end":123,"column_start":12,"column_end":22},"name":"to_point2d","qualname":"<HomogeneousVector<T, U>>::to_point2d","value":"pub fn to_point2d(Self) -> Option<Point2D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Convert into Cartesian 2D point.","sig":null,"attributes":[{"value":"/ Convert into Cartesian 2D point.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":73411,"byte_end":73447,"line_start":119,"line_end":119,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":73452,"byte_end":73455,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Returns None if the point is on or behind the W=0 hemisphere.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":73460,"byte_end":73525,"line_start":121,"line_end":121,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":73530,"byte_end":73539,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":73887,"byte_end":73897,"line_start":135,"line_end":135,"column_start":12,"column_end":22},"name":"to_point3d","qualname":"<HomogeneousVector<T, U>>::to_point3d","value":"pub fn to_point3d(Self) -> Option<Point3D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Convert into Cartesian 3D point.","sig":null,"attributes":[{"value":"/ Convert into Cartesian 3D point.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":73747,"byte_end":73783,"line_start":131,"line_end":131,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":73788,"byte_end":73791,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Returns None if the point is on or behind the W=0 hemisphere.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":73796,"byte_end":73861,"line_start":133,"line_end":133,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":73866,"byte_end":73875,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":960},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77632,"byte_end":77638,"line_start":42,"line_end":42,"column_start":12,"column_end":18},"name":"Length","qualname":"::length::Length","value":"","parent":null,"children":[],"decl_id":null,"docs":" A one-dimensional distance, with value represented by `T` and unit of measurement `Unit`.","sig":null,"attributes":[{"value":"/ A one-dimensional distance, with value represented by `T` and unit of measurement `Unit`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":76944,"byte_end":77037,"line_start":28,"line_end":28,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77038,"byte_end":77041,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ `T` can be any numeric type, for example a primitive type like `u64` or `f32`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77042,"byte_end":77124,"line_start":30,"line_end":30,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77125,"byte_end":77128,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ `Unit` is not used in the representation of a `Length` value. It is used only at compile time","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77129,"byte_end":77226,"line_start":32,"line_end":32,"column_start":1,"column_end":98}},{"value":"/ to ensure that a `Length` stored with one unit is converted explicitly before being used in an","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77227,"byte_end":77325,"line_start":33,"line_end":33,"column_start":1,"column_end":99}},{"value":"/ expression that requires a different unit.  It may be a type without values, such as an empty","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77326,"byte_end":77423,"line_start":34,"line_end":34,"column_start":1,"column_end":98}},{"value":"/ enum.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77424,"byte_end":77433,"line_start":35,"line_end":35,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77434,"byte_end":77437,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ You can multiply a `Length` by a `scale::Scale` to convert it from one unit to","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77438,"byte_end":77520,"line_start":37,"line_end":37,"column_start":1,"column_end":83}},{"value":"/ another. See the [`Scale`] docs for an example.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77521,"byte_end":77572,"line_start":38,"line_end":38,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77573,"byte_end":77576,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`Scale`]: struct.Scale.html","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77577,"byte_end":77609,"line_start":40,"line_end":40,"column_start":1,"column_end":33}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77610,"byte_end":77620,"line_start":41,"line_end":41,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":964},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77648,"byte_end":77653,"line_start":42,"line_end":42,"column_start":28,"column_end":33},"name":"0","qualname":"::length::Length::0","value":"T","parent":{"krate":0,"index":960},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":965},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77670,"byte_end":77691,"line_start":42,"line_end":42,"column_start":50,"column_end":71},"name":"1","qualname":"::length::Length::1","value":"core::marker::PhantomData<Unit>","parent":{"krate":0,"index":960},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":78517,"byte_end":78520,"line_start":81,"line_end":81,"column_start":18,"column_end":21},"name":"new","qualname":"<Length<T, U>>::new","value":"pub const fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Associate a value with a unit of measure.\n","sig":null,"attributes":[{"value":"/ Associate a value with a unit of measure.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":78440,"byte_end":78485,"line_start":79,"line_end":79,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":78490,"byte_end":78499,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":78675,"byte_end":78678,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"get","qualname":"<Length<T, U>>::get","value":"pub fn get(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Unpack the underlying value from the wrapper.\n","sig":null,"attributes":[{"value":"/ Unpack the underlying value from the wrapper.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":78614,"byte_end":78663,"line_start":87,"line_end":87,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":981},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":78761,"byte_end":78770,"line_start":94,"line_end":94,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Length<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Length<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":78718,"byte_end":78735,"line_start":92,"line_end":92,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":78740,"byte_end":78749,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":983},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":79414,"byte_end":79418,"line_start":115,"line_end":115,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Length<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this length and another length.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this length and another length.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":78837,"byte_end":78901,"line_start":98,"line_end":98,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":78906,"byte_end":78909,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":78914,"byte_end":78927,"line_start":100,"line_end":100,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":78932,"byte_end":78935,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":78940,"byte_end":78951,"line_start":102,"line_end":102,"column_start":5,"column_end":16}},{"value":"/ use euclid::default::Length;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":78956,"byte_end":78988,"line_start":103,"line_end":103,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":78993,"byte_end":78996,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ let from = Length::new(0.0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":79001,"byte_end":79033,"line_start":105,"line_end":105,"column_start":5,"column_end":37}},{"value":"/ let to = Length::new(8.0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":79038,"byte_end":79068,"line_start":106,"line_end":106,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":79073,"byte_end":79076,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), Length::new(-8.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":79081,"byte_end":79136,"line_start":108,"line_end":108,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.0), Length::new( 0.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":79141,"byte_end":79196,"line_start":109,"line_end":109,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.5), Length::new( 4.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":79201,"byte_end":79256,"line_start":110,"line_end":110,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  1.0), Length::new( 8.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":79261,"byte_end":79316,"line_start":111,"line_end":111,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  2.0), Length::new(16.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":79321,"byte_end":79376,"line_start":112,"line_end":112,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":79381,"byte_end":79388,"line_start":113,"line_end":113,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":79393,"byte_end":79402,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":987},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":79774,"byte_end":79777,"line_start":127,"line_end":127,"column_start":12,"column_end":15},"name":"min","qualname":"<Length<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns minimum between this length and another length.\n","sig":null,"attributes":[{"value":"/ Returns minimum between this length and another length.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":79689,"byte_end":79748,"line_start":125,"line_end":125,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":79753,"byte_end":79762,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":79928,"byte_end":79931,"line_start":133,"line_end":133,"column_start":12,"column_end":15},"name":"max","qualname":"<Length<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns maximum between this length and another length.\n","sig":null,"attributes":[{"value":"/ Returns maximum between this length and another length.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":79843,"byte_end":79902,"line_start":131,"line_end":131,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":79907,"byte_end":79916,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":80142,"byte_end":80146,"line_start":141,"line_end":141,"column_start":12,"column_end":16},"name":"cast","qualname":"<Length<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Length<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":80042,"byte_end":80116,"line_start":139,"line_end":139,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":80121,"byte_end":80130,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":994},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":80328,"byte_end":80336,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Length<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Length<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":80233,"byte_end":80316,"line_start":145,"line_end":145,"column_start":5,"column_end":88}}]},{"kind":"Mod","id":{"krate":0,"index":1113},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"num","qualname":"::num","value":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","parent":null,"children":[{"krate":0,"index":1114},{"krate":0,"index":1117},{"krate":0,"index":1119},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1127},{"krate":0,"index":1129},{"krate":0,"index":1131},{"krate":0,"index":4558},{"krate":0,"index":4560},{"krate":0,"index":4562},{"krate":0,"index":4564},{"krate":0,"index":4566},{"krate":0,"index":4568},{"krate":0,"index":4570},{"krate":0,"index":4572},{"krate":0,"index":4574},{"krate":0,"index":4576},{"krate":0,"index":4578},{"krate":0,"index":4580},{"krate":0,"index":4582},{"krate":0,"index":4584},{"krate":0,"index":4586},{"krate":0,"index":4588},{"krate":0,"index":4590},{"krate":0,"index":4592},{"krate":0,"index":4594},{"krate":0,"index":4596},{"krate":0,"index":4598},{"krate":0,"index":4600},{"krate":0,"index":4602},{"krate":0,"index":4604},{"krate":0,"index":4606},{"krate":0,"index":4608},{"krate":0,"index":4610},{"krate":0,"index":4612},{"krate":0,"index":4614},{"krate":0,"index":4616}],"decl_id":null,"docs":" A one-dimensional length, tagged with its units.\n","sig":null,"attributes":[{"value":"/ A one-dimensional length, tagged with its units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":92276,"byte_end":92328,"line_start":9,"line_end":9,"column_start":1,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":1117},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":93457,"byte_end":93461,"line_start":28,"line_end":28,"column_start":11,"column_end":15},"name":"Zero","qualname":"::num::Zero","value":"Zero","parent":null,"children":[{"krate":0,"index":1118}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":93471,"byte_end":93475,"line_start":29,"line_end":29,"column_start":8,"column_end":12},"name":"zero","qualname":"::num::Zero::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":1117},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1122},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":93602,"byte_end":93605,"line_start":38,"line_end":38,"column_start":11,"column_end":14},"name":"One","qualname":"::num::One","value":"One","parent":null,"children":[{"krate":0,"index":1123}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":93615,"byte_end":93618,"line_start":39,"line_end":39,"column_start":8,"column_end":11},"name":"one","qualname":"::num::One::one","value":"pub fn one() -> Self","parent":{"krate":0,"index":1122},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1127},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":93801,"byte_end":93806,"line_start":49,"line_end":49,"column_start":11,"column_end":16},"name":"Round","qualname":"::num::Round","value":"Round: Copy","parent":null,"children":[{"krate":0,"index":1128}],"decl_id":null,"docs":" Defines the nearest integer value to the original value.\n","sig":null,"attributes":[{"value":"/ Defines the nearest integer value to the original value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":93730,"byte_end":93790,"line_start":48,"line_end":48,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":93971,"byte_end":93976,"line_start":54,"line_end":54,"column_start":8,"column_end":13},"name":"round","qualname":"::num::Round::round","value":"pub fn round(Self) -> Self","parent":{"krate":0,"index":1127},"children":[],"decl_id":null,"docs":" Rounds to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds to the nearest integer value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":93819,"byte_end":93859,"line_start":50,"line_end":50,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":93864,"byte_end":93867,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":93872,"byte_end":93947,"line_start":52,"line_end":52,"column_start":5,"column_end":80}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":93952,"byte_end":93963,"line_start":53,"line_end":53,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":1129},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":94076,"byte_end":94081,"line_start":57,"line_end":57,"column_start":11,"column_end":16},"name":"Floor","qualname":"::num::Floor","value":"Floor: Copy","parent":null,"children":[{"krate":0,"index":1130}],"decl_id":null,"docs":" Defines the biggest integer equal or lower than the original value.\n","sig":null,"attributes":[{"value":"/ Defines the biggest integer equal or lower than the original value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":93994,"byte_end":94065,"line_start":56,"line_end":56,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":94279,"byte_end":94284,"line_start":62,"line_end":62,"column_start":8,"column_end":13},"name":"floor","qualname":"::num::Floor::floor","value":"pub fn floor(Self) -> Self","parent":{"krate":0,"index":1129},"children":[],"decl_id":null,"docs":" Rounds to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":94094,"byte_end":94167,"line_start":58,"line_end":58,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":94172,"byte_end":94175,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":94180,"byte_end":94255,"line_start":60,"line_end":60,"column_start":5,"column_end":80}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":94260,"byte_end":94271,"line_start":61,"line_end":61,"column_start":5,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":1131},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":94387,"byte_end":94391,"line_start":65,"line_end":65,"column_start":11,"column_end":15},"name":"Ceil","qualname":"::num::Ceil","value":"Ceil: Copy","parent":null,"children":[{"krate":0,"index":1132}],"decl_id":null,"docs":" Defines the smallest integer equal or greater than the original value.\n","sig":null,"attributes":[{"value":"/ Defines the smallest integer equal or greater than the original value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":94302,"byte_end":94376,"line_start":64,"line_end":64,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":94592,"byte_end":94596,"line_start":70,"line_end":70,"column_start":8,"column_end":12},"name":"ceil","qualname":"::num::Ceil::ceil","value":"pub fn ceil(Self) -> Self","parent":{"krate":0,"index":1131},"children":[],"decl_id":null,"docs":" Rounds to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":94404,"byte_end":94480,"line_start":66,"line_end":66,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":94485,"byte_end":94488,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":94493,"byte_end":94568,"line_start":68,"line_end":68,"column_start":5,"column_end":80}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":94573,"byte_end":94584,"line_start":69,"line_end":69,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1227},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":96758,"byte_end":96765,"line_start":31,"line_end":31,"column_start":12,"column_end":19},"name":"Point2D","qualname":"::point::Point2D","value":"Point2D { x, y, _unit }","parent":null,"children":[{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232}],"decl_id":null,"docs":" A 2d Point tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 2d Point tagged with a unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":96701,"byte_end":96735,"line_start":29,"line_end":29,"column_start":1,"column_end":35}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":96736,"byte_end":96746,"line_start":30,"line_end":30,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1230},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":96782,"byte_end":96783,"line_start":32,"line_end":32,"column_start":9,"column_end":10},"name":"x","qualname":"::point::Point2D::x","value":"T","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1231},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":96796,"byte_end":96797,"line_start":33,"line_end":33,"column_start":9,"column_end":10},"name":"y","qualname":"::point::Point2D::y","value":"T","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1232},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":96829,"byte_end":96834,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"_unit","qualname":"::point::Point2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":1227},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1263},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":99022,"byte_end":99028,"line_start":134,"line_end":134,"column_start":12,"column_end":18},"name":"origin","qualname":"<Point2D<T, U>>::origin","value":"pub fn origin() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":98948,"byte_end":98996,"line_start":132,"line_end":132,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":99001,"byte_end":99010,"line_start":133,"line_end":133,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1264},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":99197,"byte_end":99201,"line_start":143,"line_end":143,"column_start":12,"column_end":16},"name":"zero","qualname":"<Point2D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" The same as [`origin()`](#method.origin).\n","sig":null,"attributes":[{"value":"/ The same as [`origin()`](#method.origin).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":99126,"byte_end":99171,"line_start":141,"line_end":141,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":99176,"byte_end":99185,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1265},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":99357,"byte_end":99360,"line_start":152,"line_end":152,"column_start":18,"column_end":21},"name":"new","qualname":"<Point2D<T, U>>::new","value":"pub const fn new(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":99279,"byte_end":99325,"line_start":150,"line_end":150,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":99330,"byte_end":99339,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1266},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":99575,"byte_end":99587,"line_start":162,"line_end":162,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Point2D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly Lengths instead of scalar values.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":99484,"byte_end":99549,"line_start":160,"line_end":160,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":99554,"byte_end":99563,"line_start":161,"line_end":161,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1267},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":99751,"byte_end":99756,"line_start":168,"line_end":168,"column_start":12,"column_end":17},"name":"splat","qualname":"<Point2D<T, U>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting all components to the same value.\n","sig":null,"attributes":[{"value":"/ Constructor setting all components to the same value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":99668,"byte_end":99725,"line_start":166,"line_end":166,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":99730,"byte_end":99739,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":99982,"byte_end":99994,"line_start":181,"line_end":181,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Point2D<T, U>>::from_untyped","value":"pub fn from_untyped(Point2D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":99920,"byte_end":99956,"line_start":179,"line_end":179,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":99961,"byte_end":99970,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100195,"byte_end":100201,"line_start":189,"line_end":189,"column_start":12,"column_end":18},"name":"extend","qualname":"<Point2D<T, U>>::extend","value":"pub fn extend(Self, T) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d point from this one, using the specified z value.\n","sig":null,"attributes":[{"value":"/ Create a 3d point from this one, using the specified z value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100104,"byte_end":100169,"line_start":187,"line_end":187,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100174,"byte_end":100183,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1273},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100408,"byte_end":100417,"line_start":197,"line_end":197,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Point2D<T, U>>::to_vector","value":"pub fn to_vector(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this point into a vector.","sig":null,"attributes":[{"value":"/ Cast this point into a vector.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100278,"byte_end":100312,"line_start":193,"line_end":193,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100317,"byte_end":100320,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ Equivalent to subtracting the origin from this point.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100325,"byte_end":100382,"line_start":195,"line_end":195,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100387,"byte_end":100396,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1274},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100841,"byte_end":100843,"line_start":218,"line_end":218,"column_start":12,"column_end":14},"name":"yx","qualname":"<Point2D<T, U>>::yx","value":"pub fn yx(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Swap x and y.","sig":null,"attributes":[{"value":"/ Swap x and y.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100562,"byte_end":100579,"line_start":205,"line_end":205,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100584,"byte_end":100587,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100592,"byte_end":100605,"line_start":207,"line_end":207,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100610,"byte_end":100613,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100618,"byte_end":100629,"line_start":209,"line_end":209,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100634,"byte_end":100670,"line_start":210,"line_end":210,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100675,"byte_end":100689,"line_start":211,"line_end":211,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100694,"byte_end":100697,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100702,"byte_end":100748,"line_start":213,"line_end":213,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100753,"byte_end":100756,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.yx(), point2(-8, 1));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100761,"byte_end":100803,"line_start":215,"line_end":215,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100808,"byte_end":100815,"line_start":216,"line_end":216,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100820,"byte_end":100829,"line_start":217,"line_end":217,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1275},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101273,"byte_end":101283,"line_start":236,"line_end":236,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Point2D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Point2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100902,"byte_end":100956,"line_start":222,"line_end":222,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100961,"byte_end":100964,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100969,"byte_end":100982,"line_start":224,"line_end":224,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100987,"byte_end":100990,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100995,"byte_end":101006,"line_start":226,"line_end":226,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101011,"byte_end":101047,"line_start":227,"line_end":227,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101052,"byte_end":101066,"line_start":228,"line_end":228,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101071,"byte_end":101074,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101079,"byte_end":101125,"line_start":230,"line_end":230,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101130,"byte_end":101133,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.to_untyped().x);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101138,"byte_end":101184,"line_start":232,"line_end":232,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(point.y, point.to_untyped().y);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101189,"byte_end":101235,"line_start":233,"line_end":233,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101240,"byte_end":101247,"line_start":234,"line_end":234,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101252,"byte_end":101261,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101755,"byte_end":101764,"line_start":255,"line_end":255,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Point2D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Point2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101361,"byte_end":101409,"line_start":240,"line_end":240,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101414,"byte_end":101417,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101422,"byte_end":101435,"line_start":242,"line_end":242,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101440,"byte_end":101443,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101448,"byte_end":101459,"line_start":244,"line_end":244,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101464,"byte_end":101500,"line_start":245,"line_end":245,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101505,"byte_end":101519,"line_start":246,"line_end":246,"column_start":5,"column_end":19}},{"value":"/ enum Cm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101524,"byte_end":101538,"line_start":247,"line_end":247,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101543,"byte_end":101546,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101551,"byte_end":101597,"line_start":249,"line_end":249,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101602,"byte_end":101605,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.cast_unit::<Cm>().x);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101610,"byte_end":101661,"line_start":251,"line_end":251,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(point.y, point.cast_unit::<Cm>().y);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101666,"byte_end":101717,"line_start":252,"line_end":252,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101722,"byte_end":101729,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101734,"byte_end":101743,"line_start":254,"line_end":254,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1278},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102133,"byte_end":102141,"line_start":272,"line_end":272,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Point2D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x and y.","sig":null,"attributes":[{"value":"/ Cast into an array with x and y.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101835,"byte_end":101871,"line_start":259,"line_end":259,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101876,"byte_end":101879,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101884,"byte_end":101897,"line_start":261,"line_end":261,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101902,"byte_end":101905,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101910,"byte_end":101921,"line_start":263,"line_end":263,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101926,"byte_end":101962,"line_start":264,"line_end":264,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101967,"byte_end":101981,"line_start":265,"line_end":265,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101986,"byte_end":101989,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":101994,"byte_end":102040,"line_start":267,"line_end":267,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102045,"byte_end":102048,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_array(), [1, -8]);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102053,"byte_end":102095,"line_start":269,"line_end":269,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102100,"byte_end":102107,"line_start":270,"line_end":270,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102112,"byte_end":102121,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1280},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102493,"byte_end":102501,"line_start":289,"line_end":289,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Point2D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x and y.","sig":null,"attributes":[{"value":"/ Cast into a tuple with x and y.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102196,"byte_end":102231,"line_start":276,"line_end":276,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102236,"byte_end":102239,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102244,"byte_end":102257,"line_start":278,"line_end":278,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102262,"byte_end":102265,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102270,"byte_end":102281,"line_start":280,"line_end":280,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point2D, point2};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102286,"byte_end":102322,"line_start":281,"line_end":281,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102327,"byte_end":102341,"line_start":282,"line_end":282,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102346,"byte_end":102349,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ let point: Point2D<_, Mm> = point2(1, -8);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102354,"byte_end":102400,"line_start":284,"line_end":284,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102405,"byte_end":102408,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_tuple(), (1, -8));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102413,"byte_end":102455,"line_start":286,"line_end":286,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102460,"byte_end":102467,"line_start":287,"line_end":287,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102472,"byte_end":102481,"line_start":288,"line_end":288,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102643,"byte_end":102648,"line_start":295,"line_end":295,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Point2D<T, U>>::to_3d","value":"pub fn to_3d(Self) -> Point3D<T, U> where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 3d point with z-coordinate equals to zero.\n","sig":null,"attributes":[{"value":"/ Convert into a 3d point with z-coordinate equals to zero.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102556,"byte_end":102617,"line_start":293,"line_end":293,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102622,"byte_end":102631,"line_start":294,"line_end":294,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103123,"byte_end":103128,"line_start":314,"line_end":314,"column_start":12,"column_end":17},"name":"round","qualname":"<Point2D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102761,"byte_end":102816,"line_start":302,"line_end":302,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102821,"byte_end":102824,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102829,"byte_end":102904,"line_start":304,"line_end":304,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102909,"byte_end":102912,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102917,"byte_end":102928,"line_start":306,"line_end":306,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point2;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102933,"byte_end":102958,"line_start":307,"line_end":307,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102963,"byte_end":102977,"line_start":308,"line_end":308,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102982,"byte_end":102985,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point2::<_, Mm>(-0.1, -0.8).round(), point2::<_, Mm>(0.0, -1.0))","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":102990,"byte_end":103069,"line_start":310,"line_end":310,"column_start":5,"column_end":84}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103074,"byte_end":103081,"line_start":311,"line_end":311,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103086,"byte_end":103095,"line_start":312,"line_end":312,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103100,"byte_end":103111,"line_start":313,"line_end":313,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1283},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103631,"byte_end":103635,"line_start":333,"line_end":333,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Point2D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103235,"byte_end":103326,"line_start":321,"line_end":321,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103331,"byte_end":103334,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103339,"byte_end":103414,"line_start":323,"line_end":323,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103419,"byte_end":103422,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103427,"byte_end":103438,"line_start":325,"line_end":325,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point2;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103443,"byte_end":103468,"line_start":326,"line_end":326,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103473,"byte_end":103487,"line_start":327,"line_end":327,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103492,"byte_end":103495,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point2::<_, Mm>(-0.1, -0.8).ceil(), point2::<_, Mm>(0.0, 0.0))","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103500,"byte_end":103577,"line_start":329,"line_end":329,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103582,"byte_end":103589,"line_start":330,"line_end":330,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103594,"byte_end":103603,"line_start":331,"line_end":331,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103608,"byte_end":103619,"line_start":332,"line_end":332,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1284},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104135,"byte_end":104140,"line_start":352,"line_end":352,"column_start":12,"column_end":17},"name":"floor","qualname":"<Point2D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103739,"byte_end":103827,"line_start":340,"line_end":340,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103832,"byte_end":103835,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103840,"byte_end":103915,"line_start":342,"line_end":342,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103920,"byte_end":103923,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103928,"byte_end":103939,"line_start":344,"line_end":344,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point2;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103944,"byte_end":103969,"line_start":345,"line_end":345,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103974,"byte_end":103988,"line_start":346,"line_end":346,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":103993,"byte_end":103996,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point2::<_, Mm>(-0.1, -0.8).floor(), point2::<_, Mm>(-1.0, -1.0))","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104001,"byte_end":104081,"line_start":348,"line_end":348,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104086,"byte_end":104093,"line_start":349,"line_end":349,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104098,"byte_end":104107,"line_start":350,"line_end":350,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104112,"byte_end":104123,"line_start":351,"line_end":351,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1285},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104888,"byte_end":104892,"line_start":377,"line_end":377,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Point2D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this point and another point.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this point and another point.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104247,"byte_end":104309,"line_start":359,"line_end":359,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104314,"byte_end":104317,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104322,"byte_end":104335,"line_start":361,"line_end":361,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104340,"byte_end":104343,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104348,"byte_end":104359,"line_start":363,"line_end":363,"column_start":5,"column_end":16}},{"value":"/ use euclid::point2;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104364,"byte_end":104387,"line_start":364,"line_end":364,"column_start":5,"column_end":28}},{"value":"/ use euclid::default::Point2D;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104392,"byte_end":104425,"line_start":365,"line_end":365,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104430,"byte_end":104433,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ let from: Point2D<_> = point2(0.0, 10.0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104438,"byte_end":104483,"line_start":367,"line_end":367,"column_start":5,"column_end":50}},{"value":"/ let to:  Point2D<_> = point2(8.0, -4.0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104488,"byte_end":104532,"line_start":368,"line_end":368,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104537,"byte_end":104540,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), point2(-8.0,  24.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104545,"byte_end":104602,"line_start":370,"line_end":370,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  0.0), point2( 0.0,  10.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104607,"byte_end":104664,"line_start":371,"line_end":371,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  0.5), point2( 4.0,   3.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104669,"byte_end":104726,"line_start":372,"line_end":372,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  1.0), point2( 8.0,  -4.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104731,"byte_end":104788,"line_start":373,"line_end":373,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(from.lerp(to,  2.0), point2(16.0, -18.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104793,"byte_end":104850,"line_start":374,"line_end":374,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104855,"byte_end":104862,"line_start":375,"line_end":375,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":104867,"byte_end":104876,"line_start":376,"line_end":376,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1289},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":105194,"byte_end":105197,"line_start":388,"line_end":388,"column_start":12,"column_end":15},"name":"min","qualname":"<Point2D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":105173,"byte_end":105182,"line_start":387,"line_end":387,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":105318,"byte_end":105321,"line_start":393,"line_end":393,"column_start":12,"column_end":15},"name":"max","qualname":"<Point2D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":105297,"byte_end":105306,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":105615,"byte_end":105620,"line_start":402,"line_end":402,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Point2D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the point each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the point each component of which clamped by corresponding","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":105421,"byte_end":105491,"line_start":397,"line_end":397,"column_start":5,"column_end":75}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":105496,"byte_end":105532,"line_start":398,"line_end":398,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":105537,"byte_end":105540,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":105545,"byte_end":105589,"line_start":400,"line_end":400,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":105594,"byte_end":105603,"line_start":401,"line_end":401,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":106161,"byte_end":106165,"line_start":417,"line_end":417,"column_start":12,"column_end":16},"name":"cast","qualname":"<Point2D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Point2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":105781,"byte_end":105855,"line_start":411,"line_end":411,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":105860,"byte_end":105863,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":105868,"byte_end":105955,"line_start":413,"line_end":413,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":105960,"byte_end":106048,"line_start":414,"line_end":414,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":106053,"byte_end":106135,"line_start":415,"line_end":415,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":106140,"byte_end":106149,"line_start":416,"line_end":416,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":106628,"byte_end":106636,"line_start":426,"line_end":426,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Point2D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Point2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":106253,"byte_end":106336,"line_start":421,"line_end":421,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":106341,"byte_end":106344,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":106349,"byte_end":106436,"line_start":423,"line_end":423,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":106441,"byte_end":106529,"line_start":424,"line_end":424,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":106534,"byte_end":106616,"line_start":425,"line_end":425,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1299},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":106951,"byte_end":106957,"line_start":437,"line_end":437,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Point2D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Point2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` point.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":106896,"byte_end":106925,"line_start":435,"line_end":435,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":106930,"byte_end":106939,"line_start":436,"line_end":436,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1300},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107071,"byte_end":107077,"line_start":443,"line_end":443,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Point2D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Point2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` point.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107016,"byte_end":107045,"line_start":441,"line_end":441,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107050,"byte_end":107059,"line_start":442,"line_end":442,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1301},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107430,"byte_end":107438,"line_start":453,"line_end":453,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Point2D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Point2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` point, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107136,"byte_end":107195,"line_start":447,"line_end":447,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107200,"byte_end":107203,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107208,"byte_end":107284,"line_start":449,"line_end":449,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107289,"byte_end":107363,"line_start":450,"line_end":450,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107368,"byte_end":107404,"line_start":451,"line_end":451,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107409,"byte_end":107418,"line_start":452,"line_end":452,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1302},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107791,"byte_end":107797,"line_start":463,"line_end":463,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Point2D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Point2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` point, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107499,"byte_end":107556,"line_start":457,"line_end":457,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107561,"byte_end":107564,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107569,"byte_end":107645,"line_start":459,"line_end":459,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107650,"byte_end":107724,"line_start":460,"line_end":460,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107729,"byte_end":107765,"line_start":461,"line_end":461,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107770,"byte_end":107779,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1303},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108146,"byte_end":108152,"line_start":473,"line_end":473,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Point2D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Point2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i32 point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i32 point, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107856,"byte_end":107911,"line_start":467,"line_end":467,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107916,"byte_end":107919,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":107924,"byte_end":108000,"line_start":469,"line_end":469,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108005,"byte_end":108079,"line_start":470,"line_end":470,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108084,"byte_end":108120,"line_start":471,"line_end":471,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108125,"byte_end":108134,"line_start":472,"line_end":472,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1304},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108501,"byte_end":108507,"line_start":483,"line_end":483,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Point2D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Point2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i64 point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i64 point, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108211,"byte_end":108266,"line_start":477,"line_end":477,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108271,"byte_end":108274,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108279,"byte_end":108355,"line_start":479,"line_end":479,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108360,"byte_end":108434,"line_start":480,"line_end":480,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108439,"byte_end":108475,"line_start":481,"line_end":481,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108480,"byte_end":108489,"line_start":482,"line_end":482,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108671,"byte_end":108680,"line_start":491,"line_end":491,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Point2D<T, U>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members are finite.\n","sig":null,"attributes":[{"value":"/ Returns true if all members are finite.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108602,"byte_end":108645,"line_start":489,"line_end":489,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108650,"byte_end":108659,"line_start":490,"line_end":490,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108834,"byte_end":108842,"line_start":498,"line_end":498,"column_start":12,"column_end":20},"name":"add_size","qualname":"<Point2D<T, U>>::add_size","value":"pub fn add_size(Self, &Size2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108813,"byte_end":108822,"line_start":497,"line_end":497,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":109030,"byte_end":109041,"line_start":505,"line_end":505,"column_start":12,"column_end":23},"name":"distance_to","qualname":"<Point2D<T, U>>::distance_to","value":"pub fn distance_to(Self, Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":109009,"byte_end":109018,"line_start":504,"line_end":504,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1442},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":114316,"byte_end":114323,"line_start":729,"line_end":729,"column_start":12,"column_end":19},"name":"Point3D","qualname":"::point::Point3D","value":"Point3D { x, y, z, _unit }","parent":null,"children":[{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1447},{"krate":0,"index":1448}],"decl_id":null,"docs":" A 3d Point tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 3d Point tagged with a unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":114259,"byte_end":114293,"line_start":727,"line_end":727,"column_start":1,"column_end":35}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":114294,"byte_end":114304,"line_start":728,"line_end":728,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1445},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":114340,"byte_end":114341,"line_start":730,"line_end":730,"column_start":9,"column_end":10},"name":"x","qualname":"::point::Point3D::x","value":"T","parent":{"krate":0,"index":1442},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1446},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":114354,"byte_end":114355,"line_start":731,"line_end":731,"column_start":9,"column_end":10},"name":"y","qualname":"::point::Point3D::y","value":"T","parent":{"krate":0,"index":1442},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1447},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":114368,"byte_end":114369,"line_start":732,"line_end":732,"column_start":9,"column_end":10},"name":"z","qualname":"::point::Point3D::z","value":"T","parent":{"krate":0,"index":1442},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1448},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":114401,"byte_end":114406,"line_start":734,"line_end":734,"column_start":9,"column_end":14},"name":"_unit","qualname":"::point::Point3D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":1442},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1479},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":116411,"byte_end":116417,"line_start":825,"line_end":825,"column_start":12,"column_end":18},"name":"origin","qualname":"<Point3D<T, U>>::origin","value":"pub fn origin() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":116337,"byte_end":116385,"line_start":823,"line_end":823,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":116390,"byte_end":116399,"line_start":824,"line_end":824,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":116600,"byte_end":116604,"line_start":834,"line_end":834,"column_start":12,"column_end":16},"name":"zero","qualname":"<Point3D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" The same as [`origin()`](#method.origin).\n","sig":null,"attributes":[{"value":"/ The same as [`origin()`](#method.origin).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":116529,"byte_end":116574,"line_start":832,"line_end":832,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":116579,"byte_end":116588,"line_start":833,"line_end":833,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1481},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":116760,"byte_end":116763,"line_start":843,"line_end":843,"column_start":18,"column_end":21},"name":"new","qualname":"<Point3D<T, U>>::new","value":"pub const fn new(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":116682,"byte_end":116728,"line_start":841,"line_end":841,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":116733,"byte_end":116742,"line_start":842,"line_end":842,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1482},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":116999,"byte_end":117011,"line_start":854,"line_end":854,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Point3D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly Lengths instead of scalar values.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":116908,"byte_end":116973,"line_start":852,"line_end":852,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":116978,"byte_end":116987,"line_start":853,"line_end":853,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1483},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":117197,"byte_end":117202,"line_start":860,"line_end":860,"column_start":12,"column_end":17},"name":"splat","qualname":"<Point3D<T, U>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting all components to the same value.\n","sig":null,"attributes":[{"value":"/ Constructor setting all components to the same value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":117114,"byte_end":117171,"line_start":858,"line_end":858,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":117176,"byte_end":117185,"line_start":859,"line_end":859,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1484},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":117454,"byte_end":117466,"line_start":874,"line_end":874,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Point3D<T, U>>::from_untyped","value":"pub fn from_untyped(Point3D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":117392,"byte_end":117428,"line_start":872,"line_end":872,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":117433,"byte_end":117442,"line_start":873,"line_end":873,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":117709,"byte_end":117718,"line_start":884,"line_end":884,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Point3D<T, U>>::to_vector","value":"pub fn to_vector(Self) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this point into a vector.","sig":null,"attributes":[{"value":"/ Cast this point into a vector.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":117581,"byte_end":117615,"line_start":880,"line_end":880,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":117620,"byte_end":117623,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ Equivalent to subtracting the origin to this point.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":117628,"byte_end":117683,"line_start":882,"line_end":882,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":117688,"byte_end":117697,"line_start":883,"line_end":883,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1489},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":117973,"byte_end":117975,"line_start":895,"line_end":895,"column_start":12,"column_end":14},"name":"xy","qualname":"<Point3D<T, U>>::xy","value":"pub fn xy(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d point using this point's x and y coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d point using this point's x and y coordinates","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":117886,"byte_end":117947,"line_start":893,"line_end":893,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":117952,"byte_end":117961,"line_start":894,"line_end":894,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1490},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118130,"byte_end":118132,"line_start":901,"line_end":901,"column_start":12,"column_end":14},"name":"xz","qualname":"<Point3D<T, U>>::xz","value":"pub fn xz(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d point using this point's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d point using this point's x and z coordinates","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118043,"byte_end":118104,"line_start":899,"line_end":899,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118109,"byte_end":118118,"line_start":900,"line_end":900,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1491},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118287,"byte_end":118289,"line_start":907,"line_end":907,"column_start":12,"column_end":14},"name":"yz","qualname":"<Point3D<T, U>>::yz","value":"pub fn yz(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d point using this point's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d point using this point's x and z coordinates","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118200,"byte_end":118261,"line_start":905,"line_end":905,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118266,"byte_end":118275,"line_start":906,"line_end":906,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1492},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118664,"byte_end":118672,"line_start":924,"line_end":924,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Point3D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y and z.","sig":null,"attributes":[{"value":"/ Cast into an array with x, y and z.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118357,"byte_end":118396,"line_start":911,"line_end":911,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118401,"byte_end":118404,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118409,"byte_end":118422,"line_start":913,"line_end":913,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118427,"byte_end":118430,"line_start":914,"line_end":914,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118435,"byte_end":118446,"line_start":915,"line_end":915,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118451,"byte_end":118487,"line_start":916,"line_end":916,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118492,"byte_end":118506,"line_start":917,"line_end":917,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118511,"byte_end":118514,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118519,"byte_end":118568,"line_start":919,"line_end":919,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118573,"byte_end":118576,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_array(), [1, -8, 0]);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118581,"byte_end":118626,"line_start":921,"line_end":921,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118631,"byte_end":118638,"line_start":922,"line_end":922,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118643,"byte_end":118652,"line_start":923,"line_end":923,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118756,"byte_end":118767,"line_start":929,"line_end":929,"column_start":12,"column_end":23},"name":"to_array_4d","qualname":"<Point3D<T, U>>::to_array_4d","value":"pub fn to_array_4d(Self) -> [T; ] where T: One","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118735,"byte_end":118744,"line_start":928,"line_end":928,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119178,"byte_end":119186,"line_start":949,"line_end":949,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Point3D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y and z.","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y and z.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118872,"byte_end":118910,"line_start":936,"line_end":936,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118915,"byte_end":118918,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118923,"byte_end":118936,"line_start":938,"line_end":938,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118941,"byte_end":118944,"line_start":939,"line_end":939,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118949,"byte_end":118960,"line_start":940,"line_end":940,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":118965,"byte_end":119001,"line_start":941,"line_end":941,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119006,"byte_end":119020,"line_start":942,"line_end":942,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119025,"byte_end":119028,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119033,"byte_end":119082,"line_start":944,"line_end":944,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119087,"byte_end":119090,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.to_tuple(), (1, -8, 0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119095,"byte_end":119140,"line_start":946,"line_end":946,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119145,"byte_end":119152,"line_start":947,"line_end":947,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119157,"byte_end":119166,"line_start":948,"line_end":948,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1497},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119273,"byte_end":119284,"line_start":954,"line_end":954,"column_start":12,"column_end":23},"name":"to_tuple_4d","qualname":"<Point3D<T, U>>::to_tuple_4d","value":"pub fn to_tuple_4d(Self) -> (T, T, T, T) where T: One","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119252,"byte_end":119261,"line_start":953,"line_end":953,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1498},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119820,"byte_end":119830,"line_start":976,"line_end":976,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Point3D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Point3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119395,"byte_end":119449,"line_start":961,"line_end":961,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119454,"byte_end":119457,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119462,"byte_end":119475,"line_start":963,"line_end":963,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119480,"byte_end":119483,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119488,"byte_end":119499,"line_start":965,"line_end":965,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119504,"byte_end":119540,"line_start":966,"line_end":966,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119545,"byte_end":119559,"line_start":967,"line_end":967,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119564,"byte_end":119567,"line_start":968,"line_end":968,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119572,"byte_end":119621,"line_start":969,"line_end":969,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119626,"byte_end":119629,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.to_untyped().x);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119634,"byte_end":119680,"line_start":971,"line_end":971,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(point.y, point.to_untyped().y);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119685,"byte_end":119731,"line_start":972,"line_end":972,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(point.z, point.to_untyped().z);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119736,"byte_end":119782,"line_start":973,"line_end":973,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119787,"byte_end":119794,"line_start":974,"line_end":974,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119799,"byte_end":119808,"line_start":975,"line_end":975,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1499},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120369,"byte_end":120378,"line_start":996,"line_end":996,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Point3D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Point3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119916,"byte_end":119964,"line_start":980,"line_end":980,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119969,"byte_end":119972,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119977,"byte_end":119990,"line_start":982,"line_end":982,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":119995,"byte_end":119998,"line_start":983,"line_end":983,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120003,"byte_end":120014,"line_start":984,"line_end":984,"column_start":5,"column_end":16}},{"value":"/ # use euclid::{Point3D, point3};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120019,"byte_end":120055,"line_start":985,"line_end":985,"column_start":5,"column_end":41}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120060,"byte_end":120074,"line_start":986,"line_end":986,"column_start":5,"column_end":19}},{"value":"/ enum Cm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120079,"byte_end":120093,"line_start":987,"line_end":987,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120098,"byte_end":120101,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ let point: Point3D<_, Mm> = point3(1, -8, 0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120106,"byte_end":120155,"line_start":989,"line_end":989,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120160,"byte_end":120163,"line_start":990,"line_end":990,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point.x, point.cast_unit::<Cm>().x);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120168,"byte_end":120219,"line_start":991,"line_end":991,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(point.y, point.cast_unit::<Cm>().y);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120224,"byte_end":120275,"line_start":992,"line_end":992,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(point.z, point.cast_unit::<Cm>().z);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120280,"byte_end":120331,"line_start":993,"line_end":993,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120336,"byte_end":120343,"line_start":994,"line_end":994,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120348,"byte_end":120357,"line_start":995,"line_end":995,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1501},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120511,"byte_end":120516,"line_start":1002,"line_end":1002,"column_start":12,"column_end":17},"name":"to_2d","qualname":"<Point3D<T, U>>::to_2d","value":"pub fn to_2d(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 2d point.\n","sig":null,"attributes":[{"value":"/ Convert into a 2d point.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120457,"byte_end":120485,"line_start":1000,"line_end":1000,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120490,"byte_end":120499,"line_start":1001,"line_end":1001,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120943,"byte_end":120948,"line_start":1018,"line_end":1018,"column_start":12,"column_end":17},"name":"round","qualname":"<Point3D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120571,"byte_end":120626,"line_start":1006,"line_end":1006,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120631,"byte_end":120634,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120639,"byte_end":120714,"line_start":1008,"line_end":1008,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120719,"byte_end":120722,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120727,"byte_end":120738,"line_start":1010,"line_end":1010,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point3;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120743,"byte_end":120768,"line_start":1011,"line_end":1011,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120773,"byte_end":120787,"line_start":1012,"line_end":1012,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120792,"byte_end":120795,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point3::<_, Mm>(-0.1, -0.8, 0.4).round(), point3::<_, Mm>(0.0, -1.0, 0.0))","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120800,"byte_end":120889,"line_start":1014,"line_end":1014,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120894,"byte_end":120901,"line_start":1015,"line_end":1015,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120906,"byte_end":120915,"line_start":1016,"line_end":1016,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":120920,"byte_end":120931,"line_start":1017,"line_end":1017,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1503},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121477,"byte_end":121481,"line_start":1037,"line_end":1037,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Point3D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121071,"byte_end":121162,"line_start":1025,"line_end":1025,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121167,"byte_end":121170,"line_start":1026,"line_end":1026,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121175,"byte_end":121250,"line_start":1027,"line_end":1027,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121255,"byte_end":121258,"line_start":1028,"line_end":1028,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121263,"byte_end":121274,"line_start":1029,"line_end":1029,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point3;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121279,"byte_end":121304,"line_start":1030,"line_end":1030,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121309,"byte_end":121323,"line_start":1031,"line_end":1031,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121328,"byte_end":121331,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point3::<_, Mm>(-0.1, -0.8, 0.4).ceil(), point3::<_, Mm>(0.0, 0.0, 1.0))","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121336,"byte_end":121423,"line_start":1033,"line_end":1033,"column_start":5,"column_end":92}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121428,"byte_end":121435,"line_start":1034,"line_end":1034,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121440,"byte_end":121449,"line_start":1035,"line_end":1035,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121454,"byte_end":121465,"line_start":1036,"line_end":1036,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122006,"byte_end":122011,"line_start":1056,"line_end":1056,"column_start":12,"column_end":17},"name":"floor","qualname":"<Point3D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121600,"byte_end":121688,"line_start":1044,"line_end":1044,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121693,"byte_end":121696,"line_start":1045,"line_end":1045,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121701,"byte_end":121776,"line_start":1046,"line_end":1046,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121781,"byte_end":121784,"line_start":1047,"line_end":1047,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121789,"byte_end":121800,"line_start":1048,"line_end":1048,"column_start":5,"column_end":16}},{"value":"/ # use euclid::point3;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121805,"byte_end":121830,"line_start":1049,"line_end":1049,"column_start":5,"column_end":30}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121835,"byte_end":121849,"line_start":1050,"line_end":1050,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121854,"byte_end":121857,"line_start":1051,"line_end":1051,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(point3::<_, Mm>(-0.1, -0.8, 0.4).floor(), point3::<_, Mm>(-1.0, -1.0, 0.0))","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121862,"byte_end":121952,"line_start":1052,"line_end":1052,"column_start":5,"column_end":95}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121957,"byte_end":121964,"line_start":1053,"line_end":1053,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121969,"byte_end":121978,"line_start":1054,"line_end":1054,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":121983,"byte_end":121994,"line_start":1055,"line_end":1055,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1505},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122817,"byte_end":122821,"line_start":1081,"line_end":1081,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Point3D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this point and another point.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this point and another point.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122134,"byte_end":122196,"line_start":1063,"line_end":1063,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122201,"byte_end":122204,"line_start":1064,"line_end":1064,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122209,"byte_end":122222,"line_start":1065,"line_end":1065,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122227,"byte_end":122230,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122235,"byte_end":122246,"line_start":1067,"line_end":1067,"column_start":5,"column_end":16}},{"value":"/ use euclid::point3;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122251,"byte_end":122274,"line_start":1068,"line_end":1068,"column_start":5,"column_end":28}},{"value":"/ use euclid::default::Point3D;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122279,"byte_end":122312,"line_start":1069,"line_end":1069,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122317,"byte_end":122320,"line_start":1070,"line_end":1070,"column_start":5,"column_end":8}},{"value":"/ let from: Point3D<_> = point3(0.0, 10.0, -1.0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122325,"byte_end":122376,"line_start":1071,"line_end":1071,"column_start":5,"column_end":56}},{"value":"/ let to:  Point3D<_> = point3(8.0, -4.0,  0.0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122381,"byte_end":122431,"line_start":1072,"line_end":1072,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122436,"byte_end":122439,"line_start":1073,"line_end":1073,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), point3(-8.0,  24.0, -2.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122444,"byte_end":122507,"line_start":1074,"line_end":1074,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  0.0), point3( 0.0,  10.0, -1.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122512,"byte_end":122575,"line_start":1075,"line_end":1075,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  0.5), point3( 4.0,   3.0, -0.5));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122580,"byte_end":122643,"line_start":1076,"line_end":1076,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  1.0), point3( 8.0,  -4.0,  0.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122648,"byte_end":122711,"line_start":1077,"line_end":1077,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(from.lerp(to,  2.0), point3(16.0, -18.0,  1.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122716,"byte_end":122779,"line_start":1078,"line_end":1078,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122784,"byte_end":122791,"line_start":1079,"line_end":1079,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":122796,"byte_end":122805,"line_start":1080,"line_end":1080,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1509},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":123200,"byte_end":123203,"line_start":1096,"line_end":1096,"column_start":12,"column_end":15},"name":"min","qualname":"<Point3D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":123179,"byte_end":123188,"line_start":1095,"line_end":1095,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1510},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":123393,"byte_end":123396,"line_start":1105,"line_end":1105,"column_start":12,"column_end":15},"name":"max","qualname":"<Point3D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":123372,"byte_end":123381,"line_start":1104,"line_end":1104,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1511},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":123759,"byte_end":123764,"line_start":1118,"line_end":1118,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Point3D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the point each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the point each component of which clamped by corresponding","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":123565,"byte_end":123635,"line_start":1113,"line_end":1113,"column_start":5,"column_end":75}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":123640,"byte_end":123676,"line_start":1114,"line_end":1114,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":123681,"byte_end":123684,"line_start":1115,"line_end":1115,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":123689,"byte_end":123733,"line_start":1116,"line_end":1116,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":123738,"byte_end":123747,"line_start":1117,"line_end":1117,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1515},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":124305,"byte_end":124309,"line_start":1133,"line_end":1133,"column_start":12,"column_end":16},"name":"cast","qualname":"<Point3D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Point3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":123925,"byte_end":123999,"line_start":1127,"line_end":1127,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":124004,"byte_end":124007,"line_start":1128,"line_end":1128,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":124012,"byte_end":124099,"line_start":1129,"line_end":1129,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":124104,"byte_end":124192,"line_start":1130,"line_end":1130,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":124197,"byte_end":124279,"line_start":1131,"line_end":1131,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":124284,"byte_end":124293,"line_start":1132,"line_end":1132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1517},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":124772,"byte_end":124780,"line_start":1142,"line_end":1142,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Point3D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Point3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":124397,"byte_end":124480,"line_start":1137,"line_end":1137,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":124485,"byte_end":124488,"line_start":1138,"line_end":1138,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":124493,"byte_end":124580,"line_start":1139,"line_end":1139,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":124585,"byte_end":124673,"line_start":1140,"line_end":1140,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":124678,"byte_end":124760,"line_start":1141,"line_end":1141,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1519},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":125177,"byte_end":125183,"line_start":1157,"line_end":1157,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Point3D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Point3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` point.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":125122,"byte_end":125151,"line_start":1155,"line_end":1155,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":125156,"byte_end":125165,"line_start":1156,"line_end":1156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1520},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":125297,"byte_end":125303,"line_start":1163,"line_end":1163,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Point3D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Point3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` point.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` point.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":125242,"byte_end":125271,"line_start":1161,"line_end":1161,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":125276,"byte_end":125285,"line_start":1162,"line_end":1162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1521},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":125656,"byte_end":125664,"line_start":1173,"line_end":1173,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Point3D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Point3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` point, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":125362,"byte_end":125421,"line_start":1167,"line_end":1167,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":125426,"byte_end":125429,"line_start":1168,"line_end":1168,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":125434,"byte_end":125510,"line_start":1169,"line_end":1169,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":125515,"byte_end":125589,"line_start":1170,"line_end":1170,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":125594,"byte_end":125630,"line_start":1171,"line_end":1171,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":125635,"byte_end":125644,"line_start":1172,"line_end":1172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1522},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126017,"byte_end":126023,"line_start":1183,"line_end":1183,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Point3D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Point3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` point, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":125725,"byte_end":125782,"line_start":1177,"line_end":1177,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":125787,"byte_end":125790,"line_start":1178,"line_end":1178,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":125795,"byte_end":125871,"line_start":1179,"line_end":1179,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":125876,"byte_end":125950,"line_start":1180,"line_end":1180,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":125955,"byte_end":125991,"line_start":1181,"line_end":1181,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":125996,"byte_end":126005,"line_start":1182,"line_end":1182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1523},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126374,"byte_end":126380,"line_start":1193,"line_end":1193,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Point3D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Point3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` point, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126082,"byte_end":126139,"line_start":1187,"line_end":1187,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126144,"byte_end":126147,"line_start":1188,"line_end":1188,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126152,"byte_end":126228,"line_start":1189,"line_end":1189,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126233,"byte_end":126307,"line_start":1190,"line_end":1190,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126312,"byte_end":126348,"line_start":1191,"line_end":1191,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126353,"byte_end":126362,"line_start":1192,"line_end":1192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126731,"byte_end":126737,"line_start":1203,"line_end":1203,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Point3D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Point3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` point, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` point, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126439,"byte_end":126496,"line_start":1197,"line_end":1197,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126501,"byte_end":126504,"line_start":1198,"line_end":1198,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point points, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126509,"byte_end":126585,"line_start":1199,"line_end":1199,"column_start":5,"column_end":81}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126590,"byte_end":126664,"line_start":1200,"line_end":1200,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126669,"byte_end":126705,"line_start":1201,"line_end":1201,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126710,"byte_end":126719,"line_start":1202,"line_end":1202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1528},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126901,"byte_end":126910,"line_start":1211,"line_end":1211,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Point3D<T, U>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members are finite.\n","sig":null,"attributes":[{"value":"/ Returns true if all members are finite.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126832,"byte_end":126875,"line_start":1209,"line_end":1209,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126880,"byte_end":126889,"line_start":1210,"line_end":1210,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1532},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":127086,"byte_end":127094,"line_start":1218,"line_end":1218,"column_start":12,"column_end":20},"name":"add_size","qualname":"<Point3D<T, U>>::add_size","value":"pub fn add_size(Self, Size3D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":127065,"byte_end":127074,"line_start":1217,"line_end":1217,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1536},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":127350,"byte_end":127361,"line_start":1229,"line_end":1229,"column_start":12,"column_end":23},"name":"distance_to","qualname":"<Point3D<T, U>>::distance_to","value":"pub fn distance_to(Self, Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":127329,"byte_end":127338,"line_start":1228,"line_end":1228,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":1662},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":133354,"byte_end":133360,"line_start":1487,"line_end":1487,"column_start":14,"column_end":20},"name":"point2","qualname":"::point::point2","value":"pub const fn point2<T, U>(T, T) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Point2D::new(x, y)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Point2D::new(x, y)`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":133291,"byte_end":133330,"line_start":1485,"line_end":1485,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":133331,"byte_end":133340,"line_start":1486,"line_end":1486,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1665},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":133534,"byte_end":133540,"line_start":1497,"line_end":1497,"column_start":14,"column_end":20},"name":"point3","qualname":"::point::point3","value":"pub const fn point3<T, U>(T, T, T) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Point3D::new(x, y)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Point3D::new(x, y)`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":133471,"byte_end":133510,"line_start":1495,"line_end":1495,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":133511,"byte_end":133520,"line_start":1496,"line_end":1496,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":1736},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":148437,"byte_end":148441,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"Rect","qualname":"::rect::Rect","value":"Rect { origin, size }","parent":null,"children":[{"krate":0,"index":1739},{"krate":0,"index":1740}],"decl_id":null,"docs":" A 2d Rectangle optionally tagged with a unit.","sig":null,"attributes":[{"value":"/ A 2d Rectangle optionally tagged with a unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":147728,"byte_end":147777,"line_start":29,"line_end":29,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":147778,"byte_end":147781,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Representation","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":147782,"byte_end":147802,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":147803,"byte_end":147806,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ `Rect` is represented by an origin point and a size.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":147807,"byte_end":147863,"line_start":33,"line_end":33,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":147864,"byte_end":147867,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ See [`Box2D`] for a rectangle represented by two endpoints.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":147868,"byte_end":147931,"line_start":35,"line_end":35,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":147932,"byte_end":147935,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ # Empty rectangle","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":147936,"byte_end":147957,"line_start":37,"line_end":37,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":147958,"byte_end":147961,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ A rectangle is considered empty (see [`is_empty`]) if any of the following is true:","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":147962,"byte_end":148049,"line_start":39,"line_end":39,"column_start":1,"column_end":88}},{"value":"/ - it's area is empty,","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":148050,"byte_end":148075,"line_start":40,"line_end":40,"column_start":1,"column_end":26}},{"value":"/ - it's area is negative (`size.x < 0` or `size.y < 0`),","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":148076,"byte_end":148135,"line_start":41,"line_end":41,"column_start":1,"column_end":60}},{"value":"/ - it contains NaNs.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":148136,"byte_end":148159,"line_start":42,"line_end":42,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":148160,"byte_end":148163,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ [`is_empty`]: #method.is_empty","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":148164,"byte_end":148198,"line_start":44,"line_end":44,"column_start":1,"column_end":35}},{"value":"/ [`Box2D`]: struct.Box2D.html","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":148199,"byte_end":148231,"line_start":45,"line_end":45,"column_start":1,"column_end":33}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":148232,"byte_end":148242,"line_start":46,"line_end":46,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":1739},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":148458,"byte_end":148464,"line_start":53,"line_end":53,"column_start":9,"column_end":15},"name":"origin","qualname":"::rect::Rect::origin","value":"point::Point2D<T, U>","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1740},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":148489,"byte_end":148493,"line_start":54,"line_end":54,"column_start":9,"column_end":13},"name":"size","qualname":"::rect::Rect::size","value":"size::Size2D<T, U>","parent":{"krate":0,"index":1736},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1771},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":149894,"byte_end":149897,"line_start":114,"line_end":114,"column_start":18,"column_end":21},"name":"new","qualname":"<Rect<T, U>>::new","value":"pub const fn new(Point2D<T, U>, Size2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor.\n","sig":null,"attributes":[{"value":"/ Constructor.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":149846,"byte_end":149862,"line_start":112,"line_end":112,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":149867,"byte_end":149876,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1775},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150106,"byte_end":150110,"line_start":125,"line_end":125,"column_start":12,"column_end":16},"name":"zero","qualname":"<Rect<T, U>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150037,"byte_end":150080,"line_start":123,"line_end":123,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150085,"byte_end":150094,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1776},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150266,"byte_end":150275,"line_start":131,"line_end":131,"column_start":12,"column_end":21},"name":"from_size","qualname":"<Rect<T, U>>::from_size","value":"pub fn from_size(Size2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rect of the given size, at offset zero.\n","sig":null,"attributes":[{"value":"/ Creates a rect of the given size, at offset zero.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150187,"byte_end":150240,"line_start":129,"line_end":129,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150245,"byte_end":150254,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1780},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150484,"byte_end":150487,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"min","qualname":"<Rect<T, U>>::min","value":"pub fn min(&Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150463,"byte_end":150472,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1781},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150566,"byte_end":150569,"line_start":149,"line_end":149,"column_start":12,"column_end":15},"name":"max","qualname":"<Rect<T, U>>::max","value":"pub fn max(&Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150545,"byte_end":150554,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1782},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150660,"byte_end":150665,"line_start":154,"line_end":154,"column_start":12,"column_end":17},"name":"max_x","qualname":"<Rect<T, U>>::max_x","value":"pub fn max_x(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150639,"byte_end":150648,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1783},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150752,"byte_end":150757,"line_start":159,"line_end":159,"column_start":12,"column_end":17},"name":"min_x","qualname":"<Rect<T, U>>::min_x","value":"pub fn min_x(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150731,"byte_end":150740,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1784},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150826,"byte_end":150831,"line_start":164,"line_end":164,"column_start":12,"column_end":17},"name":"max_y","qualname":"<Rect<T, U>>::max_y","value":"pub fn max_y(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150805,"byte_end":150814,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1785},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150919,"byte_end":150924,"line_start":169,"line_end":169,"column_start":12,"column_end":17},"name":"min_y","qualname":"<Rect<T, U>>::min_y","value":"pub fn min_y(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150898,"byte_end":150907,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1786},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150993,"byte_end":150998,"line_start":174,"line_end":174,"column_start":12,"column_end":17},"name":"width","qualname":"<Rect<T, U>>::width","value":"pub fn width(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150972,"byte_end":150981,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1787},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":151069,"byte_end":151075,"line_start":179,"line_end":179,"column_start":12,"column_end":18},"name":"height","qualname":"<Rect<T, U>>::height","value":"pub fn height(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":151048,"byte_end":151057,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1788},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":151147,"byte_end":151154,"line_start":184,"line_end":184,"column_start":12,"column_end":19},"name":"x_range","qualname":"<Rect<T, U>>::x_range","value":"pub fn x_range(&Self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":151126,"byte_end":151135,"line_start":183,"line_end":183,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1789},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":151243,"byte_end":151250,"line_start":189,"line_end":189,"column_start":12,"column_end":19},"name":"y_range","qualname":"<Rect<T, U>>::y_range","value":"pub fn y_range(&Self) -> Range<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":151222,"byte_end":151231,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1790},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":151415,"byte_end":151424,"line_start":196,"line_end":196,"column_start":12,"column_end":21},"name":"translate","qualname":"<Rect<T, U>>::translate","value":"pub fn translate(&Self, Vector2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the same rectangle, translated by a vector.\n","sig":null,"attributes":[{"value":"/ Returns the same rectangle, translated by a vector.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":151318,"byte_end":151373,"line_start":193,"line_end":193,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":151378,"byte_end":151387,"line_start":194,"line_end":194,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":151392,"byte_end":151403,"line_start":195,"line_end":195,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1791},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":151541,"byte_end":151549,"line_start":201,"line_end":201,"column_start":12,"column_end":20},"name":"to_box2d","qualname":"<Rect<T, U>>::to_box2d","value":"pub fn to_box2d(&Self) -> Box2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":151520,"byte_end":151529,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1795},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":151973,"byte_end":151981,"line_start":217,"line_end":217,"column_start":12,"column_end":20},"name":"contains","qualname":"<Rect<T, U>>::contains","value":"pub fn contains(&Self, Point2D<T, U>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this rectangle contains the point. Points are considered\n in the rectangle if they are on the left or top edge, but outside if they\n are on the right or bottom edge.\n","sig":null,"attributes":[{"value":"/ Returns true if this rectangle contains the point. Points are considered","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":151748,"byte_end":151824,"line_start":213,"line_end":213,"column_start":5,"column_end":81}},{"value":"/ in the rectangle if they are on the left or top edge, but outside if they","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":151829,"byte_end":151906,"line_start":214,"line_end":214,"column_start":5,"column_end":82}},{"value":"/ are on the right or bottom edge.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":151911,"byte_end":151947,"line_start":215,"line_end":215,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":151952,"byte_end":151961,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1796},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":152085,"byte_end":152095,"line_start":222,"line_end":222,"column_start":12,"column_end":22},"name":"intersects","qualname":"<Rect<T, U>>::intersects","value":"pub fn intersects(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":152064,"byte_end":152073,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1800},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":152313,"byte_end":152325,"line_start":232,"line_end":232,"column_start":12,"column_end":24},"name":"intersection","qualname":"<Rect<T, U>>::intersection","value":"pub fn intersection(&Self, &Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":152292,"byte_end":152301,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1804},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":152676,"byte_end":152683,"line_start":249,"line_end":249,"column_start":12,"column_end":19},"name":"inflate","qualname":"<Rect<T, U>>::inflate","value":"pub fn inflate(&Self, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":152639,"byte_end":152648,"line_start":247,"line_end":247,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":152653,"byte_end":152664,"line_start":248,"line_end":248,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1808},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":153281,"byte_end":153294,"line_start":268,"line_end":268,"column_start":12,"column_end":25},"name":"contains_rect","qualname":"<Rect<T, U>>::contains_rect","value":"pub fn contains_rect(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this rectangle contains the interior of rect. Always\n returns true if rect is empty, and always returns false if rect is\n nonempty but this rectangle is empty.\n","sig":null,"attributes":[{"value":"/ Returns true if this rectangle contains the interior of rect. Always","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":153062,"byte_end":153134,"line_start":264,"line_end":264,"column_start":5,"column_end":77}},{"value":"/ returns true if rect is empty, and always returns false if rect is","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":153139,"byte_end":153209,"line_start":265,"line_end":265,"column_start":5,"column_end":75}},{"value":"/ nonempty but this rectangle is empty.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":153214,"byte_end":153255,"line_start":266,"line_end":266,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":153260,"byte_end":153269,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1812},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":153929,"byte_end":153939,"line_start":286,"line_end":286,"column_start":12,"column_end":22},"name":"inner_rect","qualname":"<Rect<T, U>>::inner_rect","value":"pub fn inner_rect(&Self, SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the size and position of an inner rectangle.","sig":null,"attributes":[{"value":"/ Calculate the size and position of an inner rectangle.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":153657,"byte_end":153715,"line_start":281,"line_end":281,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":153720,"byte_end":153723,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ Subtracts the side offsets from all sides. The horizontal and vertical","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":153728,"byte_end":153802,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/ offsets must not be larger than the original side length.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":153807,"byte_end":153868,"line_start":284,"line_end":284,"column_start":5,"column_end":66}},{"value":"/ This method assumes y oriented downward.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":153873,"byte_end":153917,"line_start":285,"line_end":285,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1816},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":154689,"byte_end":154699,"line_start":308,"line_end":308,"column_start":12,"column_end":22},"name":"outer_rect","qualname":"<Rect<T, U>>::outer_rect","value":"pub fn outer_rect(&Self, SideOffsets2D<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculate the size and position of an outer rectangle.","sig":null,"attributes":[{"value":"/ Calculate the size and position of an outer rectangle.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":154488,"byte_end":154546,"line_start":304,"line_end":304,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":154551,"byte_end":154554,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ Add the offsets to all sides. The expanded rectangle is returned.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":154559,"byte_end":154628,"line_start":306,"line_end":306,"column_start":5,"column_end":74}},{"value":"/ This method assumes y oriented downward.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":154633,"byte_end":154677,"line_start":307,"line_end":307,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1820},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":155669,"byte_end":155680,"line_start":332,"line_end":332,"column_start":12,"column_end":23},"name":"from_points","qualname":"<Rect<T, U>>::from_points","value":"pub fn from_points<I>(I) -> Self where I: IntoIterator,\nI::Item: Borrow<Point2D<T, U>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest rectangle defined by the top/bottom/left/right-most\n points provided as parameter.","sig":null,"attributes":[{"value":"/ Returns the smallest rectangle defined by the top/bottom/left/right-most","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":155109,"byte_end":155185,"line_start":323,"line_end":323,"column_start":5,"column_end":81}},{"value":"/ points provided as parameter.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":155190,"byte_end":155223,"line_start":324,"line_end":324,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":155228,"byte_end":155231,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ Note: This function has a behavior that can be surprising because","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":155236,"byte_end":155305,"line_start":326,"line_end":326,"column_start":5,"column_end":74}},{"value":"/ the right-most and bottom-most points are exactly on the edge","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":155310,"byte_end":155375,"line_start":327,"line_end":327,"column_start":5,"column_end":70}},{"value":"/ of the rectangle while the `contains` function is has exclusive","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":155380,"byte_end":155447,"line_start":328,"line_end":328,"column_start":5,"column_end":72}},{"value":"/ semantic on these edges. This means that the right-most and bottom-most","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":155452,"byte_end":155527,"line_start":329,"line_end":329,"column_start":5,"column_end":80}},{"value":"/ points provided to `from_points` will count as not contained by the rect.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":155532,"byte_end":155609,"line_start":330,"line_end":330,"column_start":5,"column_end":82}},{"value":"/ This behavior may change in the future.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":155614,"byte_end":155657,"line_start":331,"line_end":331,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1825},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":156041,"byte_end":156045,"line_start":347,"line_end":347,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Rect<T, U>>::lerp","value":"pub fn lerp(&Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this rectangle and another rectangle.\n","sig":null,"attributes":[{"value":"/ Linearly interpolate between this rectangle and another rectangle.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":155945,"byte_end":156015,"line_start":345,"line_end":345,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":156020,"byte_end":156029,"line_start":346,"line_end":346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1829},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":156306,"byte_end":156312,"line_start":359,"line_end":359,"column_start":12,"column_end":18},"name":"center","qualname":"<Rect<T, U>>::center","value":"pub fn center(&Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1833},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":156567,"byte_end":156572,"line_start":370,"line_end":370,"column_start":12,"column_end":17},"name":"union","qualname":"<Rect<T, U>>::union","value":"pub fn union(&Self, &Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":156546,"byte_end":156555,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1837},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":156721,"byte_end":156726,"line_start":377,"line_end":377,"column_start":12,"column_end":17},"name":"scale","qualname":"<Rect<T, U>>::scale","value":"pub fn scale<S: Copy>(&Self, S, S) -> Self where T: Copy + Mul<S, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":156700,"byte_end":156709,"line_start":376,"line_end":376,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1842},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":157063,"byte_end":157067,"line_start":390,"line_end":390,"column_start":12,"column_end":16},"name":"area","qualname":"<Rect<T, U>>::area","value":"pub fn area(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":157042,"byte_end":157051,"line_start":389,"line_end":389,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1846},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":157191,"byte_end":157199,"line_start":397,"line_end":397,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Rect<T, U>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":157170,"byte_end":157179,"line_start":396,"line_end":396,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1850},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":157330,"byte_end":157342,"line_start":404,"line_end":404,"column_start":12,"column_end":24},"name":"to_non_empty","qualname":"<Rect<T, U>>::to_non_empty","value":"pub fn to_non_empty(&Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":157309,"byte_end":157318,"line_start":403,"line_end":403,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":159270,"byte_end":159280,"line_start":482,"line_end":482,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Rect<T, U>>::to_untyped","value":"pub fn to_untyped(&Self) -> Rect<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":159190,"byte_end":159244,"line_start":480,"line_end":480,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":159249,"byte_end":159258,"line_start":481,"line_end":481,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1893},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":159455,"byte_end":159467,"line_start":488,"line_end":488,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Rect<T, U>>::from_untyped","value":"pub fn from_untyped(&Rect<T, UnknownUnit>) -> Rect<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":159393,"byte_end":159429,"line_start":486,"line_end":486,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":159434,"byte_end":159443,"line_start":487,"line_end":487,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1894},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":159680,"byte_end":159689,"line_start":497,"line_end":497,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Rect<T, U>>::cast_unit","value":"pub fn cast_unit<V>(&Self) -> Rect<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":159637,"byte_end":159654,"line_start":495,"line_end":495,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":159659,"byte_end":159668,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1899},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":160215,"byte_end":160219,"line_start":509,"line_end":509,"column_start":12,"column_end":16},"name":"cast","qualname":"<Rect<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Rect<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":159835,"byte_end":159909,"line_start":503,"line_end":503,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":159914,"byte_end":159917,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":159922,"byte_end":160009,"line_start":505,"line_end":505,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":160014,"byte_end":160102,"line_start":506,"line_end":506,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":160107,"byte_end":160189,"line_start":507,"line_end":507,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":160194,"byte_end":160203,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1901},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":160703,"byte_end":160711,"line_start":518,"line_end":518,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Rect<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Rect<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":160328,"byte_end":160411,"line_start":513,"line_end":513,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":160416,"byte_end":160419,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":160424,"byte_end":160511,"line_start":515,"line_end":515,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":160516,"byte_end":160604,"line_start":516,"line_end":516,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using round(), round_in or round_out() before casting.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":160609,"byte_end":160691,"line_start":517,"line_end":517,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1903},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161047,"byte_end":161053,"line_start":529,"line_end":529,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Rect<T, U>>::to_f32","value":"pub fn to_f32(&Self) -> Rect<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` rectangle.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` rectangle.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":160988,"byte_end":161021,"line_start":527,"line_end":527,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161026,"byte_end":161035,"line_start":528,"line_end":528,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1904},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161169,"byte_end":161175,"line_start":535,"line_end":535,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Rect<T, U>>::to_f64","value":"pub fn to_f64(&Self) -> Rect<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` rectangle.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` rectangle.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161110,"byte_end":161143,"line_start":533,"line_end":533,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161148,"byte_end":161157,"line_start":534,"line_end":534,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1905},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161542,"byte_end":161550,"line_start":545,"line_end":545,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Rect<T, U>>::to_usize","value":"pub fn to_usize(&Self) -> Rect<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` rectangle, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161232,"byte_end":161295,"line_start":539,"line_end":539,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161300,"byte_end":161303,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161308,"byte_end":161388,"line_start":541,"line_end":541,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161393,"byte_end":161468,"line_start":542,"line_end":542,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161473,"byte_end":161516,"line_start":543,"line_end":543,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161521,"byte_end":161530,"line_start":544,"line_end":544,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1906},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161917,"byte_end":161923,"line_start":555,"line_end":555,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Rect<T, U>>::to_u32","value":"pub fn to_u32(&Self) -> Rect<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` rectangle, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161609,"byte_end":161670,"line_start":549,"line_end":549,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161675,"byte_end":161678,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161683,"byte_end":161763,"line_start":551,"line_end":551,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161768,"byte_end":161843,"line_start":552,"line_end":552,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161848,"byte_end":161891,"line_start":553,"line_end":553,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161896,"byte_end":161905,"line_start":554,"line_end":554,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1907},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":162288,"byte_end":162294,"line_start":565,"line_end":565,"column_start":12,"column_end":18},"name":"to_u64","qualname":"<Rect<T, U>>::to_u64","value":"pub fn to_u64(&Self) -> Rect<u64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u64` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u64` rectangle, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":161980,"byte_end":162041,"line_start":559,"line_end":559,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":162046,"byte_end":162049,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":162054,"byte_end":162134,"line_start":561,"line_end":561,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":162139,"byte_end":162214,"line_start":562,"line_end":562,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":162219,"byte_end":162262,"line_start":563,"line_end":563,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":162267,"byte_end":162276,"line_start":564,"line_end":564,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1908},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":162659,"byte_end":162665,"line_start":575,"line_end":575,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Rect<T, U>>::to_i32","value":"pub fn to_i32(&Self) -> Rect<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` rectangle, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":162351,"byte_end":162412,"line_start":569,"line_end":569,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":162417,"byte_end":162420,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":162425,"byte_end":162505,"line_start":571,"line_end":571,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":162510,"byte_end":162585,"line_start":572,"line_end":572,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":162590,"byte_end":162633,"line_start":573,"line_end":573,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":162638,"byte_end":162647,"line_start":574,"line_end":574,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1909},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163030,"byte_end":163036,"line_start":585,"line_end":585,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Rect<T, U>>::to_i64","value":"pub fn to_i64(&Self) -> Rect<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` rectangle, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` rectangle, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":162722,"byte_end":162783,"line_start":579,"line_end":579,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":162788,"byte_end":162791,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point rectangles, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":162796,"byte_end":162876,"line_start":581,"line_end":581,"column_start":5,"column_end":85}},{"value":"/ to `round()`, `round_in()` or `round_out()` before the cast in order to","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":162881,"byte_end":162956,"line_start":582,"line_end":582,"column_start":5,"column_end":80}},{"value":"/ obtain the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":162961,"byte_end":163004,"line_start":583,"line_end":583,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163009,"byte_end":163018,"line_start":584,"line_end":584,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1913},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163195,"byte_end":163204,"line_start":593,"line_end":593,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Rect<T, U>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members are finite.\n","sig":null,"attributes":[{"value":"/ Returns true if all members are finite.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163126,"byte_end":163169,"line_start":591,"line_end":591,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163174,"byte_end":163183,"line_start":592,"line_end":592,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1917},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164227,"byte_end":164232,"line_start":616,"line_end":616,"column_start":12,"column_end":17},"name":"round","qualname":"<Rect<T, U>>::round","value":"pub fn round(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a rectangle with edges rounded to integer coordinates, such that\n the returned rectangle has the same set of pixel centers as the original\n one.\n Edges at offset 0.5 round up.\n Suitable for most places where integral device coordinates\n are needed, but note that any translation should be applied first to\n avoid pixel rounding errors.\n Note that this is *not* rounding to nearest integer if the values are negative.\n They are always rounding as floor(n + 0.5).","sig":null,"attributes":[{"value":"/ Return a rectangle with edges rounded to integer coordinates, such that","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163379,"byte_end":163454,"line_start":599,"line_end":599,"column_start":5,"column_end":80}},{"value":"/ the returned rectangle has the same set of pixel centers as the original","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163459,"byte_end":163535,"line_start":600,"line_end":600,"column_start":5,"column_end":81}},{"value":"/ one.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163540,"byte_end":163548,"line_start":601,"line_end":601,"column_start":5,"column_end":13}},{"value":"/ Edges at offset 0.5 round up.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163553,"byte_end":163586,"line_start":602,"line_end":602,"column_start":5,"column_end":38}},{"value":"/ Suitable for most places where integral device coordinates","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163591,"byte_end":163653,"line_start":603,"line_end":603,"column_start":5,"column_end":67}},{"value":"/ are needed, but note that any translation should be applied first to","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163658,"byte_end":163730,"line_start":604,"line_end":604,"column_start":5,"column_end":77}},{"value":"/ avoid pixel rounding errors.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163735,"byte_end":163767,"line_start":605,"line_end":605,"column_start":5,"column_end":37}},{"value":"/ Note that this is *not* rounding to nearest integer if the values are negative.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163772,"byte_end":163855,"line_start":606,"line_end":606,"column_start":5,"column_end":88}},{"value":"/ They are always rounding as floor(n + 0.5).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163860,"byte_end":163907,"line_start":607,"line_end":607,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163912,"byte_end":163915,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ # Usage notes","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163920,"byte_end":163937,"line_start":609,"line_end":609,"column_start":5,"column_end":22}},{"value":"/ Note, that when using with floating-point `T` types that method can significantly","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163942,"byte_end":164027,"line_start":610,"line_end":610,"column_start":5,"column_end":90}},{"value":"/ loose precision for large values, so if you need to call this method very often it","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164032,"byte_end":164118,"line_start":611,"line_end":611,"column_start":5,"column_end":91}},{"value":"/ is better to use [`Box2D`].","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164123,"byte_end":164154,"line_start":612,"line_end":612,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164159,"byte_end":164162,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ [`Box2D`]: struct.Box2D.html","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164167,"byte_end":164199,"line_start":614,"line_end":614,"column_start":5,"column_end":37}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164204,"byte_end":164215,"line_start":615,"line_end":615,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1918},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164763,"byte_end":164771,"line_start":630,"line_end":630,"column_start":12,"column_end":20},"name":"round_in","qualname":"<Rect<T, U>>::round_in","value":"pub fn round_in(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a rectangle with edges rounded to integer coordinates, such that\n the original rectangle contains the resulting rectangle.","sig":null,"attributes":[{"value":"/ Return a rectangle with edges rounded to integer coordinates, such that","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164303,"byte_end":164378,"line_start":620,"line_end":620,"column_start":5,"column_end":80}},{"value":"/ the original rectangle contains the resulting rectangle.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164383,"byte_end":164443,"line_start":621,"line_end":621,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164448,"byte_end":164451,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ # Usage notes","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164456,"byte_end":164473,"line_start":623,"line_end":623,"column_start":5,"column_end":22}},{"value":"/ Note, that when using with floating-point `T` types that method can significantly","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164478,"byte_end":164563,"line_start":624,"line_end":624,"column_start":5,"column_end":90}},{"value":"/ loose precision for large values, so if you need to call this method very often it","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164568,"byte_end":164654,"line_start":625,"line_end":625,"column_start":5,"column_end":91}},{"value":"/ is better to use [`Box2D`].","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164659,"byte_end":164690,"line_start":626,"line_end":626,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164695,"byte_end":164698,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ [`Box2D`]: struct.Box2D.html","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164703,"byte_end":164735,"line_start":628,"line_end":628,"column_start":5,"column_end":37}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164740,"byte_end":164751,"line_start":629,"line_end":629,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1919},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":165312,"byte_end":165321,"line_start":644,"line_end":644,"column_start":12,"column_end":21},"name":"round_out","qualname":"<Rect<T, U>>::round_out","value":"pub fn round_out(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return a rectangle with edges rounded to integer coordinates, such that\n the original rectangle is contained in the resulting rectangle.","sig":null,"attributes":[{"value":"/ Return a rectangle with edges rounded to integer coordinates, such that","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164845,"byte_end":164920,"line_start":634,"line_end":634,"column_start":5,"column_end":80}},{"value":"/ the original rectangle is contained in the resulting rectangle.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164925,"byte_end":164992,"line_start":635,"line_end":635,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":164997,"byte_end":165000,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ # Usage notes","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":165005,"byte_end":165022,"line_start":637,"line_end":637,"column_start":5,"column_end":22}},{"value":"/ Note, that when using with floating-point `T` types that method can significantly","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":165027,"byte_end":165112,"line_start":638,"line_end":638,"column_start":5,"column_end":90}},{"value":"/ loose precision for large values, so if you need to call this method very often it","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":165117,"byte_end":165203,"line_start":639,"line_end":639,"column_start":5,"column_end":91}},{"value":"/ is better to use [`Box2D`].","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":165208,"byte_end":165239,"line_start":640,"line_end":640,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":165244,"byte_end":165247,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ [`Box2D`]: struct.Box2D.html","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":165252,"byte_end":165284,"line_start":642,"line_end":642,"column_start":5,"column_end":37}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":165289,"byte_end":165300,"line_start":643,"line_end":643,"column_start":5,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1924},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":165624,"byte_end":165628,"line_start":659,"line_end":659,"column_start":14,"column_end":18},"name":"rect","qualname":"::rect::rect","value":"pub const fn rect<T, U>(T, T, T, T) -> Rect<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Rect::new(Point2D::new(x, y), Size2D::new(w, h))`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Rect::new(Point2D::new(x, y), Size2D::new(w, h))`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":165541,"byte_end":165610,"line_start":658,"line_end":658,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":4618},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":175820,"byte_end":175836,"line_start":23,"line_end":23,"column_start":12,"column_end":28},"name":"RigidTransform3D","qualname":"::rigid::RigidTransform3D","value":"RigidTransform3D { rotation, translation }","parent":null,"children":[{"krate":0,"index":4622},{"krate":0,"index":4623}],"decl_id":null,"docs":" A rigid transformation. All lengths are preserved under such a transformation.","sig":null,"attributes":[{"value":"/ A rigid transformation. All lengths are preserved under such a transformation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":175312,"byte_end":175394,"line_start":12,"line_end":12,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":175395,"byte_end":175398,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":175399,"byte_end":175402,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Internally, this is a rotation and a translation, with the rotation","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":175403,"byte_end":175474,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/ applied first (i.e. `Rotation * Translation`, in row-vector notation)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":175475,"byte_end":175548,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":175549,"byte_end":175552,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This can be more efficient to use over full matrices, especially if you","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":175553,"byte_end":175628,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ have to deal with the decomposed quantities often.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":175629,"byte_end":175683,"line_start":19,"line_end":19,"column_start":1,"column_end":55}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":175798,"byte_end":175808,"line_start":22,"line_end":22,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":4622},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":175860,"byte_end":175868,"line_start":24,"line_end":24,"column_start":9,"column_end":17},"name":"rotation","qualname":"::rigid::RigidTransform3D::rotation","value":"rotation::Rotation3D<T, Src, Dst>","parent":{"krate":0,"index":4618},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4623},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":175903,"byte_end":175914,"line_start":25,"line_end":25,"column_start":9,"column_end":20},"name":"translation","qualname":"::rigid::RigidTransform3D::translation","value":"vector::Vector3D<T, Dst>","parent":{"krate":0,"index":4618},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1954},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":176099,"byte_end":176102,"line_start":31,"line_end":31,"column_start":18,"column_end":21},"name":"new","qualname":"<RigidTransform3D<T, Src, Dst>>::new","value":"pub const fn new(Rotation3D<T, Src, Dst>, Vector3D<T, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new rigid transformation, where the `rotation` applies first\n","sig":null,"attributes":[{"value":"/ Construct a new rigid transformation, where the `rotation` applies first","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":175991,"byte_end":176067,"line_start":29,"line_end":29,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":176072,"byte_end":176081,"line_start":30,"line_end":30,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1959},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":176327,"byte_end":176336,"line_start":40,"line_end":40,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<RigidTransform3D<T, Src, Dst>>::cast_unit","value":"pub fn cast_unit<Src2, Dst2>(&Self) -> RigidTransform3D<T, Src2, Dst2>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1966},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":176679,"byte_end":176687,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"identity","qualname":"<RigidTransform3D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct an identity transform\n","sig":null,"attributes":[{"value":"/ Construct an identity transform","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":176618,"byte_end":176653,"line_start":49,"line_end":49,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":176658,"byte_end":176667,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1967},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":176930,"byte_end":176947,"line_start":60,"line_end":60,"column_start":12,"column_end":29},"name":"new_from_reversed","qualname":"<RigidTransform3D<T, Src, Dst>>::new_from_reversed","value":"pub fn new_from_reversed(Vector3D<T, Src>, Rotation3D<T, Src, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new rigid transformation, where the `translation` applies first\n","sig":null,"attributes":[{"value":"/ Construct a new rigid transformation, where the `translation` applies first","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":176825,"byte_end":176904,"line_start":58,"line_end":58,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":176909,"byte_end":176918,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1968},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":177505,"byte_end":177518,"line_start":81,"line_end":81,"column_start":12,"column_end":25},"name":"from_rotation","qualname":"<RigidTransform3D<T, Src, Dst>>::from_rotation","value":"pub fn from_rotation(Rotation3D<T, Src, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":177484,"byte_end":177493,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1969},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":177686,"byte_end":177702,"line_start":89,"line_end":89,"column_start":12,"column_end":28},"name":"from_translation","qualname":"<RigidTransform3D<T, Src, Dst>>::from_translation","value":"pub fn from_translation(Vector3D<T, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":177665,"byte_end":177674,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1970},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":178023,"byte_end":178041,"line_start":100,"line_end":100,"column_start":12,"column_end":30},"name":"decompose_reversed","qualname":"<RigidTransform3D<T, Src, Dst>>::decompose_reversed","value":"pub fn decompose_reversed(&Self)\n-> (Vector3D<T, Src>, Rotation3D<T, Src, Dst>)","parent":null,"children":[],"decl_id":null,"docs":" Decompose this into a translation and an rotation to be applied in the opposite order","sig":null,"attributes":[{"value":"/ Decompose this into a translation and an rotation to be applied in the opposite order","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":177851,"byte_end":177940,"line_start":96,"line_end":96,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":177945,"byte_end":177948,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ i.e., the translation is applied _first_","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":177953,"byte_end":177997,"line_start":98,"line_end":98,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":178002,"byte_end":178011,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1971},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":178653,"byte_end":178657,"line_start":117,"line_end":117,"column_start":12,"column_end":16},"name":"then","qualname":"<RigidTransform3D<T, Src, Dst>>::then","value":"pub fn then<Dst2>(&Self, &RigidTransform3D<T, Dst, Dst2>)\n-> RigidTransform3D<T, Src, Dst2>","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplication of the two transforms such that\n other's transformation applies after self's transformation.","sig":null,"attributes":[{"value":"/ Returns the multiplication of the two transforms such that","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":178423,"byte_end":178485,"line_start":112,"line_end":112,"column_start":5,"column_end":67}},{"value":"/ other's transformation applies after self's transformation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":178490,"byte_end":178553,"line_start":113,"line_end":113,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":178558,"byte_end":178561,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ i.e., this produces `self * other` in row-vector notation","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":178566,"byte_end":178627,"line_start":115,"line_end":115,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":178632,"byte_end":178641,"line_start":116,"line_end":116,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1973},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":179547,"byte_end":179554,"line_start":144,"line_end":144,"column_start":12,"column_end":19},"name":"inverse","qualname":"<RigidTransform3D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> RigidTransform3D<T, Dst, Src>","parent":null,"children":[],"decl_id":null,"docs":" Inverts the transformation\n","sig":null,"attributes":[{"value":"/ Inverts the transformation","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":179491,"byte_end":179521,"line_start":142,"line_end":142,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":179526,"byte_end":179535,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1974},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":180105,"byte_end":180117,"line_start":160,"line_end":160,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<RigidTransform3D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform3D<T, Src, Dst> where T: Trig","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1975},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":180353,"byte_end":180363,"line_start":169,"line_end":169,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<RigidTransform3D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> RigidTransform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":180273,"byte_end":180327,"line_start":167,"line_end":167,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":180332,"byte_end":180341,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1976},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":180638,"byte_end":180650,"line_start":178,"line_end":178,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<RigidTransform3D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&RigidTransform3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":180576,"byte_end":180612,"line_start":176,"line_end":176,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":180617,"byte_end":180626,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2071},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":184917,"byte_end":184927,"line_start":33,"line_end":33,"column_start":12,"column_end":22},"name":"Rotation2D","qualname":"::rotation::Rotation2D","value":"Rotation2D { angle, _unit }","parent":null,"children":[{"krate":0,"index":2075},{"krate":0,"index":2076}],"decl_id":null,"docs":" A transform that can represent rotations in 2d, represented as an angle in radians.\n","sig":null,"attributes":[{"value":"/ A transform that can represent rotations in 2d, represented as an angle in radians.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":184588,"byte_end":184675,"line_start":23,"line_end":23,"column_start":1,"column_end":88}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":184676,"byte_end":184686,"line_start":24,"line_end":24,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2075},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":184976,"byte_end":184981,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"angle","qualname":"::rotation::Rotation2D::angle","value":"T","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":" Angle in radians\n","sig":null,"attributes":[{"value":"/ Angle in radians","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":184947,"byte_end":184967,"line_start":34,"line_end":34,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":2076},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":185013,"byte_end":185018,"line_start":37,"line_end":37,"column_start":9,"column_end":14},"name":"_unit","qualname":"::rotation::Rotation2D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":2071},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2105},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":185828,"byte_end":185831,"line_start":74,"line_end":74,"column_start":12,"column_end":15},"name":"new","qualname":"<Rotation2D<T, Src, Dst>>::new","value":"pub fn new(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation from an angle in radians.\n","sig":null,"attributes":[{"value":"/ Creates a rotation from an angle in radians.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":185754,"byte_end":185802,"line_start":72,"line_end":72,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":185807,"byte_end":185816,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2106},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186027,"byte_end":186034,"line_start":82,"line_end":82,"column_start":12,"column_end":19},"name":"radians","qualname":"<Rotation2D<T, Src, Dst>>::radians","value":"pub fn radians(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation from an angle in radians.\n","sig":null,"attributes":[{"value":"/ Creates a rotation from an angle in radians.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":185967,"byte_end":186015,"line_start":81,"line_end":81,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2107},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186167,"byte_end":186175,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"identity","qualname":"<Rotation2D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Creates the identity rotation.\n","sig":null,"attributes":[{"value":"/ Creates the identity rotation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186107,"byte_end":186141,"line_start":86,"line_end":86,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186146,"byte_end":186155,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2112},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186758,"byte_end":186767,"line_start":114,"line_end":114,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Rotation2D<T, Src, Dst>>::cast_unit","value":"pub fn cast_unit<Src2, Dst2>(&Self) -> Rotation2D<T, Src2, Dst2>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186315,"byte_end":186363,"line_start":97,"line_end":97,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186368,"byte_end":186371,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186376,"byte_end":186389,"line_start":99,"line_end":99,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186394,"byte_end":186397,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186402,"byte_end":186413,"line_start":101,"line_end":101,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation2D;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186418,"byte_end":186447,"line_start":102,"line_end":102,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186452,"byte_end":186469,"line_start":103,"line_end":103,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186474,"byte_end":186491,"line_start":104,"line_end":104,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186496,"byte_end":186499,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ enum Local2 {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186504,"byte_end":186522,"line_start":106,"line_end":106,"column_start":5,"column_end":23}},{"value":"/ enum World2 {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186527,"byte_end":186545,"line_start":107,"line_end":107,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186550,"byte_end":186553,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation2D<_, Local, World> = Rotation2D::radians(42);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186558,"byte_end":186630,"line_start":109,"line_end":109,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186635,"byte_end":186638,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.angle, to_world.cast_unit::<Local2, World2>().angle);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186643,"byte_end":186720,"line_start":111,"line_end":111,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186725,"byte_end":186732,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186737,"byte_end":186746,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2115},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187301,"byte_end":187311,"line_start":135,"line_end":135,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Rotation2D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Rotation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186923,"byte_end":186977,"line_start":121,"line_end":121,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186982,"byte_end":186985,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186990,"byte_end":187003,"line_start":123,"line_end":123,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187008,"byte_end":187011,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187016,"byte_end":187027,"line_start":125,"line_end":125,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation2D;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187032,"byte_end":187061,"line_start":126,"line_end":126,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187066,"byte_end":187083,"line_start":127,"line_end":127,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187088,"byte_end":187105,"line_start":128,"line_end":128,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187110,"byte_end":187113,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation2D<_, Local, World> = Rotation2D::radians(42);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187118,"byte_end":187190,"line_start":130,"line_end":130,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187195,"byte_end":187198,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.angle, to_world.to_untyped().angle);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187203,"byte_end":187263,"line_start":132,"line_end":132,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187268,"byte_end":187275,"line_start":133,"line_end":133,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187280,"byte_end":187289,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2116},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187823,"byte_end":187835,"line_start":154,"line_end":154,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Rotation2D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Rotation2D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187400,"byte_end":187436,"line_start":139,"line_end":139,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187441,"byte_end":187444,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187449,"byte_end":187462,"line_start":141,"line_end":141,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187467,"byte_end":187470,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187475,"byte_end":187486,"line_start":143,"line_end":143,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation2D;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187491,"byte_end":187520,"line_start":144,"line_end":144,"column_start":5,"column_end":34}},{"value":"/ use euclid::UnknownUnit;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187525,"byte_end":187553,"line_start":145,"line_end":145,"column_start":5,"column_end":33}},{"value":"/ enum Local {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187558,"byte_end":187575,"line_start":146,"line_end":146,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187580,"byte_end":187597,"line_start":147,"line_end":147,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187602,"byte_end":187605,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ let rot: Rotation2D<_, UnknownUnit, UnknownUnit> = Rotation2D::radians(42);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187610,"byte_end":187689,"line_start":149,"line_end":149,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187694,"byte_end":187697,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(rot.angle, Rotation2D::<_, Local, World>::from_untyped(&rot).angle);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187702,"byte_end":187785,"line_start":151,"line_end":151,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187790,"byte_end":187797,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187802,"byte_end":187811,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2121},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":188055,"byte_end":188064,"line_start":164,"line_end":164,"column_start":12,"column_end":21},"name":"get_angle","qualname":"<Rotation2D<T, Src, Dst>>::get_angle","value":"pub fn get_angle(&Self) -> Angle<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns self.angle as a strongly typed `Angle<T>`.\n","sig":null,"attributes":[{"value":"/ Returns self.angle as a strongly typed `Angle<T>`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187989,"byte_end":188043,"line_start":163,"line_end":163,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2126},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":188279,"byte_end":188284,"line_start":172,"line_end":172,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Rotation2D<T, Src, Dst>>::to_3d","value":"pub fn to_3d(&Self) -> Rotation3D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Creates a 3d rotation (around the z axis) from this 2d rotation.\n","sig":null,"attributes":[{"value":"/ Creates a 3d rotation (around the z axis) from this 2d rotation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":188185,"byte_end":188253,"line_start":170,"line_end":170,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":188258,"byte_end":188267,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2127},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":188446,"byte_end":188453,"line_start":178,"line_end":178,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Rotation2D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Rotation2D<T, Dst, Src>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the inverse of this rotation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":188379,"byte_end":188420,"line_start":176,"line_end":176,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":188425,"byte_end":188434,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2128},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":188649,"byte_end":188653,"line_start":184,"line_end":184,"column_start":12,"column_end":16},"name":"then","qualname":"<Rotation2D<T, Src, Dst>>::then","value":"pub fn then<NewSrc>(&Self, &Rotation2D<T, NewSrc, Src>)\n-> Rotation2D<T, NewSrc, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns a rotation representing the other rotation followed by this rotation.\n","sig":null,"attributes":[{"value":"/ Returns a rotation representing the other rotation followed by this rotation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":188542,"byte_end":188623,"line_start":182,"line_end":182,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":188628,"byte_end":188637,"line_start":183,"line_end":183,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2130},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":189010,"byte_end":189025,"line_start":195,"line_end":195,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Rotation2D<T, Src, Dst>>::transform_point","value":"pub fn transform_point(&Self, Point2D<T, Src>) -> Point2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d point transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 2d point transformed by this rotation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":188825,"byte_end":188885,"line_start":191,"line_end":191,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":188890,"byte_end":188893,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":188898,"byte_end":188984,"line_start":193,"line_end":193,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":188989,"byte_end":188998,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2131},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":189405,"byte_end":189421,"line_start":204,"line_end":204,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<Rotation2D<T, Src, Dst>>::transform_vector","value":"pub fn transform_vector(&Self, Vector2D<T, Src>) -> Vector2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d vector transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 2d vector transformed by this rotation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":189219,"byte_end":189280,"line_start":200,"line_end":200,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":189285,"byte_end":189288,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":189293,"byte_end":189379,"line_start":202,"line_end":202,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":189384,"byte_end":189393,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2136},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":189762,"byte_end":189774,"line_start":215,"line_end":215,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Rotation2D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform2D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this rotation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":189681,"byte_end":189736,"line_start":213,"line_end":213,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":189741,"byte_end":189750,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2137},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":190620,"byte_end":190630,"line_start":238,"line_end":238,"column_start":12,"column_end":22},"name":"Rotation3D","qualname":"::rotation::Rotation3D","value":"Rotation3D { i, j, k, r, _unit }","parent":null,"children":[{"krate":0,"index":2141},{"krate":0,"index":2142},{"krate":0,"index":2143},{"krate":0,"index":2144},{"krate":0,"index":2145}],"decl_id":null,"docs":" A transform that can represent rotations in 3d, represented as a quaternion.","sig":null,"attributes":[{"value":"/ A transform that can represent rotations in 3d, represented as a quaternion.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":189869,"byte_end":189949,"line_start":220,"line_end":220,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":189950,"byte_end":189953,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ Most methods expect the quaternion to be normalized.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":189954,"byte_end":190010,"line_start":222,"line_end":222,"column_start":1,"column_end":57}},{"value":"/ When in doubt, use `unit_quaternion` instead of `quaternion` to create","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":190011,"byte_end":190085,"line_start":223,"line_end":223,"column_start":1,"column_end":75}},{"value":"/ a rotation as the former will ensure that its result is normalized.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":190086,"byte_end":190157,"line_start":224,"line_end":224,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":190158,"byte_end":190161,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ Some people use the `x, y, z, w` (or `w, x, y, z`) notations. The equivalence is","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":190162,"byte_end":190246,"line_start":226,"line_end":226,"column_start":1,"column_end":85}},{"value":"/ as follows: `x -> i`, `y -> j`, `z -> k`, `w -> r`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":190247,"byte_end":190302,"line_start":227,"line_end":227,"column_start":1,"column_end":56}},{"value":"/ The memory layout of this type corresponds to the `x, y, z, w` notation","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":190303,"byte_end":190378,"line_start":228,"line_end":228,"column_start":1,"column_end":76}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":190379,"byte_end":190389,"line_start":229,"line_end":229,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2141},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":190712,"byte_end":190713,"line_start":240,"line_end":240,"column_start":9,"column_end":10},"name":"i","qualname":"::rotation::Rotation3D::i","value":"T","parent":{"krate":0,"index":2137},"children":[],"decl_id":null,"docs":" Component multiplied by the imaginary number `i`.\n","sig":null,"attributes":[{"value":"/ Component multiplied by the imaginary number `i`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":190650,"byte_end":190703,"line_start":239,"line_end":239,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2142},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":190784,"byte_end":190785,"line_start":242,"line_end":242,"column_start":9,"column_end":10},"name":"j","qualname":"::rotation::Rotation3D::j","value":"T","parent":{"krate":0,"index":2137},"children":[],"decl_id":null,"docs":" Component multiplied by the imaginary number `j`.\n","sig":null,"attributes":[{"value":"/ Component multiplied by the imaginary number `j`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":190722,"byte_end":190775,"line_start":241,"line_end":241,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2143},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":190856,"byte_end":190857,"line_start":244,"line_end":244,"column_start":9,"column_end":10},"name":"k","qualname":"::rotation::Rotation3D::k","value":"T","parent":{"krate":0,"index":2137},"children":[],"decl_id":null,"docs":" Component multiplied by the imaginary number `k`.\n","sig":null,"attributes":[{"value":"/ Component multiplied by the imaginary number `k`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":190794,"byte_end":190847,"line_start":243,"line_end":243,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2144},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":190893,"byte_end":190894,"line_start":246,"line_end":246,"column_start":9,"column_end":10},"name":"r","qualname":"::rotation::Rotation3D::r","value":"T","parent":{"krate":0,"index":2137},"children":[],"decl_id":null,"docs":" The real part.\n","sig":null,"attributes":[{"value":"/ The real part.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":190866,"byte_end":190884,"line_start":245,"line_end":245,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2145},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":190926,"byte_end":190931,"line_start":248,"line_end":248,"column_start":9,"column_end":14},"name":"_unit","qualname":"::rotation::Rotation3D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":2137},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2174},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":192325,"byte_end":192335,"line_start":299,"line_end":299,"column_start":12,"column_end":22},"name":"quaternion","qualname":"<Rotation3D<T, Src, Dst>>::quaternion","value":"pub fn quaternion(T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around from a quaternion representation.","sig":null,"attributes":[{"value":"/ Creates a rotation around from a quaternion representation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":191875,"byte_end":191938,"line_start":289,"line_end":289,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":191943,"byte_end":191946,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ The parameters are a, b, c and r compose the quaternion `a*i + b*j + c*k + r`","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":191951,"byte_end":192032,"line_start":291,"line_end":291,"column_start":5,"column_end":86}},{"value":"/ where `a`, `b` and `c` describe the vector part and the last parameter `r` is","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":192037,"byte_end":192118,"line_start":292,"line_end":292,"column_start":5,"column_end":86}},{"value":"/ the real part.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":192123,"byte_end":192141,"line_start":293,"line_end":293,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":192146,"byte_end":192149,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ The resulting quaternion is not necessarily normalized. See [`unit_quaternion`].","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":192154,"byte_end":192238,"line_start":295,"line_end":295,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":192243,"byte_end":192246,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ [`unit_quaternion`]: #method.unit_quaternion","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":192251,"byte_end":192299,"line_start":297,"line_end":297,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":192304,"byte_end":192313,"line_start":298,"line_end":298,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2175},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":192573,"byte_end":192581,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"identity","qualname":"<Rotation3D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Creates the identity rotation.\n","sig":null,"attributes":[{"value":"/ Creates the identity rotation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":192513,"byte_end":192547,"line_start":309,"line_end":309,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":192552,"byte_end":192561,"line_start":310,"line_end":310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2180},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":192858,"byte_end":192869,"line_start":325,"line_end":325,"column_start":12,"column_end":23},"name":"vector_part","qualname":"<Rotation3D<T, Src, Dst>>::vector_part","value":"pub fn vector_part(&Self) -> Vector3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector part (i, j, k) of this quaternion.\n","sig":null,"attributes":[{"value":"/ Returns the vector part (i, j, k) of this quaternion.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":192775,"byte_end":192832,"line_start":323,"line_end":323,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":192837,"byte_end":192846,"line_start":324,"line_end":324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2181},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193623,"byte_end":193632,"line_start":349,"line_end":349,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Rotation3D<T, Src, Dst>>::cast_unit","value":"pub fn cast_unit<Src2, Dst2>(&Self) -> Rotation3D<T, Src2, Dst2>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit, preserving the numeric value.","sig":null,"attributes":[{"value":"/ Cast the unit, preserving the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":192955,"byte_end":193003,"line_start":329,"line_end":329,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193008,"byte_end":193011,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193016,"byte_end":193029,"line_start":331,"line_end":331,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193034,"byte_end":193037,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193042,"byte_end":193053,"line_start":333,"line_end":333,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation3D;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193058,"byte_end":193087,"line_start":334,"line_end":334,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193092,"byte_end":193109,"line_start":335,"line_end":335,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193114,"byte_end":193131,"line_start":336,"line_end":336,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193136,"byte_end":193139,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ enum Local2 {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193144,"byte_end":193162,"line_start":338,"line_end":338,"column_start":5,"column_end":23}},{"value":"/ enum World2 {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193167,"byte_end":193185,"line_start":339,"line_end":339,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193190,"byte_end":193193,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation3D<_, Local, World> = Rotation3D::quaternion(1, 2, 3, 4);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193198,"byte_end":193281,"line_start":341,"line_end":341,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193286,"byte_end":193289,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.i, to_world.cast_unit::<Local2, World2>().i);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193294,"byte_end":193363,"line_start":343,"line_end":343,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(to_world.j, to_world.cast_unit::<Local2, World2>().j);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193368,"byte_end":193437,"line_start":344,"line_end":344,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(to_world.k, to_world.cast_unit::<Local2, World2>().k);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193442,"byte_end":193511,"line_start":345,"line_end":345,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(to_world.r, to_world.cast_unit::<Local2, World2>().r);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193516,"byte_end":193585,"line_start":346,"line_end":346,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193590,"byte_end":193597,"line_start":347,"line_end":347,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193602,"byte_end":193611,"line_start":348,"line_end":348,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2184},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194401,"byte_end":194411,"line_start":376,"line_end":376,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Rotation3D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Rotation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193849,"byte_end":193903,"line_start":359,"line_end":359,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193908,"byte_end":193911,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193916,"byte_end":193929,"line_start":361,"line_end":361,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193934,"byte_end":193937,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193942,"byte_end":193953,"line_start":363,"line_end":363,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation3D;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193958,"byte_end":193987,"line_start":364,"line_end":364,"column_start":5,"column_end":34}},{"value":"/ enum Local {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":193992,"byte_end":194009,"line_start":365,"line_end":365,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194014,"byte_end":194031,"line_start":366,"line_end":366,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194036,"byte_end":194039,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ let to_world: Rotation3D<_, Local, World> = Rotation3D::quaternion(1, 2, 3, 4);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194044,"byte_end":194127,"line_start":368,"line_end":368,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194132,"byte_end":194135,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_world.i, to_world.to_untyped().i);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194140,"byte_end":194192,"line_start":370,"line_end":370,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(to_world.j, to_world.to_untyped().j);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194197,"byte_end":194249,"line_start":371,"line_end":371,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(to_world.k, to_world.to_untyped().k);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194254,"byte_end":194306,"line_start":372,"line_end":372,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(to_world.r, to_world.to_untyped().r);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194311,"byte_end":194363,"line_start":373,"line_end":373,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194368,"byte_end":194375,"line_start":374,"line_end":374,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194380,"byte_end":194389,"line_start":375,"line_end":375,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2185},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":195166,"byte_end":195178,"line_start":398,"line_end":398,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Rotation3D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Rotation3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194500,"byte_end":194536,"line_start":380,"line_end":380,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194541,"byte_end":194544,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194549,"byte_end":194562,"line_start":382,"line_end":382,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194567,"byte_end":194570,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194575,"byte_end":194586,"line_start":384,"line_end":384,"column_start":5,"column_end":16}},{"value":"/ # use euclid::Rotation3D;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194591,"byte_end":194620,"line_start":385,"line_end":385,"column_start":5,"column_end":34}},{"value":"/ use euclid::UnknownUnit;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194625,"byte_end":194653,"line_start":386,"line_end":386,"column_start":5,"column_end":33}},{"value":"/ enum Local {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194658,"byte_end":194675,"line_start":387,"line_end":387,"column_start":5,"column_end":22}},{"value":"/ enum World {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194680,"byte_end":194697,"line_start":388,"line_end":388,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194702,"byte_end":194705,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ let rot: Rotation3D<_, UnknownUnit, UnknownUnit> = Rotation3D::quaternion(1, 2, 3, 4);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194710,"byte_end":194800,"line_start":390,"line_end":390,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194805,"byte_end":194808,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(rot.i, Rotation3D::<_, Local, World>::from_untyped(&rot).i);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194813,"byte_end":194888,"line_start":392,"line_end":392,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(rot.j, Rotation3D::<_, Local, World>::from_untyped(&rot).j);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194893,"byte_end":194968,"line_start":393,"line_end":393,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(rot.k, Rotation3D::<_, Local, World>::from_untyped(&rot).k);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":194973,"byte_end":195048,"line_start":394,"line_end":394,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(rot.r, Rotation3D::<_, Local, World>::from_untyped(&rot).r);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":195053,"byte_end":195128,"line_start":395,"line_end":395,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":195133,"byte_end":195140,"line_start":396,"line_end":396,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":195145,"byte_end":195154,"line_start":397,"line_end":397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2190},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":195665,"byte_end":195680,"line_start":413,"line_end":413,"column_start":12,"column_end":27},"name":"unit_quaternion","qualname":"<Rotation3D<T, Src, Dst>>::unit_quaternion","value":"pub fn unit_quaternion(T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around from a quaternion representation and normalizes it.","sig":null,"attributes":[{"value":"/ Creates a rotation around from a quaternion representation and normalizes it.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":195333,"byte_end":195414,"line_start":407,"line_end":407,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":195419,"byte_end":195422,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ The parameters are a, b, c and r compose the quaternion `a*i + b*j + c*k + r`","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":195427,"byte_end":195508,"line_start":409,"line_end":409,"column_start":5,"column_end":86}},{"value":"/ before normalization, where `a`, `b` and `c` describe the vector part and the","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":195513,"byte_end":195594,"line_start":410,"line_end":410,"column_start":5,"column_end":86}},{"value":"/ last parameter `r` is the real part.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":195599,"byte_end":195639,"line_start":411,"line_end":411,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":195644,"byte_end":195653,"line_start":412,"line_end":412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2191},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":195830,"byte_end":195841,"line_start":418,"line_end":418,"column_start":12,"column_end":23},"name":"around_axis","qualname":"<Rotation3D<T, Src, Dst>>::around_axis","value":"pub fn around_axis(Vector3D<T, Src>, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around a given axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around a given axis.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":195775,"byte_end":195818,"line_start":417,"line_end":417,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2192},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":196159,"byte_end":196167,"line_start":426,"line_end":426,"column_start":12,"column_end":20},"name":"around_x","qualname":"<Rotation3D<T, Src, Dst>>::around_x","value":"pub fn around_x(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around the x axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around the x axis.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":196106,"byte_end":196147,"line_start":425,"line_end":425,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2193},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":196432,"byte_end":196440,"line_start":434,"line_end":434,"column_start":12,"column_end":20},"name":"around_y","qualname":"<Rotation3D<T, Src, Dst>>::around_y","value":"pub fn around_y(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around the y axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around the y axis.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":196379,"byte_end":196420,"line_start":433,"line_end":433,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2194},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":196705,"byte_end":196713,"line_start":442,"line_end":442,"column_start":12,"column_end":20},"name":"around_z","qualname":"<Rotation3D<T, Src, Dst>>::around_z","value":"pub fn around_z(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation around the z axis.\n","sig":null,"attributes":[{"value":"/ Creates a rotation around the z axis.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":196652,"byte_end":196693,"line_start":441,"line_end":441,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2195},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":197273,"byte_end":197278,"line_start":456,"line_end":456,"column_start":12,"column_end":17},"name":"euler","qualname":"<Rotation3D<T, Src, Dst>>::euler","value":"pub fn euler(Angle<T>, Angle<T>, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a rotation from Euler angles.","sig":null,"attributes":[{"value":"/ Creates a rotation from Euler angles.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":196925,"byte_end":196966,"line_start":449,"line_end":449,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":196971,"byte_end":196974,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ The rotations are applied in roll then pitch then yaw order.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":196979,"byte_end":197043,"line_start":451,"line_end":451,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":197048,"byte_end":197051,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/  - Roll (also called bank) is a rotation around the x axis.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":197056,"byte_end":197119,"line_start":453,"line_end":453,"column_start":5,"column_end":68}},{"value":"/  - Pitch (also called bearing) is a rotation around the y axis.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":197124,"byte_end":197191,"line_start":454,"line_end":454,"column_start":5,"column_end":72}},{"value":"/  - Yaw (also called heading) is a rotation around the z axis.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":197196,"byte_end":197261,"line_start":455,"line_end":455,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2196},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":197844,"byte_end":197851,"line_start":473,"line_end":473,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Rotation3D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Rotation3D<T, Dst, Src>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the inverse of this rotation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":197777,"byte_end":197818,"line_start":471,"line_end":471,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":197823,"byte_end":197832,"line_start":472,"line_end":472,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2197},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":198032,"byte_end":198036,"line_start":479,"line_end":479,"column_start":12,"column_end":16},"name":"norm","qualname":"<Rotation3D<T, Src, Dst>>::norm","value":"pub fn norm(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the norm of this quaternion.\n","sig":null,"attributes":[{"value":"/ Computes the norm of this quaternion.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":197965,"byte_end":198006,"line_start":477,"line_end":477,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":198011,"byte_end":198020,"line_start":478,"line_end":478,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2198},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":198171,"byte_end":198182,"line_start":485,"line_end":485,"column_start":12,"column_end":23},"name":"square_norm","qualname":"<Rotation3D<T, Src, Dst>>::square_norm","value":"pub fn square_norm(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the squared norm of this quaternion.\n","sig":null,"attributes":[{"value":"/ Computes the squared norm of this quaternion.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":198096,"byte_end":198145,"line_start":483,"line_end":483,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":198150,"byte_end":198159,"line_start":484,"line_end":484,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2199},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":198450,"byte_end":198459,"line_start":493,"line_end":493,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Rotation3D<T, Src, Dst>>::normalize","value":"pub fn normalize(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a [unit quaternion] from this one.","sig":null,"attributes":[{"value":"/ Returns a [unit quaternion] from this one.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":198286,"byte_end":198332,"line_start":489,"line_end":489,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":198337,"byte_end":198340,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ [unit quaternion]: https://en.wikipedia.org/wiki/Quaternion#Unit_quaternion","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":198345,"byte_end":198424,"line_start":491,"line_end":491,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":198429,"byte_end":198438,"line_start":492,"line_end":492,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2200},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":198663,"byte_end":198676,"line_start":501,"line_end":501,"column_start":12,"column_end":25},"name":"is_normalized","qualname":"<Rotation3D<T, Src, Dst>>::is_normalized","value":"pub fn is_normalized(&Self) -> bool where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if [norm] of this quaternion is (approximately) one.","sig":null,"attributes":[{"value":"/ Returns `true` if [norm] of this quaternion is (approximately) one.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":198529,"byte_end":198600,"line_start":497,"line_end":497,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":198605,"byte_end":198608,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ [norm]: #method.norm","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":198613,"byte_end":198637,"line_start":499,"line_end":499,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":198642,"byte_end":198651,"line_start":500,"line_end":500,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2201},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":199001,"byte_end":199006,"line_start":512,"line_end":512,"column_start":12,"column_end":17},"name":"slerp","qualname":"<Rotation3D<T, Src, Dst>>::slerp","value":"pub fn slerp(&Self, &Self, T) -> Self where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Spherical linear interpolation between this rotation and another rotation.","sig":null,"attributes":[{"value":"/ Spherical linear interpolation between this rotation and another rotation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":198851,"byte_end":198929,"line_start":509,"line_end":509,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":198934,"byte_end":198937,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ `t` is expected to be between zero and one.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":198942,"byte_end":198989,"line_start":511,"line_end":511,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2202},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":200268,"byte_end":200272,"line_start":553,"line_end":553,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Rotation3D<T, Src, Dst>>::lerp","value":"pub fn lerp(&Self, &Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Basic Linear interpolation between this rotation and another rotation.\n","sig":null,"attributes":[{"value":"/ Basic Linear interpolation between this rotation and another rotation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":200168,"byte_end":200242,"line_start":551,"line_end":551,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":200247,"byte_end":200256,"line_start":552,"line_end":552,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2203},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":200580,"byte_end":200597,"line_start":561,"line_end":561,"column_start":12,"column_end":29},"name":"transform_point3d","qualname":"<Rotation3D<T, Src, Dst>>::transform_point3d","value":"pub fn transform_point3d(&Self, Point3D<T, Src>) -> Point3D<T, Dst> where\nT: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d point transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 3d point transformed by this rotation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":200409,"byte_end":200469,"line_start":558,"line_end":558,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":200474,"byte_end":200477,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":200482,"byte_end":200568,"line_start":560,"line_end":560,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":2204},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":201345,"byte_end":201362,"line_start":581,"line_end":581,"column_start":12,"column_end":29},"name":"transform_point2d","qualname":"<Rotation3D<T, Src, Dst>>::transform_point2d","value":"pub fn transform_point2d(&Self, Point2D<T, Src>) -> Point2D<T, Dst> where\nT: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d point transformed by this rotation then projected on the xy plane.","sig":null,"attributes":[{"value":"/ Returns the given 2d point transformed by this rotation then projected on the xy plane.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":201129,"byte_end":201220,"line_start":577,"line_end":577,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":201225,"byte_end":201228,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":201233,"byte_end":201319,"line_start":579,"line_end":579,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":201324,"byte_end":201333,"line_start":580,"line_end":580,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2205},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":201702,"byte_end":201720,"line_start":592,"line_end":592,"column_start":12,"column_end":30},"name":"transform_vector3d","qualname":"<Rotation3D<T, Src, Dst>>::transform_vector3d","value":"pub fn transform_vector3d(&Self, Vector3D<T, Src>) -> Vector3D<T, Dst> where\nT: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d vector transformed by this rotation.","sig":null,"attributes":[{"value":"/ Returns the given 3d vector transformed by this rotation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":201515,"byte_end":201576,"line_start":588,"line_end":588,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":201581,"byte_end":201584,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ The input vector must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":201589,"byte_end":201676,"line_start":590,"line_end":590,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":201681,"byte_end":201690,"line_start":591,"line_end":591,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2206},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":202105,"byte_end":202123,"line_start":603,"line_end":603,"column_start":12,"column_end":30},"name":"transform_vector2d","qualname":"<Rotation3D<T, Src, Dst>>::transform_vector2d","value":"pub fn transform_vector2d(&Self, Vector2D<T, Src>) -> Vector2D<T, Dst> where\nT: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d vector transformed by this rotation then projected on the xy plane.","sig":null,"attributes":[{"value":"/ Returns the given 2d vector transformed by this rotation then projected on the xy plane.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":201887,"byte_end":201979,"line_start":599,"line_end":599,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":201984,"byte_end":201987,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ The input vector must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":201992,"byte_end":202079,"line_start":601,"line_end":601,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":202084,"byte_end":202093,"line_start":602,"line_end":602,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2207},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":202362,"byte_end":202374,"line_start":612,"line_end":612,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Rotation3D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform3D<T, Src, Dst> where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this rotation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this rotation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":202281,"byte_end":202336,"line_start":610,"line_end":610,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":202341,"byte_end":202350,"line_start":611,"line_end":611,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2208},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":203486,"byte_end":203490,"line_start":656,"line_end":656,"column_start":12,"column_end":16},"name":"then","qualname":"<Rotation3D<T, Src, Dst>>::then","value":"pub fn then<NewDst>(&Self, &Rotation3D<T, Dst, NewDst>)\n-> Rotation3D<T, Src, NewDst> where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a rotation representing this rotation followed by the other rotation.\n","sig":null,"attributes":[{"value":"/ Returns a rotation representing this rotation followed by the other rotation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":203379,"byte_end":203460,"line_start":654,"line_end":654,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":203465,"byte_end":203474,"line_start":655,"line_end":655,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2282},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215716,"byte_end":215721,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"Scale","qualname":"::scale::Scale","value":"","parent":null,"children":[],"decl_id":null,"docs":" A scaling factor between two different units of measurement.","sig":null,"attributes":[{"value":"/ A scaling factor between two different units of measurement.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":214749,"byte_end":214813,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":214814,"byte_end":214817,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This is effectively a type-safe float, intended to be used in combination with other types like","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":214818,"byte_end":214917,"line_start":25,"line_end":25,"column_start":1,"column_end":100}},{"value":"/ `length::Length` to enforce conversion between systems of measurement at compile time.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":214918,"byte_end":215008,"line_start":26,"line_end":26,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215009,"byte_end":215012,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ `Src` and `Dst` represent the units before and after multiplying a value by a `Scale`. They","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215013,"byte_end":215108,"line_start":28,"line_end":28,"column_start":1,"column_end":96}},{"value":"/ may be types without values, such as empty enums.  For example:","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215109,"byte_end":215176,"line_start":29,"line_end":29,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215177,"byte_end":215180,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215181,"byte_end":215192,"line_start":31,"line_end":31,"column_start":1,"column_end":12}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215193,"byte_end":215215,"line_start":32,"line_end":32,"column_start":1,"column_end":23}},{"value":"/ use euclid::Length;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215216,"byte_end":215239,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/ enum Mm {};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215240,"byte_end":215255,"line_start":34,"line_end":34,"column_start":1,"column_end":16}},{"value":"/ enum Inch {};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215256,"byte_end":215273,"line_start":35,"line_end":35,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215274,"byte_end":215277,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let mm_per_inch: Scale<f32, Inch, Mm> = Scale::new(25.4);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215278,"byte_end":215339,"line_start":37,"line_end":37,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215340,"byte_end":215343,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let one_foot: Length<f32, Inch> = Length::new(12.0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215344,"byte_end":215400,"line_start":39,"line_end":39,"column_start":1,"column_end":57}},{"value":"/ let one_foot_in_mm: Length<f32, Mm> = one_foot * mm_per_inch;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215401,"byte_end":215466,"line_start":40,"line_end":40,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215467,"byte_end":215474,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215475,"byte_end":215485,"line_start":42,"line_end":42,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2287},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215735,"byte_end":215740,"line_start":51,"line_end":51,"column_start":31,"column_end":36},"name":"0","qualname":"::scale::Scale::0","value":"T","parent":{"krate":0,"index":2282},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2288},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215757,"byte_end":215784,"line_start":51,"line_end":51,"column_start":53,"column_end":80},"name":"1","qualname":"::scale::Scale::1","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":2282},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2293},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215858,"byte_end":215861,"line_start":55,"line_end":55,"column_start":18,"column_end":21},"name":"new","qualname":"<Scale<T, Src, Dst>>::new","value":"pub const fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215831,"byte_end":215840,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2294},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215981,"byte_end":215989,"line_start":61,"line_end":61,"column_start":12,"column_end":20},"name":"identity","qualname":"<Scale<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: One","parent":null,"children":[],"decl_id":null,"docs":" Creates an identity scale (1.0).\n","sig":null,"attributes":[{"value":"/ Creates an identity scale (1.0).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215919,"byte_end":215955,"line_start":59,"line_end":59,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215960,"byte_end":215969,"line_start":60,"line_end":60,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2295},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216441,"byte_end":216456,"line_start":82,"line_end":82,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Scale<T, Src, Dst>>::transform_point","value":"pub fn transform_point(Self, Point2D<T, Src>) -> Point2D<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given point transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given point transformed by this scale.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216071,"byte_end":216125,"line_start":68,"line_end":68,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216130,"byte_end":216133,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216138,"byte_end":216151,"line_start":70,"line_end":70,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216156,"byte_end":216159,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216164,"byte_end":216175,"line_start":72,"line_end":72,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, point2};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216180,"byte_end":216212,"line_start":73,"line_end":73,"column_start":5,"column_end":37}},{"value":"/ enum Mm {};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216217,"byte_end":216232,"line_start":74,"line_end":74,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216237,"byte_end":216252,"line_start":75,"line_end":75,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216257,"byte_end":216260,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216265,"byte_end":216316,"line_start":77,"line_end":77,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216321,"byte_end":216324,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_point(point2(42, -42)), point2(420, -420));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216329,"byte_end":216403,"line_start":79,"line_end":79,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216408,"byte_end":216415,"line_start":80,"line_end":80,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216420,"byte_end":216429,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2296},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216701,"byte_end":216718,"line_start":91,"line_end":91,"column_start":12,"column_end":29},"name":"transform_point3d","qualname":"<Scale<T, Src, Dst>>::transform_point3d","value":"pub fn transform_point3d(Self, Point3D<T, Src>) -> Point3D<T::Output, Dst>\nwhere T: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given point transformed by this scale.\n","sig":null,"attributes":[{"value":"/ Returns the given point transformed by this scale.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216621,"byte_end":216675,"line_start":89,"line_end":89,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216680,"byte_end":216689,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2297},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217267,"byte_end":217283,"line_start":112,"line_end":112,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<Scale<T, Src, Dst>>::transform_vector","value":"pub fn transform_vector(Self, Vector2D<T, Src>) -> Vector2D<T::Output, Dst>\nwhere T: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given vector transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given vector transformed by this scale.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216901,"byte_end":216956,"line_start":98,"line_end":98,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216961,"byte_end":216964,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216969,"byte_end":216982,"line_start":100,"line_end":100,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216987,"byte_end":216990,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":216995,"byte_end":217006,"line_start":102,"line_end":102,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, vec2};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217011,"byte_end":217041,"line_start":103,"line_end":103,"column_start":5,"column_end":35}},{"value":"/ enum Mm {};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217046,"byte_end":217061,"line_start":104,"line_end":104,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217066,"byte_end":217081,"line_start":105,"line_end":105,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217086,"byte_end":217089,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217094,"byte_end":217145,"line_start":107,"line_end":107,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217150,"byte_end":217153,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_vector(vec2(42, -42)), vec2(420, -420));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217158,"byte_end":217229,"line_start":109,"line_end":109,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217234,"byte_end":217241,"line_start":110,"line_end":110,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217246,"byte_end":217255,"line_start":111,"line_end":111,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2298},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217812,"byte_end":217826,"line_start":133,"line_end":133,"column_start":12,"column_end":26},"name":"transform_size","qualname":"<Scale<T, Src, Dst>>::transform_size","value":"pub fn transform_size(Self, Size2D<T, Src>) -> Size2D<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given vector transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given vector transformed by this scale.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217445,"byte_end":217500,"line_start":119,"line_end":119,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217505,"byte_end":217508,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217513,"byte_end":217526,"line_start":121,"line_end":121,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217531,"byte_end":217534,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217539,"byte_end":217550,"line_start":123,"line_end":123,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, size2};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217555,"byte_end":217586,"line_start":124,"line_end":124,"column_start":5,"column_end":36}},{"value":"/ enum Mm {};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217591,"byte_end":217606,"line_start":125,"line_end":125,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217611,"byte_end":217626,"line_start":126,"line_end":126,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217631,"byte_end":217634,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217639,"byte_end":217690,"line_start":128,"line_end":128,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217695,"byte_end":217698,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_size(size2(42, -42)), size2(420, -420));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217703,"byte_end":217774,"line_start":130,"line_end":130,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217779,"byte_end":217786,"line_start":131,"line_end":131,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217791,"byte_end":217800,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2299},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218371,"byte_end":218385,"line_start":154,"line_end":154,"column_start":12,"column_end":26},"name":"transform_rect","qualname":"<Scale<T, Src, Dst>>::transform_rect","value":"pub fn transform_rect(Self, &Rect<T, Src>) -> Rect<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given rect transformed by this scale.","sig":null,"attributes":[{"value":"/ Returns the given rect transformed by this scale.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":217994,"byte_end":218047,"line_start":140,"line_end":140,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218052,"byte_end":218055,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218060,"byte_end":218073,"line_start":142,"line_end":142,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218078,"byte_end":218081,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218086,"byte_end":218097,"line_start":144,"line_end":144,"column_start":5,"column_end":16}},{"value":"/ use euclid::{Scale, rect};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218102,"byte_end":218132,"line_start":145,"line_end":145,"column_start":5,"column_end":35}},{"value":"/ enum Mm {};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218137,"byte_end":218152,"line_start":146,"line_end":146,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218157,"byte_end":218172,"line_start":147,"line_end":147,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218177,"byte_end":218180,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218185,"byte_end":218236,"line_start":149,"line_end":149,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218241,"byte_end":218244,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.transform_rect(&rect(1, 2, 42, -42)), rect(10, 20, 420, -420));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218249,"byte_end":218333,"line_start":151,"line_end":151,"column_start":5,"column_end":89}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218338,"byte_end":218345,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218350,"byte_end":218359,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2300},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218685,"byte_end":218700,"line_start":166,"line_end":166,"column_start":12,"column_end":27},"name":"transform_box2d","qualname":"<Scale<T, Src, Dst>>::transform_box2d","value":"pub fn transform_box2d(Self, &Box2D<T, Src>) -> Box2D<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given box transformed by this scale.\n","sig":null,"attributes":[{"value":"/ Returns the given box transformed by this scale.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218607,"byte_end":218659,"line_start":164,"line_end":164,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218664,"byte_end":218673,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2301},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218997,"byte_end":219012,"line_start":178,"line_end":178,"column_start":12,"column_end":27},"name":"transform_box3d","qualname":"<Scale<T, Src, Dst>>::transform_box3d","value":"pub fn transform_box3d(Self, &Box3D<T, Src>) -> Box3D<T::Output, Dst> where\nT: Copy + Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns the given box transformed by this scale.\n","sig":null,"attributes":[{"value":"/ Returns the given box transformed by this scale.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218919,"byte_end":218971,"line_start":176,"line_end":176,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":218976,"byte_end":218985,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2302},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219753,"byte_end":219764,"line_start":206,"line_end":206,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Scale<T, Src, Dst>>::is_identity","value":"pub fn is_identity(Self) -> bool where T: PartialEq + One","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this scale has no effect.","sig":null,"attributes":[{"value":"/ Returns `true` if this scale has no effect.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219235,"byte_end":219282,"line_start":188,"line_end":188,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219287,"byte_end":219290,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219295,"byte_end":219308,"line_start":190,"line_end":190,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219313,"byte_end":219316,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219321,"byte_end":219332,"line_start":192,"line_end":192,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219337,"byte_end":219359,"line_start":193,"line_end":193,"column_start":5,"column_end":27}},{"value":"/ use euclid::num::One;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219364,"byte_end":219389,"line_start":194,"line_end":194,"column_start":5,"column_end":30}},{"value":"/ enum Mm {};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219394,"byte_end":219409,"line_start":195,"line_end":195,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219414,"byte_end":219429,"line_start":196,"line_end":196,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219434,"byte_end":219437,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ let cm_per_mm: Scale<f32, Mm, Cm> = Scale::new(0.1);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219442,"byte_end":219498,"line_start":198,"line_end":198,"column_start":5,"column_end":61}},{"value":"/ let mm_per_mm: Scale<f32, Mm, Mm> = Scale::new(1.0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219503,"byte_end":219559,"line_start":199,"line_end":199,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219564,"byte_end":219567,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(cm_per_mm.is_identity(), false);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219572,"byte_end":219619,"line_start":201,"line_end":201,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(mm_per_mm.is_identity(), true);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219624,"byte_end":219670,"line_start":202,"line_end":202,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(mm_per_mm, Scale::one());","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219675,"byte_end":219715,"line_start":203,"line_end":203,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219720,"byte_end":219727,"line_start":204,"line_end":204,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219732,"byte_end":219741,"line_start":205,"line_end":205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2303},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219934,"byte_end":219937,"line_start":215,"line_end":215,"column_start":12,"column_end":15},"name":"get","qualname":"<Scale<T, Src, Dst>>::get","value":"pub fn get(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying scalar scale factor.\n","sig":null,"attributes":[{"value":"/ Returns the underlying scalar scale factor.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219861,"byte_end":219908,"line_start":213,"line_end":213,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219913,"byte_end":219922,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2304},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220289,"byte_end":220296,"line_start":232,"line_end":232,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Scale<T, Src, Dst>>::inverse","value":"pub fn inverse(Self) -> Scale<T::Output, Dst, Src> where T: One + Div","parent":null,"children":[],"decl_id":null,"docs":" The inverse Scale (1.0 / self).","sig":null,"attributes":[{"value":"/ The inverse Scale (1.0 / self).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":219977,"byte_end":220012,"line_start":219,"line_end":219,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220017,"byte_end":220020,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220025,"byte_end":220038,"line_start":221,"line_end":221,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220043,"byte_end":220046,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220051,"byte_end":220062,"line_start":223,"line_end":223,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220067,"byte_end":220089,"line_start":224,"line_end":224,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220094,"byte_end":220109,"line_start":225,"line_end":225,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220114,"byte_end":220129,"line_start":226,"line_end":226,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220134,"byte_end":220137,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ let cm_per_mm: Scale<f32, Cm, Mm> = Scale::new(0.1);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220142,"byte_end":220198,"line_start":228,"line_end":228,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220203,"byte_end":220206,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(cm_per_mm.inverse(), Scale::new(10.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220211,"byte_end":220265,"line_start":230,"line_end":230,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220270,"byte_end":220277,"line_start":231,"line_end":231,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2309},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221377,"byte_end":221381,"line_start":270,"line_end":270,"column_start":12,"column_end":16},"name":"cast","qualname":"<Scale<T, Src, Dst>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Scale<NewT, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220498,"byte_end":220572,"line_start":242,"line_end":242,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220577,"byte_end":220580,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220585,"byte_end":220597,"line_start":244,"line_end":244,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220602,"byte_end":220605,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ If the source value cannot be represented by the target type `NewT`, then","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220610,"byte_end":220687,"line_start":246,"line_end":246,"column_start":5,"column_end":82}},{"value":"/ method panics. Use `try_cast` if that must be case.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220692,"byte_end":220747,"line_start":247,"line_end":247,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220752,"byte_end":220755,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220760,"byte_end":220773,"line_start":249,"line_end":249,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220778,"byte_end":220781,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220786,"byte_end":220797,"line_start":251,"line_end":251,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220802,"byte_end":220824,"line_start":252,"line_end":252,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220829,"byte_end":220844,"line_start":253,"line_end":253,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220849,"byte_end":220864,"line_start":254,"line_end":254,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220869,"byte_end":220872,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220877,"byte_end":220928,"line_start":256,"line_end":256,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220933,"byte_end":220936,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.cast::<f32>(), Scale::new(10.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220941,"byte_end":220995,"line_start":258,"line_end":258,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221000,"byte_end":221007,"line_start":259,"line_end":259,"column_start":5,"column_end":12}},{"value":"/ That conversion will panic, because `i32` not enough to store such big numbers:","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221012,"byte_end":221095,"line_start":260,"line_end":260,"column_start":5,"column_end":88}},{"value":"/ ```rust,should_panic","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221100,"byte_end":221124,"line_start":261,"line_end":261,"column_start":5,"column_end":29}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221129,"byte_end":221151,"line_start":262,"line_end":262,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};// millimeter = 10^-2 meters","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221156,"byte_end":221199,"line_start":263,"line_end":263,"column_start":5,"column_end":48}},{"value":"/ enum Em {};// exameter   = 10^18 meters","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221204,"byte_end":221247,"line_start":264,"line_end":264,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221252,"byte_end":221255,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ // Panics","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221260,"byte_end":221273,"line_start":266,"line_end":266,"column_start":5,"column_end":18}},{"value":"/ let to_em: Scale<i32, Mm, Em> = Scale::new(10e20).cast();","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221278,"byte_end":221339,"line_start":267,"line_end":267,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221344,"byte_end":221351,"line_start":268,"line_end":268,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221356,"byte_end":221365,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2311},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":222154,"byte_end":222162,"line_start":293,"line_end":293,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Scale<T, Src, Dst>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Scale<NewT, Src, Dst>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n If the source value cannot be represented by the target type `NewT`, then `None`\n is returned.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221474,"byte_end":221557,"line_start":274,"line_end":274,"column_start":5,"column_end":88}},{"value":"/ If the source value cannot be represented by the target type `NewT`, then `None`","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221562,"byte_end":221646,"line_start":275,"line_end":275,"column_start":5,"column_end":89}},{"value":"/ is returned.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221651,"byte_end":221667,"line_start":276,"line_end":276,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221672,"byte_end":221675,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221680,"byte_end":221693,"line_start":278,"line_end":278,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221698,"byte_end":221701,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221706,"byte_end":221717,"line_start":280,"line_end":280,"column_start":5,"column_end":16}},{"value":"/ use euclid::Scale;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221722,"byte_end":221744,"line_start":281,"line_end":281,"column_start":5,"column_end":27}},{"value":"/ enum Mm {};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221749,"byte_end":221764,"line_start":282,"line_end":282,"column_start":5,"column_end":20}},{"value":"/ enum Cm {};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221769,"byte_end":221784,"line_start":283,"line_end":283,"column_start":5,"column_end":20}},{"value":"/ enum Em {};// Exameter = 10^18 meters","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221789,"byte_end":221830,"line_start":284,"line_end":284,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221835,"byte_end":221838,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ let to_mm: Scale<i32, Cm, Mm> = Scale::new(10);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221843,"byte_end":221894,"line_start":286,"line_end":286,"column_start":5,"column_end":56}},{"value":"/ let to_em: Scale<f32, Mm, Em> = Scale::new(10e20);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221899,"byte_end":221953,"line_start":287,"line_end":287,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221958,"byte_end":221961,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(to_mm.try_cast::<f32>(), Some(Scale::new(10.0)));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":221966,"byte_end":222030,"line_start":289,"line_end":289,"column_start":5,"column_end":69}},{"value":"/ // Integer to small to store that number","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":222035,"byte_end":222079,"line_start":290,"line_end":290,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(to_em.try_cast::<i32>(), None);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":222084,"byte_end":222130,"line_start":291,"line_end":291,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":222135,"byte_end":222142,"line_start":292,"line_end":292,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2429},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":226696,"byte_end":226709,"line_start":33,"line_end":33,"column_start":12,"column_end":25},"name":"SideOffsets2D","qualname":"::side_offsets::SideOffsets2D","value":"SideOffsets2D { top, right, bottom, left, _unit }","parent":null,"children":[{"krate":0,"index":2432},{"krate":0,"index":2433},{"krate":0,"index":2434},{"krate":0,"index":2435},{"krate":0,"index":2436}],"decl_id":null,"docs":" A group of 2D side offsets, which correspond to top/right/bottom/left for borders, padding,\n and margins in CSS, optionally tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A group of 2D side offsets, which correspond to top/right/bottom/left for borders, padding,","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":226340,"byte_end":226435,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"/ and margins in CSS, optionally tagged with a unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":226436,"byte_end":226490,"line_start":26,"line_end":26,"column_start":1,"column_end":55}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":226491,"byte_end":226501,"line_start":27,"line_end":27,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2432},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":226726,"byte_end":226729,"line_start":34,"line_end":34,"column_start":9,"column_end":12},"name":"top","qualname":"::side_offsets::SideOffsets2D::top","value":"T","parent":{"krate":0,"index":2429},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2433},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":226742,"byte_end":226747,"line_start":35,"line_end":35,"column_start":9,"column_end":14},"name":"right","qualname":"::side_offsets::SideOffsets2D::right","value":"T","parent":{"krate":0,"index":2429},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2434},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":226760,"byte_end":226766,"line_start":36,"line_end":36,"column_start":9,"column_end":15},"name":"bottom","qualname":"::side_offsets::SideOffsets2D::bottom","value":"T","parent":{"krate":0,"index":2429},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2435},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":226779,"byte_end":226783,"line_start":37,"line_end":37,"column_start":9,"column_end":13},"name":"left","qualname":"::side_offsets::SideOffsets2D::left","value":"T","parent":{"krate":0,"index":2429},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2436},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":226815,"byte_end":226820,"line_start":39,"line_end":39,"column_start":9,"column_end":14},"name":"_unit","qualname":"::side_offsets::SideOffsets2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":2429},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2467},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":228991,"byte_end":228994,"line_start":127,"line_end":127,"column_start":18,"column_end":21},"name":"new","qualname":"<SideOffsets2D<T, U>>::new","value":"pub const fn new(T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking a scalar for each side.","sig":null,"attributes":[{"value":"/ Constructor taking a scalar for each side.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":228824,"byte_end":228870,"line_start":123,"line_end":123,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":228875,"byte_end":228878,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ Sides are specified in top-right-bottom-left order following","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":228883,"byte_end":228947,"line_start":125,"line_end":125,"column_start":5,"column_end":69}},{"value":"/ CSS's convention.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":228952,"byte_end":228973,"line_start":126,"line_end":126,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2468},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":229361,"byte_end":229373,"line_start":141,"line_end":141,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<SideOffsets2D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>, Length<T, U>, Length<T, U>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking a typed Length for each side.","sig":null,"attributes":[{"value":"/ Constructor taking a typed Length for each side.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":229194,"byte_end":229246,"line_start":137,"line_end":137,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":229251,"byte_end":229254,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ Sides are specified in top-right-bottom-left order following","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":229259,"byte_end":229323,"line_start":139,"line_end":139,"column_start":5,"column_end":69}},{"value":"/ CSS's convention.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":229328,"byte_end":229349,"line_start":140,"line_end":140,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2469},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":229869,"byte_end":229887,"line_start":155,"line_end":155,"column_start":12,"column_end":30},"name":"from_vectors_outer","qualname":"<SideOffsets2D<T, U>>::from_vectors_outer","value":"pub fn from_vectors_outer(Vector2D<T, U>, Vector2D<T, U>) -> Self where\nT: Neg<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Construct side offsets from min and a max vector offsets.","sig":null,"attributes":[{"value":"/ Construct side offsets from min and a max vector offsets.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":229577,"byte_end":229638,"line_start":150,"line_end":150,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":229643,"byte_end":229646,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ The outer rect of the resulting side offsets is equivalent to translating","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":229651,"byte_end":229728,"line_start":152,"line_end":152,"column_start":5,"column_end":82}},{"value":"/ a rectangle's upper-left corner with the min vector and translating the","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":229733,"byte_end":229808,"line_start":153,"line_end":153,"column_start":5,"column_end":80}},{"value":"/ bottom-right corner with the max vector.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":229813,"byte_end":229857,"line_start":154,"line_end":154,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2470},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":230455,"byte_end":230473,"line_start":173,"line_end":173,"column_start":12,"column_end":30},"name":"from_vectors_inner","qualname":"<SideOffsets2D<T, U>>::from_vectors_inner","value":"pub fn from_vectors_inner(Vector2D<T, U>, Vector2D<T, U>) -> Self where\nT: Neg<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Construct side offsets from min and a max vector offsets.","sig":null,"attributes":[{"value":"/ Construct side offsets from min and a max vector offsets.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":230163,"byte_end":230224,"line_start":168,"line_end":168,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":230229,"byte_end":230232,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ The inner rect of the resulting side offsets is equivalent to translating","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":230237,"byte_end":230314,"line_start":170,"line_end":170,"column_start":5,"column_end":82}},{"value":"/ a rectangle's upper-left corner with the min vector and translating the","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":230319,"byte_end":230394,"line_start":171,"line_end":171,"column_start":5,"column_end":80}},{"value":"/ bottom-right corner with the max vector.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":230399,"byte_end":230443,"line_start":172,"line_end":172,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2471},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":230804,"byte_end":230808,"line_start":187,"line_end":187,"column_start":12,"column_end":16},"name":"zero","qualname":"<SideOffsets2D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all sides to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all sides to zero.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":230749,"byte_end":230792,"line_start":186,"line_end":186,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2472},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":231002,"byte_end":231009,"line_start":194,"line_end":194,"column_start":12,"column_end":19},"name":"is_zero","qualname":"<SideOffsets2D<T, U>>::is_zero","value":"pub fn is_zero(&Self) -> bool where T: Zero + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all side offsets are zero.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all side offsets are zero.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":230942,"byte_end":230990,"line_start":193,"line_end":193,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2473},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":231298,"byte_end":231310,"line_start":203,"line_end":203,"column_start":12,"column_end":24},"name":"new_all_same","qualname":"<SideOffsets2D<T, U>>::new_all_same","value":"pub fn new_all_same(T) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting the same value to all sides, taking a scalar value directly.\n","sig":null,"attributes":[{"value":"/ Constructor setting the same value to all sides, taking a scalar value directly.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":231202,"byte_end":231286,"line_start":202,"line_end":202,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2474},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":231501,"byte_end":231521,"line_start":210,"line_end":210,"column_start":12,"column_end":32},"name":"from_length_all_same","qualname":"<SideOffsets2D<T, U>>::from_length_all_same","value":"pub fn from_length_all_same(Length<T, U>) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting the same value to all sides, taking a typed Length.\n","sig":null,"attributes":[{"value":"/ Constructor setting the same value to all sides, taking a typed Length.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":231414,"byte_end":231489,"line_start":209,"line_end":209,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2475},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":231639,"byte_end":231649,"line_start":216,"line_end":216,"column_start":12,"column_end":22},"name":"horizontal","qualname":"<SideOffsets2D<T, U>>::horizontal","value":"pub fn horizontal(&Self) -> T where T: Copy + Add<T, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2476},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":231760,"byte_end":231768,"line_start":222,"line_end":222,"column_start":12,"column_end":20},"name":"vertical","qualname":"<SideOffsets2D<T, U>>::vertical","value":"pub fn vertical(&Self) -> T where T: Copy + Add<T, Output = T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2615},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":238521,"byte_end":238527,"line_start":32,"line_end":32,"column_start":12,"column_end":18},"name":"Size2D","qualname":"::size::Size2D","value":"Size2D { width, height, _unit }","parent":null,"children":[{"krate":0,"index":2618},{"krate":0,"index":2619},{"krate":0,"index":2620}],"decl_id":null,"docs":" A 2d size tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 2d size tagged with a unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":238465,"byte_end":238498,"line_start":30,"line_end":30,"column_start":1,"column_end":34}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":238499,"byte_end":238509,"line_start":31,"line_end":31,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2618},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":238636,"byte_end":238641,"line_start":34,"line_end":34,"column_start":9,"column_end":14},"name":"width","qualname":"::size::Size2D::width","value":"T","parent":{"krate":0,"index":2615},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `x` axis (usually horizontal).\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `x` axis (usually horizontal).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":238540,"byte_end":238627,"line_start":33,"line_end":33,"column_start":5,"column_end":92}}]},{"kind":"Field","id":{"krate":0,"index":2619},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":238744,"byte_end":238750,"line_start":36,"line_end":36,"column_start":9,"column_end":15},"name":"height","qualname":"::size::Size2D::height","value":"T","parent":{"krate":0,"index":2615},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `y` axis (usually vertical).\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `y` axis (usually vertical).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":238650,"byte_end":238735,"line_start":35,"line_end":35,"column_start":5,"column_end":90}}]},{"kind":"Field","id":{"krate":0,"index":2620},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":238782,"byte_end":238787,"line_start":38,"line_end":38,"column_start":9,"column_end":14},"name":"_unit","qualname":"::size::Size2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":2615},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2651},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":241269,"byte_end":241273,"line_start":142,"line_end":142,"column_start":12,"column_end":16},"name":"zero","qualname":"<Size2D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Zero::zero()`] but available without importing trait.","sig":null,"attributes":[{"value":"/ The same as [`Zero::zero()`] but available without importing trait.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":241102,"byte_end":241173,"line_start":138,"line_end":138,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":241178,"byte_end":241181,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ [`Zero::zero()`]: ./num/trait.Zero.html#tymethod.zero","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":241186,"byte_end":241243,"line_start":140,"line_end":140,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":241248,"byte_end":241257,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2652},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":241445,"byte_end":241448,"line_start":151,"line_end":151,"column_start":18,"column_end":21},"name":"new","qualname":"<Size2D<T, U>>::new","value":"pub const fn new(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":241376,"byte_end":241413,"line_start":149,"line_end":149,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":241418,"byte_end":241427,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2653},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":241667,"byte_end":241679,"line_start":160,"line_end":160,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Size2D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar strongly typed lengths.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar strongly typed lengths.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":241588,"byte_end":241641,"line_start":158,"line_end":158,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":241646,"byte_end":241655,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2654},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":241866,"byte_end":241871,"line_start":166,"line_end":166,"column_start":12,"column_end":17},"name":"splat","qualname":"<Size2D<T, U>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting all components to the same value.\n","sig":null,"attributes":[{"value":"/ Constructor setting all components to the same value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":241783,"byte_end":241840,"line_start":164,"line_end":164,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":241845,"byte_end":241854,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2655},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242105,"byte_end":242117,"line_start":179,"line_end":179,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Size2D<T, U>>::from_untyped","value":"pub fn from_untyped(Size2D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242043,"byte_end":242079,"line_start":177,"line_end":177,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242084,"byte_end":242093,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2659},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242335,"byte_end":242343,"line_start":187,"line_end":187,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Size2D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Return this size as an array of two elements (width, then height).\n","sig":null,"attributes":[{"value":"/ Return this size as an array of two elements (width, then height).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242239,"byte_end":242309,"line_start":185,"line_end":185,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242314,"byte_end":242323,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2661},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242502,"byte_end":242510,"line_start":193,"line_end":193,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Size2D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Return this size as a tuple of two elements (width, then height).\n","sig":null,"attributes":[{"value":"/ Return this size as a tuple of two elements (width, then height).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242407,"byte_end":242476,"line_start":191,"line_end":191,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242481,"byte_end":242490,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2662},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242655,"byte_end":242664,"line_start":199,"line_end":199,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Size2D<T, U>>::to_vector","value":"pub fn to_vector(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Return this size as a vector with width and height.\n","sig":null,"attributes":[{"value":"/ Return this size as a vector with width and height.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242574,"byte_end":242629,"line_start":197,"line_end":197,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242634,"byte_end":242643,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2663},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242820,"byte_end":242830,"line_start":205,"line_end":205,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Size2D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Size2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242740,"byte_end":242794,"line_start":203,"line_end":203,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242799,"byte_end":242808,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2664},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242944,"byte_end":242953,"line_start":211,"line_end":211,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Size2D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Size2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242901,"byte_end":242918,"line_start":209,"line_end":209,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242923,"byte_end":242932,"line_start":210,"line_end":210,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2666},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243396,"byte_end":243401,"line_start":227,"line_end":227,"column_start":12,"column_end":17},"name":"round","qualname":"<Size2D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243037,"byte_end":243092,"line_start":215,"line_end":215,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243097,"byte_end":243100,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243105,"byte_end":243180,"line_start":217,"line_end":217,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243185,"byte_end":243188,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243193,"byte_end":243204,"line_start":219,"line_end":219,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size2;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243209,"byte_end":243233,"line_start":220,"line_end":220,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243238,"byte_end":243252,"line_start":221,"line_end":221,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243257,"byte_end":243260,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size2::<_, Mm>(-0.1, -0.8).round(), size2::<_, Mm>(0.0, -1.0))","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243265,"byte_end":243342,"line_start":223,"line_end":223,"column_start":5,"column_end":82}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243347,"byte_end":243354,"line_start":224,"line_end":224,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243359,"byte_end":243368,"line_start":225,"line_end":225,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243373,"byte_end":243384,"line_start":226,"line_end":226,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2667},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243915,"byte_end":243919,"line_start":246,"line_end":246,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Size2D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243522,"byte_end":243613,"line_start":234,"line_end":234,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243618,"byte_end":243621,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243626,"byte_end":243701,"line_start":236,"line_end":236,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243706,"byte_end":243709,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243714,"byte_end":243725,"line_start":238,"line_end":238,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size2;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243730,"byte_end":243754,"line_start":239,"line_end":239,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243759,"byte_end":243773,"line_start":240,"line_end":240,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243778,"byte_end":243781,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size2::<_, Mm>(-0.1, -0.8).ceil(), size2::<_, Mm>(0.0, 0.0))","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243786,"byte_end":243861,"line_start":242,"line_end":242,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243866,"byte_end":243873,"line_start":243,"line_end":243,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243878,"byte_end":243887,"line_start":244,"line_end":244,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":243892,"byte_end":243903,"line_start":245,"line_end":245,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2668},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244430,"byte_end":244435,"line_start":265,"line_end":265,"column_start":12,"column_end":17},"name":"floor","qualname":"<Size2D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244037,"byte_end":244125,"line_start":253,"line_end":253,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244130,"byte_end":244133,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244138,"byte_end":244213,"line_start":255,"line_end":255,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244218,"byte_end":244221,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244226,"byte_end":244237,"line_start":257,"line_end":257,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size2;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244242,"byte_end":244266,"line_start":258,"line_end":258,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244271,"byte_end":244285,"line_start":259,"line_end":259,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244290,"byte_end":244293,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size2::<_, Mm>(-0.1, -0.8).floor(), size2::<_, Mm>(-1.0, -1.0))","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244298,"byte_end":244376,"line_start":261,"line_end":261,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244381,"byte_end":244388,"line_start":262,"line_end":262,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244393,"byte_end":244402,"line_start":263,"line_end":263,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244407,"byte_end":244418,"line_start":264,"line_end":264,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2669},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244623,"byte_end":244627,"line_start":273,"line_end":273,"column_start":12,"column_end":16},"name":"area","qualname":"<Size2D<T, U>>::area","value":"pub fn area(Self) -> T::Output where T: Mul","parent":null,"children":[],"decl_id":null,"docs":" Returns result of multiplication of both components\n","sig":null,"attributes":[{"value":"/ Returns result of multiplication of both components","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244556,"byte_end":244611,"line_start":272,"line_end":272,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2670},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":245366,"byte_end":245370,"line_start":298,"line_end":298,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Size2D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate each component between this size and another size.","sig":null,"attributes":[{"value":"/ Linearly interpolate each component between this size and another size.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244723,"byte_end":244798,"line_start":280,"line_end":280,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244803,"byte_end":244806,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244811,"byte_end":244824,"line_start":282,"line_end":282,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244829,"byte_end":244832,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244837,"byte_end":244848,"line_start":284,"line_end":284,"column_start":5,"column_end":16}},{"value":"/ use euclid::size2;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244853,"byte_end":244875,"line_start":285,"line_end":285,"column_start":5,"column_end":27}},{"value":"/ use euclid::default::Size2D;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244880,"byte_end":244912,"line_start":286,"line_end":286,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244917,"byte_end":244920,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ let from: Size2D<_> = size2(0.0, 10.0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244925,"byte_end":244968,"line_start":288,"line_end":288,"column_start":5,"column_end":48}},{"value":"/ let to:  Size2D<_> = size2(8.0, -4.0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":244973,"byte_end":245015,"line_start":289,"line_end":289,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":245020,"byte_end":245023,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), size2(-8.0,  24.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":245028,"byte_end":245084,"line_start":291,"line_end":291,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  0.0), size2( 0.0,  10.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":245089,"byte_end":245145,"line_start":292,"line_end":292,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  0.5), size2( 4.0,   3.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":245150,"byte_end":245206,"line_start":293,"line_end":293,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  1.0), size2( 8.0,  -4.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":245211,"byte_end":245267,"line_start":294,"line_end":294,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(from.lerp(to,  2.0), size2(16.0, -18.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":245272,"byte_end":245328,"line_start":295,"line_end":295,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":245333,"byte_end":245340,"line_start":296,"line_end":296,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":245345,"byte_end":245354,"line_start":297,"line_end":297,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2674},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":245992,"byte_end":245996,"line_start":314,"line_end":314,"column_start":12,"column_end":16},"name":"cast","qualname":"<Size2D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Size2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":245612,"byte_end":245686,"line_start":308,"line_end":308,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":245691,"byte_end":245694,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":245699,"byte_end":245786,"line_start":310,"line_end":310,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":245791,"byte_end":245879,"line_start":311,"line_end":311,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":245884,"byte_end":245966,"line_start":312,"line_end":312,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":245971,"byte_end":245980,"line_start":313,"line_end":313,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2676},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":246458,"byte_end":246466,"line_start":323,"line_end":323,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Size2D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Size2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":246083,"byte_end":246166,"line_start":318,"line_end":318,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":246171,"byte_end":246174,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":246179,"byte_end":246266,"line_start":320,"line_end":320,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":246271,"byte_end":246359,"line_start":321,"line_end":321,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":246364,"byte_end":246446,"line_start":322,"line_end":322,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2678},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":246793,"byte_end":246799,"line_start":334,"line_end":334,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Size2D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Size2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` size.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":246739,"byte_end":246767,"line_start":332,"line_end":332,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":246772,"byte_end":246781,"line_start":333,"line_end":333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2679},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":246911,"byte_end":246917,"line_start":340,"line_end":340,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Size2D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Size2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` size.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":246857,"byte_end":246885,"line_start":338,"line_end":338,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":246890,"byte_end":246899,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2680},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247266,"byte_end":247274,"line_start":350,"line_end":350,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Size2D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Size2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `uint` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `uint` size, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":246975,"byte_end":247032,"line_start":344,"line_end":344,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247037,"byte_end":247040,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247045,"byte_end":247120,"line_start":346,"line_end":346,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247125,"byte_end":247199,"line_start":347,"line_end":347,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247204,"byte_end":247240,"line_start":348,"line_end":348,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247245,"byte_end":247254,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2681},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247624,"byte_end":247630,"line_start":360,"line_end":360,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Size2D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Size2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` size, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247334,"byte_end":247390,"line_start":354,"line_end":354,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247395,"byte_end":247398,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247403,"byte_end":247478,"line_start":356,"line_end":356,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247483,"byte_end":247557,"line_start":357,"line_end":357,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247562,"byte_end":247598,"line_start":358,"line_end":358,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247603,"byte_end":247612,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2682},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247978,"byte_end":247984,"line_start":370,"line_end":370,"column_start":12,"column_end":18},"name":"to_u64","qualname":"<Size2D<T, U>>::to_u64","value":"pub fn to_u64(Self) -> Size2D<u64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u64` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u64` size, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247688,"byte_end":247744,"line_start":364,"line_end":364,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247749,"byte_end":247752,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247757,"byte_end":247832,"line_start":366,"line_end":366,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247837,"byte_end":247911,"line_start":367,"line_end":367,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247916,"byte_end":247952,"line_start":368,"line_end":368,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":247957,"byte_end":247966,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2683},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248332,"byte_end":248338,"line_start":380,"line_end":380,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Size2D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Size2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` size, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248042,"byte_end":248098,"line_start":374,"line_end":374,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248103,"byte_end":248106,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248111,"byte_end":248186,"line_start":376,"line_end":376,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248191,"byte_end":248265,"line_start":377,"line_end":377,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248270,"byte_end":248306,"line_start":378,"line_end":378,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248311,"byte_end":248320,"line_start":379,"line_end":379,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2684},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248686,"byte_end":248692,"line_start":390,"line_end":390,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Size2D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Size2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` size, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248396,"byte_end":248452,"line_start":384,"line_end":384,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248457,"byte_end":248460,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248465,"byte_end":248540,"line_start":386,"line_end":386,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248545,"byte_end":248619,"line_start":387,"line_end":387,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248624,"byte_end":248660,"line_start":388,"line_end":388,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248665,"byte_end":248674,"line_start":389,"line_end":389,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2688},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248854,"byte_end":248863,"line_start":398,"line_end":398,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Size2D<T, U>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members are finite.\n","sig":null,"attributes":[{"value":"/ Returns true if all members are finite.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248785,"byte_end":248828,"line_start":396,"line_end":396,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248833,"byte_end":248842,"line_start":397,"line_end":397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2692},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":249253,"byte_end":249256,"line_start":409,"line_end":409,"column_start":12,"column_end":15},"name":"abs","qualname":"<Size2D<T, U>>::abs","value":"pub fn abs(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value of each component.","sig":null,"attributes":[{"value":"/ Computes the absolute value of each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248985,"byte_end":249035,"line_start":404,"line_end":404,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":249040,"byte_end":249043,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`, `NaN` will be returned for component if the component is `NaN`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":249048,"byte_end":249136,"line_start":406,"line_end":406,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":249141,"byte_end":249144,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ For signed integers, `::MIN` will be returned for component if the component is `::MIN`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":249149,"byte_end":249241,"line_start":408,"line_end":408,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":2693},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":249443,"byte_end":249454,"line_start":414,"line_end":414,"column_start":12,"column_end":23},"name":"is_positive","qualname":"<Size2D<T, U>>::is_positive","value":"pub fn is_positive(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if both components is positive and `false` any component is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns `true` if both components is positive and `false` any component is zero or negative.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":249335,"byte_end":249431,"line_start":413,"line_end":413,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":2697},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":249692,"byte_end":249695,"line_start":422,"line_end":422,"column_start":12,"column_end":15},"name":"min","qualname":"<Size2D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are minimum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are minimum of this size and another.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":249584,"byte_end":249666,"line_start":420,"line_end":420,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":249671,"byte_end":249680,"line_start":421,"line_end":421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2698},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":249920,"byte_end":249923,"line_start":428,"line_end":428,"column_start":12,"column_end":15},"name":"max","qualname":"<Size2D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are maximum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are maximum of this size and another.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":249812,"byte_end":249894,"line_start":426,"line_end":426,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":249899,"byte_end":249908,"line_start":427,"line_end":427,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2699},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":250233,"byte_end":250238,"line_start":437,"line_end":437,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Size2D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the size each component of which clamped by corresponding","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":250040,"byte_end":250109,"line_start":432,"line_end":432,"column_start":5,"column_end":74}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":250114,"byte_end":250150,"line_start":433,"line_end":433,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":250155,"byte_end":250158,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":250163,"byte_end":250207,"line_start":435,"line_end":435,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":250212,"byte_end":250221,"line_start":436,"line_end":436,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2700},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":250464,"byte_end":250472,"line_start":446,"line_end":446,"column_start":12,"column_end":20},"name":"contains","qualname":"<Size2D<T, U>>::contains","value":"pub fn contains(Self, Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":250443,"byte_end":250452,"line_start":445,"line_end":445,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2701},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":250668,"byte_end":250680,"line_start":451,"line_end":451,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Size2D<T, U>>::greater_than","value":"pub fn greater_than(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater then\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater then\" operation on each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":250578,"byte_end":250656,"line_start":450,"line_end":450,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":2702},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":250934,"byte_end":250944,"line_start":459,"line_end":459,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Size2D<T, U>>::lower_than","value":"pub fn lower_than(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower then\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower then\" operation on each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":250846,"byte_end":250922,"line_start":458,"line_end":458,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2703},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":251192,"byte_end":251200,"line_start":467,"line_end":467,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Size2D<T, U>>::is_empty","value":"pub fn is_empty(Self) -> bool where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component of size is zero, negative, or NaN.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component of size is zero, negative, or NaN.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":251110,"byte_end":251180,"line_start":466,"line_end":466,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2707},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":251569,"byte_end":251574,"line_start":480,"line_end":480,"column_start":12,"column_end":17},"name":"equal","qualname":"<Size2D<T, U>>::equal","value":"pub fn equal(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":251486,"byte_end":251557,"line_start":479,"line_end":479,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2708},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":251829,"byte_end":251838,"line_start":488,"line_end":488,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Size2D<T, U>>::not_equal","value":"pub fn not_equal(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":251742,"byte_end":251817,"line_start":487,"line_end":487,"column_start":5,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":2802},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":255959,"byte_end":255964,"line_start":657,"line_end":657,"column_start":14,"column_end":19},"name":"size2","qualname":"::size::size2","value":"pub const fn size2<T, U>(T, T) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Size2D::new(w, h)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Size2D::new(w, h)`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":255897,"byte_end":255935,"line_start":655,"line_end":655,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":255936,"byte_end":255945,"line_start":656,"line_end":656,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":2829},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":263392,"byte_end":263398,"line_start":936,"line_end":936,"column_start":12,"column_end":18},"name":"Size3D","qualname":"::size::Size3D","value":"Size3D { width, height, depth, _unit }","parent":null,"children":[{"krate":0,"index":2832},{"krate":0,"index":2833},{"krate":0,"index":2834},{"krate":0,"index":2835}],"decl_id":null,"docs":" A 3d size tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 3d size tagged with a unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":263336,"byte_end":263369,"line_start":934,"line_end":934,"column_start":1,"column_end":34}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":263370,"byte_end":263380,"line_start":935,"line_end":935,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2832},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":263486,"byte_end":263491,"line_start":938,"line_end":938,"column_start":9,"column_end":14},"name":"width","qualname":"::size::Size3D::width","value":"T","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `x` axis.\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `x` axis.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":263411,"byte_end":263477,"line_start":937,"line_end":937,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2833},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":263575,"byte_end":263581,"line_start":940,"line_end":940,"column_start":9,"column_end":15},"name":"height","qualname":"::size::Size3D::height","value":"T","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `y` axis.\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `y` axis.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":263500,"byte_end":263566,"line_start":939,"line_end":939,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2834},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":263665,"byte_end":263670,"line_start":942,"line_end":942,"column_start":9,"column_end":14},"name":"depth","qualname":"::size::Size3D::depth","value":"T","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":" The extent of the element in the `U` units along the `z` axis.\n","sig":null,"attributes":[{"value":"/ The extent of the element in the `U` units along the `z` axis.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":263590,"byte_end":263656,"line_start":941,"line_end":941,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2835},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":263702,"byte_end":263707,"line_start":944,"line_end":944,"column_start":9,"column_end":14},"name":"_unit","qualname":"::size::Size3D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":2829},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2866},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":265886,"byte_end":265890,"line_start":1034,"line_end":1034,"column_start":12,"column_end":16},"name":"zero","qualname":"<Size3D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" The same as [`Zero::zero()`] but available without importing trait.","sig":null,"attributes":[{"value":"/ The same as [`Zero::zero()`] but available without importing trait.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":265733,"byte_end":265804,"line_start":1031,"line_end":1031,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":265809,"byte_end":265812,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ [`Zero::zero()`]: ./num/trait.Zero.html#tymethod.zero","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":265817,"byte_end":265874,"line_start":1033,"line_end":1033,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2867},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":266076,"byte_end":266079,"line_start":1043,"line_end":1043,"column_start":18,"column_end":21},"name":"new","qualname":"<Size3D<T, U>>::new","value":"pub const fn new(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":266007,"byte_end":266044,"line_start":1041,"line_end":1041,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":266049,"byte_end":266058,"line_start":1042,"line_end":1042,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2868},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":266327,"byte_end":266339,"line_start":1053,"line_end":1053,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Size3D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar strongly typed lengths.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar strongly typed lengths.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":266248,"byte_end":266301,"line_start":1051,"line_end":1051,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":266306,"byte_end":266315,"line_start":1052,"line_end":1052,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2869},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":266556,"byte_end":266561,"line_start":1059,"line_end":1059,"column_start":12,"column_end":17},"name":"splat","qualname":"<Size3D<T, U>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting all components to the same value.\n","sig":null,"attributes":[{"value":"/ Constructor setting all components to the same value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":266473,"byte_end":266530,"line_start":1057,"line_end":1057,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":266535,"byte_end":266544,"line_start":1058,"line_end":1058,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2870},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":266825,"byte_end":266837,"line_start":1073,"line_end":1073,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Size3D<T, U>>::from_untyped","value":"pub fn from_untyped(Size3D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":266763,"byte_end":266799,"line_start":1071,"line_end":1071,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":266804,"byte_end":266813,"line_start":1072,"line_end":1072,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2874},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":267078,"byte_end":267086,"line_start":1081,"line_end":1081,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Size3D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Return this size as an array of three elements (width, then height, then depth).\n","sig":null,"attributes":[{"value":"/ Return this size as an array of three elements (width, then height, then depth).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":266968,"byte_end":267052,"line_start":1079,"line_end":1079,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":267057,"byte_end":267066,"line_start":1080,"line_end":1080,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2876},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":267272,"byte_end":267280,"line_start":1087,"line_end":1087,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Size3D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Return this size as an array of three elements (width, then height, then depth).\n","sig":null,"attributes":[{"value":"/ Return this size as an array of three elements (width, then height, then depth).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":267162,"byte_end":267246,"line_start":1085,"line_end":1085,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":267251,"byte_end":267260,"line_start":1086,"line_end":1086,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2877},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":267447,"byte_end":267456,"line_start":1093,"line_end":1093,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Size3D<T, U>>::to_vector","value":"pub fn to_vector(Self) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Return this size as a vector with width, height and depth.\n","sig":null,"attributes":[{"value":"/ Return this size as a vector with width, height and depth.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":267359,"byte_end":267421,"line_start":1091,"line_end":1091,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":267426,"byte_end":267435,"line_start":1092,"line_end":1092,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2878},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":267624,"byte_end":267634,"line_start":1099,"line_end":1099,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Size3D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Size3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":267544,"byte_end":267598,"line_start":1097,"line_end":1097,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":267603,"byte_end":267612,"line_start":1098,"line_end":1098,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2879},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":267748,"byte_end":267757,"line_start":1105,"line_end":1105,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Size3D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Size3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit\n","sig":null,"attributes":[{"value":"/ Cast the unit","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":267705,"byte_end":267722,"line_start":1103,"line_end":1103,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":267727,"byte_end":267736,"line_start":1104,"line_end":1104,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2881},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268222,"byte_end":268227,"line_start":1121,"line_end":1121,"column_start":12,"column_end":17},"name":"round","qualname":"<Size3D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":267853,"byte_end":267908,"line_start":1109,"line_end":1109,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":267913,"byte_end":267916,"line_start":1110,"line_end":1110,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":267921,"byte_end":267996,"line_start":1111,"line_end":1111,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268001,"byte_end":268004,"line_start":1112,"line_end":1112,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268009,"byte_end":268020,"line_start":1113,"line_end":1113,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size3;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268025,"byte_end":268049,"line_start":1114,"line_end":1114,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268054,"byte_end":268068,"line_start":1115,"line_end":1115,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268073,"byte_end":268076,"line_start":1116,"line_end":1116,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size3::<_, Mm>(-0.1, -0.8, 0.4).round(), size3::<_, Mm>(0.0, -1.0, 0.0))","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268081,"byte_end":268168,"line_start":1117,"line_end":1117,"column_start":5,"column_end":92}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268173,"byte_end":268180,"line_start":1118,"line_end":1118,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268185,"byte_end":268194,"line_start":1119,"line_end":1119,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268199,"byte_end":268210,"line_start":1120,"line_end":1120,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2882},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268771,"byte_end":268775,"line_start":1140,"line_end":1140,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Size3D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268368,"byte_end":268459,"line_start":1128,"line_end":1128,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268464,"byte_end":268467,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268472,"byte_end":268547,"line_start":1130,"line_end":1130,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268552,"byte_end":268555,"line_start":1131,"line_end":1131,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268560,"byte_end":268571,"line_start":1132,"line_end":1132,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size3;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268576,"byte_end":268600,"line_start":1133,"line_end":1133,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268605,"byte_end":268619,"line_start":1134,"line_end":1134,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268624,"byte_end":268627,"line_start":1135,"line_end":1135,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size3::<_, Mm>(-0.1, -0.8, 0.4).ceil(), size3::<_, Mm>(0.0, 0.0, 1.0))","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268632,"byte_end":268717,"line_start":1136,"line_end":1136,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268722,"byte_end":268729,"line_start":1137,"line_end":1137,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268734,"byte_end":268743,"line_start":1138,"line_end":1138,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268748,"byte_end":268759,"line_start":1139,"line_end":1139,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2883},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269315,"byte_end":269320,"line_start":1159,"line_end":1159,"column_start":12,"column_end":17},"name":"floor","qualname":"<Size3D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":268912,"byte_end":269000,"line_start":1147,"line_end":1147,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269005,"byte_end":269008,"line_start":1148,"line_end":1148,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269013,"byte_end":269088,"line_start":1149,"line_end":1149,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269093,"byte_end":269096,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269101,"byte_end":269112,"line_start":1151,"line_end":1151,"column_start":5,"column_end":16}},{"value":"/ # use euclid::size3;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269117,"byte_end":269141,"line_start":1152,"line_end":1152,"column_start":5,"column_end":29}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269146,"byte_end":269160,"line_start":1153,"line_end":1153,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269165,"byte_end":269168,"line_start":1154,"line_end":1154,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(size3::<_, Mm>(-0.1, -0.8, 0.4).floor(), size3::<_, Mm>(-1.0, -1.0, 0.0))","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269173,"byte_end":269261,"line_start":1155,"line_end":1155,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269266,"byte_end":269273,"line_start":1156,"line_end":1156,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269278,"byte_end":269287,"line_start":1157,"line_end":1157,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269292,"byte_end":269303,"line_start":1158,"line_end":1158,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2884},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269527,"byte_end":269533,"line_start":1167,"line_end":1167,"column_start":12,"column_end":18},"name":"volume","qualname":"<Size3D<T, U>>::volume","value":"pub fn volume(Self) -> T where T: Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns result of multiplication of all components\n","sig":null,"attributes":[{"value":"/ Returns result of multiplication of all components","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269461,"byte_end":269515,"line_start":1166,"line_end":1166,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2885},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":270316,"byte_end":270320,"line_start":1192,"line_end":1192,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Size3D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self where T: One + Sub<Output = T> + Mul<Output\n= T> + Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate between this size and another size.","sig":null,"attributes":[{"value":"/ Linearly interpolate between this size and another size.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269646,"byte_end":269706,"line_start":1174,"line_end":1174,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269711,"byte_end":269714,"line_start":1175,"line_end":1175,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269719,"byte_end":269732,"line_start":1176,"line_end":1176,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269737,"byte_end":269740,"line_start":1177,"line_end":1177,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269745,"byte_end":269756,"line_start":1178,"line_end":1178,"column_start":5,"column_end":16}},{"value":"/ use euclid::size3;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269761,"byte_end":269783,"line_start":1179,"line_end":1179,"column_start":5,"column_end":27}},{"value":"/ use euclid::default::Size3D;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269788,"byte_end":269820,"line_start":1180,"line_end":1180,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269825,"byte_end":269828,"line_start":1181,"line_end":1181,"column_start":5,"column_end":8}},{"value":"/ let from: Size3D<_> = size3(0.0, 10.0, -1.0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269833,"byte_end":269882,"line_start":1182,"line_end":1182,"column_start":5,"column_end":54}},{"value":"/ let to:  Size3D<_> = size3(8.0, -4.0,  0.0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269887,"byte_end":269935,"line_start":1183,"line_end":1183,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269940,"byte_end":269943,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), size3(-8.0,  24.0, -2.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":269948,"byte_end":270010,"line_start":1185,"line_end":1185,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  0.0), size3( 0.0,  10.0, -1.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":270015,"byte_end":270077,"line_start":1186,"line_end":1186,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  0.5), size3( 4.0,   3.0, -0.5));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":270082,"byte_end":270144,"line_start":1187,"line_end":1187,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  1.0), size3( 8.0,  -4.0,  0.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":270149,"byte_end":270211,"line_start":1188,"line_end":1188,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from.lerp(to,  2.0), size3(16.0, -18.0,  1.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":270216,"byte_end":270278,"line_start":1189,"line_end":1189,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":270283,"byte_end":270290,"line_start":1190,"line_end":1190,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":270295,"byte_end":270304,"line_start":1191,"line_end":1191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2889},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":270942,"byte_end":270946,"line_start":1208,"line_end":1208,"column_start":12,"column_end":16},"name":"cast","qualname":"<Size3D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Size3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":270562,"byte_end":270636,"line_start":1202,"line_end":1202,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":270641,"byte_end":270644,"line_start":1203,"line_end":1203,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":270649,"byte_end":270736,"line_start":1204,"line_end":1204,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":270741,"byte_end":270829,"line_start":1205,"line_end":1205,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":270834,"byte_end":270916,"line_start":1206,"line_end":1206,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":270921,"byte_end":270930,"line_start":1207,"line_end":1207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2891},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":271408,"byte_end":271416,"line_start":1217,"line_end":1217,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Size3D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Size3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":271033,"byte_end":271116,"line_start":1212,"line_end":1212,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":271121,"byte_end":271124,"line_start":1213,"line_end":1213,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point to integer coordinates, the decimals are truncated","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":271129,"byte_end":271216,"line_start":1214,"line_end":1214,"column_start":5,"column_end":92}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":271221,"byte_end":271309,"line_start":1215,"line_end":1215,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":271314,"byte_end":271396,"line_start":1216,"line_end":1216,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2893},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":271829,"byte_end":271835,"line_start":1232,"line_end":1232,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Size3D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Size3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` size.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":271775,"byte_end":271803,"line_start":1230,"line_end":1230,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":271808,"byte_end":271817,"line_start":1231,"line_end":1231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2894},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":271947,"byte_end":271953,"line_start":1238,"line_end":1238,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Size3D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Size3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` size.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` size.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":271893,"byte_end":271921,"line_start":1236,"line_end":1236,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":271926,"byte_end":271935,"line_start":1237,"line_end":1237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2895},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272302,"byte_end":272310,"line_start":1248,"line_end":1248,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Size3D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Size3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `uint` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `uint` size, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272011,"byte_end":272068,"line_start":1242,"line_end":1242,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272073,"byte_end":272076,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272081,"byte_end":272156,"line_start":1244,"line_end":1244,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272161,"byte_end":272235,"line_start":1245,"line_end":1245,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272240,"byte_end":272276,"line_start":1246,"line_end":1246,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272281,"byte_end":272290,"line_start":1247,"line_end":1247,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2896},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272660,"byte_end":272666,"line_start":1258,"line_end":1258,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Size3D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Size3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` size, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272370,"byte_end":272426,"line_start":1252,"line_end":1252,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272431,"byte_end":272434,"line_start":1253,"line_end":1253,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272439,"byte_end":272514,"line_start":1254,"line_end":1254,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272519,"byte_end":272593,"line_start":1255,"line_end":1255,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272598,"byte_end":272634,"line_start":1256,"line_end":1256,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272639,"byte_end":272648,"line_start":1257,"line_end":1257,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2897},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273014,"byte_end":273020,"line_start":1268,"line_end":1268,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Size3D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Size3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` size, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272724,"byte_end":272780,"line_start":1262,"line_end":1262,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272785,"byte_end":272788,"line_start":1263,"line_end":1263,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272793,"byte_end":272868,"line_start":1264,"line_end":1264,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272873,"byte_end":272947,"line_start":1265,"line_end":1265,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272952,"byte_end":272988,"line_start":1266,"line_end":1266,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":272993,"byte_end":273002,"line_start":1267,"line_end":1267,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2898},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273368,"byte_end":273374,"line_start":1278,"line_end":1278,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Size3D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Size3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` size, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` size, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273078,"byte_end":273134,"line_start":1272,"line_end":1272,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273139,"byte_end":273142,"line_start":1273,"line_end":1273,"column_start":5,"column_end":8}},{"value":"/ When casting from floating point sizes, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273147,"byte_end":273222,"line_start":1274,"line_end":1274,"column_start":5,"column_end":80}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273227,"byte_end":273301,"line_start":1275,"line_end":1275,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273306,"byte_end":273342,"line_start":1276,"line_end":1276,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273347,"byte_end":273356,"line_start":1277,"line_end":1277,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2902},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273536,"byte_end":273545,"line_start":1286,"line_end":1286,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Size3D<T, U>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members are finite.\n","sig":null,"attributes":[{"value":"/ Returns true if all members are finite.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273467,"byte_end":273510,"line_start":1284,"line_end":1284,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273515,"byte_end":273524,"line_start":1285,"line_end":1285,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2906},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273961,"byte_end":273964,"line_start":1297,"line_end":1297,"column_start":12,"column_end":15},"name":"abs","qualname":"<Size3D<T, U>>::abs","value":"pub fn abs(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value of each component.","sig":null,"attributes":[{"value":"/ Computes the absolute value of each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273693,"byte_end":273743,"line_start":1292,"line_end":1292,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273748,"byte_end":273751,"line_start":1293,"line_end":1293,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`, `NaN` will be returned for component if the component is `NaN`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273756,"byte_end":273844,"line_start":1294,"line_end":1294,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273849,"byte_end":273852,"line_start":1295,"line_end":1295,"column_start":5,"column_end":8}},{"value":"/ For signed integers, `::MIN` will be returned for component if the component is `::MIN`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273857,"byte_end":273949,"line_start":1296,"line_end":1296,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":2907},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":274168,"byte_end":274179,"line_start":1302,"line_end":1302,"column_start":12,"column_end":23},"name":"is_positive","qualname":"<Size3D<T, U>>::is_positive","value":"pub fn is_positive(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components is positive and `false` any component is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components is positive and `false` any component is zero or negative.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":274061,"byte_end":274156,"line_start":1301,"line_end":1301,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":2911},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":274445,"byte_end":274448,"line_start":1310,"line_end":1310,"column_start":12,"column_end":15},"name":"min","qualname":"<Size3D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are minimum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are minimum of this size and another.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":274337,"byte_end":274419,"line_start":1308,"line_end":1308,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":274424,"byte_end":274433,"line_start":1309,"line_end":1309,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2912},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":274750,"byte_end":274753,"line_start":1320,"line_end":1320,"column_start":12,"column_end":15},"name":"max","qualname":"<Size3D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which are maximum of this size and another.\n","sig":null,"attributes":[{"value":"/ Returns the size each component of which are maximum of this size and another.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":274642,"byte_end":274724,"line_start":1318,"line_end":1318,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":274729,"byte_end":274738,"line_start":1319,"line_end":1319,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2913},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":275140,"byte_end":275145,"line_start":1333,"line_end":1333,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Size3D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the size each component of which clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the size each component of which clamped by corresponding","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":274947,"byte_end":275016,"line_start":1328,"line_end":1328,"column_start":5,"column_end":74}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":275021,"byte_end":275057,"line_start":1329,"line_end":1329,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":275062,"byte_end":275065,"line_start":1330,"line_end":1330,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":275070,"byte_end":275114,"line_start":1331,"line_end":1331,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":275119,"byte_end":275128,"line_start":1332,"line_end":1332,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2914},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":275371,"byte_end":275379,"line_start":1342,"line_end":1342,"column_start":12,"column_end":20},"name":"contains","qualname":"<Size3D<T, U>>::contains","value":"pub fn contains(Self, Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":275350,"byte_end":275359,"line_start":1341,"line_end":1341,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2915},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":275605,"byte_end":275617,"line_start":1348,"line_end":1348,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Size3D<T, U>>::greater_than","value":"pub fn greater_than(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater than\" operation on each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":275515,"byte_end":275593,"line_start":1347,"line_end":1347,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":2916},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":275912,"byte_end":275922,"line_start":1357,"line_end":1357,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Size3D<T, U>>::lower_than","value":"pub fn lower_than(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower than\" operation on each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":275824,"byte_end":275900,"line_start":1356,"line_end":1356,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2917},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":276210,"byte_end":276218,"line_start":1366,"line_end":1366,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Size3D<T, U>>::is_empty","value":"pub fn is_empty(Self) -> bool where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component of size is zero, negative or NaN.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component of size is zero, negative or NaN.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":276129,"byte_end":276198,"line_start":1365,"line_end":1365,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2921},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":276502,"byte_end":276507,"line_start":1377,"line_end":1377,"column_start":12,"column_end":17},"name":"equal","qualname":"<Size3D<T, U>>::equal","value":"pub fn equal(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":276419,"byte_end":276490,"line_start":1376,"line_end":1376,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2922},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":276804,"byte_end":276813,"line_start":1386,"line_end":1386,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Size3D<T, U>>::not_equal","value":"pub fn not_equal(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":276717,"byte_end":276792,"line_start":1385,"line_end":1385,"column_start":5,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":3040},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":282768,"byte_end":282773,"line_start":1642,"line_end":1642,"column_start":14,"column_end":19},"name":"size3","qualname":"::size::size3","value":"pub const fn size3<T, U>(T, T, T) -> Size3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `Size3D::new(w, h, d)`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `Size3D::new(w, h, d)`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":282703,"byte_end":282744,"line_start":1640,"line_end":1640,"column_start":1,"column_end":42}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":282745,"byte_end":282754,"line_start":1641,"line_end":1641,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":3120},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291560,"byte_end":291571,"line_start":64,"line_end":64,"column_start":12,"column_end":23},"name":"Transform2D","qualname":"::transform2d::Transform2D","value":"Transform2D { m11, m12, m21, m22, m31, m32, _unit }","parent":null,"children":[{"krate":0,"index":3124},{"krate":0,"index":3125},{"krate":0,"index":3126},{"krate":0,"index":3127},{"krate":0,"index":3128},{"krate":0,"index":3129},{"krate":0,"index":3130}],"decl_id":null,"docs":" A 2d transform represented by a column-major 3 by 3 matrix, compressed down to 3 by 2.","sig":null,"attributes":[{"value":"/ A 2d transform represented by a column-major 3 by 3 matrix, compressed down to 3 by 2.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":290072,"byte_end":290162,"line_start":32,"line_end":32,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":290163,"byte_end":290166,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Transforms can be parametrized over the source and destination units, to describe a","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":290167,"byte_end":290254,"line_start":34,"line_end":34,"column_start":1,"column_end":88}},{"value":"/ transformation from a space to another.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":290255,"byte_end":290298,"line_start":35,"line_end":35,"column_start":1,"column_end":44}},{"value":"/ For example, `Transform2D<f32, WorldSpace, ScreenSpace>::transform_point4d`","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":290299,"byte_end":290378,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ takes a `Point2D<f32, WorldSpace>` and returns a `Point2D<f32, ScreenSpace>`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":290379,"byte_end":290460,"line_start":37,"line_end":37,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":290461,"byte_end":290464,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Transforms expose a set of convenience methods for pre- and post-transformations.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":290465,"byte_end":290550,"line_start":39,"line_end":39,"column_start":1,"column_end":86}},{"value":"/ Pre-transformations (`pre_*` methods) correspond to adding an operation that is","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":290551,"byte_end":290634,"line_start":40,"line_end":40,"column_start":1,"column_end":84}},{"value":"/ applied before the rest of the transformation, while post-transformations (`then_*`","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":290635,"byte_end":290722,"line_start":41,"line_end":41,"column_start":1,"column_end":88}},{"value":"/ methods) add an operation that is applied after.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":290723,"byte_end":290775,"line_start":42,"line_end":42,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":290776,"byte_end":290779,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ The matrix representation is conceptually equivalent to a 3 by 3 matrix transformation","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":290780,"byte_end":290870,"line_start":44,"line_end":44,"column_start":1,"column_end":91}},{"value":"/ compressed to 3 by 2 with the components that aren't needed to describe the set of 2d","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":290871,"byte_end":290960,"line_start":45,"line_end":45,"column_start":1,"column_end":90}},{"value":"/ transformations we are interested in implicitly defined:","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":290961,"byte_end":291021,"line_start":46,"line_end":46,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291022,"byte_end":291025,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291026,"byte_end":291037,"line_start":48,"line_end":48,"column_start":1,"column_end":12}},{"value":"/  | m11 m12 0 |   |x|   |x'|","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291038,"byte_end":291069,"line_start":49,"line_end":49,"column_start":1,"column_end":32}},{"value":"/  | m21 m22 0 | x |y| = |y'|","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291070,"byte_end":291101,"line_start":50,"line_end":50,"column_start":1,"column_end":32}},{"value":"/  | m31 m32 1 |   |1|   |w |","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291102,"byte_end":291133,"line_start":51,"line_end":51,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291134,"byte_end":291141,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291142,"byte_end":291145,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ When translating Transform2D into general matrix representations, consider that the","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291146,"byte_end":291233,"line_start":54,"line_end":54,"column_start":1,"column_end":88}},{"value":"/ representation follows the column-major notation with column vectors.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291234,"byte_end":291307,"line_start":55,"line_end":55,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291308,"byte_end":291311,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The translation terms are m31 and m32.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291312,"byte_end":291354,"line_start":57,"line_end":57,"column_start":1,"column_end":43}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291355,"byte_end":291365,"line_start":58,"line_end":58,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3124},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291595,"byte_end":291598,"line_start":65,"line_end":65,"column_start":9,"column_end":12},"name":"m11","qualname":"::transform2d::Transform2D::m11","value":"T","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3125},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291607,"byte_end":291610,"line_start":65,"line_end":65,"column_start":21,"column_end":24},"name":"m12","qualname":"::transform2d::Transform2D::m12","value":"T","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3126},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291623,"byte_end":291626,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"name":"m21","qualname":"::transform2d::Transform2D::m21","value":"T","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3127},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291635,"byte_end":291638,"line_start":66,"line_end":66,"column_start":21,"column_end":24},"name":"m22","qualname":"::transform2d::Transform2D::m22","value":"T","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3128},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291651,"byte_end":291654,"line_start":67,"line_end":67,"column_start":9,"column_end":12},"name":"m31","qualname":"::transform2d::Transform2D::m31","value":"T","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3129},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291663,"byte_end":291666,"line_start":67,"line_end":67,"column_start":21,"column_end":24},"name":"m32","qualname":"::transform2d::Transform2D::m32","value":"T","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3130},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":291698,"byte_end":291703,"line_start":69,"line_end":69,"column_start":9,"column_end":14},"name":"_unit","qualname":"::transform2d::Transform2D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":3120},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3159},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293826,"byte_end":293829,"line_start":148,"line_end":148,"column_start":18,"column_end":21},"name":"new","qualname":"<Transform2D<T, Src, Dst>>::new","value":"pub const fn new(T, T, T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform specifying its components in using the column-major-column-vector\n matrix notation.","sig":null,"attributes":[{"value":"/ Create a transform specifying its components in using the column-major-column-vector","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293360,"byte_end":293448,"line_start":133,"line_end":133,"column_start":5,"column_end":93}},{"value":"/ matrix notation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293453,"byte_end":293473,"line_start":134,"line_end":134,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293478,"byte_end":293481,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ For example, the translation terms m31 and m32 are the last two parameters parameters.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293486,"byte_end":293576,"line_start":136,"line_end":136,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293581,"byte_end":293584,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293589,"byte_end":293596,"line_start":138,"line_end":138,"column_start":5,"column_end":12}},{"value":"/ use euclid::default::Transform2D;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293601,"byte_end":293638,"line_start":139,"line_end":139,"column_start":5,"column_end":42}},{"value":"/ let tx = 1.0;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293643,"byte_end":293660,"line_start":140,"line_end":140,"column_start":5,"column_end":22}},{"value":"/ let ty = 2.0;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293665,"byte_end":293682,"line_start":141,"line_end":141,"column_start":5,"column_end":22}},{"value":"/ let translation = Transform2D::new(","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293687,"byte_end":293726,"line_start":142,"line_end":142,"column_start":5,"column_end":44}},{"value":"/   1.0, 0.0,","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293731,"byte_end":293746,"line_start":143,"line_end":143,"column_start":5,"column_end":20}},{"value":"/   0.0, 1.0,","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293751,"byte_end":293766,"line_start":144,"line_end":144,"column_start":5,"column_end":20}},{"value":"/   tx,  ty,","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293771,"byte_end":293785,"line_start":145,"line_end":145,"column_start":5,"column_end":19}},{"value":"/ );","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293790,"byte_end":293796,"line_start":146,"line_end":146,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293801,"byte_end":293808,"line_start":147,"line_end":147,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3160},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":294355,"byte_end":294364,"line_start":164,"line_end":164,"column_start":12,"column_end":21},"name":"approx_eq","qualname":"<Transform2D<T, Src, Dst>>::approx_eq","value":"pub fn approx_eq(&Self, &Self) -> bool where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n T's default epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":294029,"byte_end":294110,"line_start":157,"line_end":157,"column_start":5,"column_end":86}},{"value":"/ T's default epsilon value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":294115,"byte_end":294145,"line_start":158,"line_end":158,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":294150,"byte_end":294153,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq()`] but available without importing trait.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":294158,"byte_end":294238,"line_start":160,"line_end":160,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":294243,"byte_end":294246,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":294251,"byte_end":294329,"line_start":162,"line_end":162,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":294334,"byte_end":294343,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3161},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":294826,"byte_end":294839,"line_start":176,"line_end":176,"column_start":12,"column_end":25},"name":"approx_eq_eps","qualname":"<Transform2D<T, Src, Dst>>::approx_eq_eps","value":"pub fn approx_eq_eps(&Self, &Self, &T) -> bool where T: ApproxEq<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n a provided epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":294489,"byte_end":294570,"line_start":169,"line_end":169,"column_start":5,"column_end":86}},{"value":"/ a provided epsilon value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":294575,"byte_end":294604,"line_start":170,"line_end":170,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":294609,"byte_end":294612,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq_eps()`] but available without importing trait.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":294617,"byte_end":294701,"line_start":172,"line_end":172,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":294706,"byte_end":294709,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq_eps()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq_eps","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":294714,"byte_end":294800,"line_start":174,"line_end":174,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":294805,"byte_end":294814,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3166},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295405,"byte_end":295413,"line_start":192,"line_end":192,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Transform2D<T, Src, Dst>>::to_array","value":"pub fn to_array(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295036,"byte_end":295091,"line_start":183,"line_end":183,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295096,"byte_end":295099,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ The terms are laid out in the same order as they are","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295104,"byte_end":295160,"line_start":185,"line_end":185,"column_start":5,"column_end":61}},{"value":"/ specified in `Transform2D::new`, that is following the","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295165,"byte_end":295223,"line_start":186,"line_end":186,"column_start":5,"column_end":63}},{"value":"/ column-major-column-vector matrix notation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295228,"byte_end":295275,"line_start":187,"line_end":187,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295280,"byte_end":295283,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ For example the translation terms are found in the","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295288,"byte_end":295342,"line_start":189,"line_end":189,"column_start":5,"column_end":59}},{"value":"/ last two slots of the array.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295347,"byte_end":295379,"line_start":190,"line_end":190,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295384,"byte_end":295393,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3168},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295961,"byte_end":295980,"line_start":209,"line_end":209,"column_start":12,"column_end":31},"name":"to_array_transposed","qualname":"<Transform2D<T, Src, Dst>>::to_array_transposed","value":"pub fn to_array_transposed(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms transposed.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms transposed.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295559,"byte_end":295625,"line_start":200,"line_end":200,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295630,"byte_end":295633,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ The terms are laid out in transposed order from the same order of","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295638,"byte_end":295707,"line_start":202,"line_end":202,"column_start":5,"column_end":74}},{"value":"/ `Transform3D::new` and `Transform3D::to_array`, that is following","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295712,"byte_end":295781,"line_start":203,"line_end":203,"column_start":5,"column_end":74}},{"value":"/ the row-major-column-vector matrix notation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295786,"byte_end":295834,"line_start":204,"line_end":204,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295839,"byte_end":295842,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ For example the translation terms are found at indices 2 and 5","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295847,"byte_end":295913,"line_start":206,"line_end":206,"column_start":5,"column_end":71}},{"value":"/ in the array.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295918,"byte_end":295935,"line_start":207,"line_end":207,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295940,"byte_end":295949,"line_start":208,"line_end":208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3170},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":296234,"byte_end":296243,"line_start":219,"line_end":219,"column_start":12,"column_end":21},"name":"to_arrays","qualname":"<Transform2D<T, Src, Dst>>::to_arrays","value":"pub fn to_arrays(&Self) -> [[T; ]; ]","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `to_array` with elements packed two at a time\n in an array of arrays.\n","sig":null,"attributes":[{"value":"/ Equivalent to `to_array` with elements packed two at a time","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":296114,"byte_end":296177,"line_start":216,"line_end":216,"column_start":5,"column_end":68}},{"value":"/ in an array of arrays.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":296182,"byte_end":296208,"line_start":217,"line_end":217,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":296213,"byte_end":296222,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3173},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":296708,"byte_end":296718,"line_start":234,"line_end":234,"column_start":12,"column_end":22},"name":"from_array","qualname":"<Transform2D<T, Src, Dst>>::from_array","value":"pub fn from_array([T; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform providing its components via an array\n of 6 elements instead of as individual parameters.","sig":null,"attributes":[{"value":"/ Create a transform providing its components via an array","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":296401,"byte_end":296461,"line_start":227,"line_end":227,"column_start":5,"column_end":65}},{"value":"/ of 6 elements instead of as individual parameters.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":296466,"byte_end":296520,"line_start":228,"line_end":228,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":296525,"byte_end":296528,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ The order of the components corresponds to the","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":296533,"byte_end":296583,"line_start":230,"line_end":230,"column_start":5,"column_end":55}},{"value":"/ column-major-column-vector matrix notation (the same order","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":296588,"byte_end":296650,"line_start":231,"line_end":231,"column_start":5,"column_end":67}},{"value":"/ as `Transform2D::new`).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":296655,"byte_end":296682,"line_start":232,"line_end":232,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":296687,"byte_end":296696,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3175},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":297164,"byte_end":297175,"line_start":249,"line_end":249,"column_start":12,"column_end":23},"name":"from_arrays","qualname":"<Transform2D<T, Src, Dst>>::from_arrays","value":"pub fn from_arrays([[T; ]; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `from_array` with elements packed two at a time\n in an array of arrays.","sig":null,"attributes":[{"value":"/ Equivalent to `from_array` with elements packed two at a time","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":296880,"byte_end":296945,"line_start":242,"line_end":242,"column_start":5,"column_end":70}},{"value":"/ in an array of arrays.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":296950,"byte_end":296976,"line_start":243,"line_end":243,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":296981,"byte_end":296984,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ The order of the components corresponds to the","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":296989,"byte_end":297039,"line_start":245,"line_end":245,"column_start":5,"column_end":55}},{"value":"/ column-major-column-vector matrix notation (the same order","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":297044,"byte_end":297106,"line_start":246,"line_end":246,"column_start":5,"column_end":67}},{"value":"/ as `Transform3D::new`).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":297111,"byte_end":297138,"line_start":247,"line_end":247,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":297143,"byte_end":297152,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3178},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":297440,"byte_end":297450,"line_start":259,"line_end":259,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Transform2D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Transform2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":297360,"byte_end":297414,"line_start":257,"line_end":257,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":297419,"byte_end":297428,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3179},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":297708,"byte_end":297720,"line_start":269,"line_end":269,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Transform2D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Transform2D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":297646,"byte_end":297682,"line_start":267,"line_end":267,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":297687,"byte_end":297696,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3180},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":297987,"byte_end":297998,"line_start":279,"line_end":279,"column_start":12,"column_end":23},"name":"with_source","qualname":"<Transform2D<T, Src, Dst>>::with_source","value":"pub fn with_source<NewSrc>(&Self) -> Transform2D<T, NewSrc, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different source unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different source unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":297901,"byte_end":297961,"line_start":277,"line_end":277,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":297966,"byte_end":297975,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3182},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":298281,"byte_end":298297,"line_start":289,"line_end":289,"column_start":12,"column_end":28},"name":"with_destination","qualname":"<Transform2D<T, Src, Dst>>::with_destination","value":"pub fn with_destination<NewDst>(&Self) -> Transform2D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different destination unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different destination unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":298190,"byte_end":298255,"line_start":287,"line_end":287,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":298260,"byte_end":298269,"line_start":288,"line_end":288,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3184},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":298553,"byte_end":298558,"line_start":298,"line_end":298,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Transform2D<T, Src, Dst>>::to_3d","value":"pub fn to_3d(&Self) -> Transform3D<T, Src, Dst> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Create a 3D transform from the current transform\n","sig":null,"attributes":[{"value":"/ Create a 3D transform from the current transform","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":298489,"byte_end":298541,"line_start":297,"line_end":297,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3189},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":298895,"byte_end":298899,"line_start":309,"line_end":309,"column_start":12,"column_end":16},"name":"cast","qualname":"<Transform2D<T, Src, Dst>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Transform2D<NewT, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":298795,"byte_end":298869,"line_start":307,"line_end":307,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":298874,"byte_end":298883,"line_start":308,"line_end":308,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3191},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":299094,"byte_end":299102,"line_start":314,"line_end":314,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Transform2D<T, Src, Dst>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Transform2D<NewT, Src, Dst>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":298999,"byte_end":299082,"line_start":313,"line_end":313,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":3197},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":299878,"byte_end":299886,"line_start":344,"line_end":344,"column_start":12,"column_end":20},"name":"identity","qualname":"<Transform2D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an identity matrix:","sig":null,"attributes":[{"value":"/ Create an identity matrix:","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":299750,"byte_end":299780,"line_start":336,"line_end":336,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":299785,"byte_end":299788,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":299793,"byte_end":299804,"line_start":338,"line_end":338,"column_start":5,"column_end":16}},{"value":"/ 1 0","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":299809,"byte_end":299816,"line_start":339,"line_end":339,"column_start":5,"column_end":12}},{"value":"/ 0 1","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":299821,"byte_end":299828,"line_start":340,"line_end":340,"column_start":5,"column_end":12}},{"value":"/ 0 0","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":299833,"byte_end":299840,"line_start":341,"line_end":341,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":299845,"byte_end":299852,"line_start":342,"line_end":342,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":299857,"byte_end":299866,"line_start":343,"line_end":343,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3203},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":300579,"byte_end":300583,"line_start":368,"line_end":368,"column_start":12,"column_end":16},"name":"then","qualname":"<Transform2D<T, Src, Dst>>::then","value":"pub fn then<NewDst>(&Self, &Transform2D<T, Dst, NewDst>)\n-> Transform2D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplication of the two matrices such that mat's transformation\n applies after self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns the multiplication of the two matrices such that mat's transformation","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":300425,"byte_end":300506,"line_start":365,"line_end":365,"column_start":5,"column_end":86}},{"value":"/ applies after self's transformation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":300511,"byte_end":300551,"line_start":366,"line_end":366,"column_start":5,"column_end":45}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":300556,"byte_end":300567,"line_start":367,"line_end":367,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3209},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":301329,"byte_end":301340,"line_start":395,"line_end":395,"column_start":12,"column_end":23},"name":"translation","qualname":"<Transform2D<T, Src, Dst>>::translation","value":"pub fn translation(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 2d translation transform:","sig":null,"attributes":[{"value":"/ Create a 2d translation transform:","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":301193,"byte_end":301231,"line_start":387,"line_end":387,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":301236,"byte_end":301239,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":301244,"byte_end":301255,"line_start":389,"line_end":389,"column_start":5,"column_end":16}},{"value":"/ 1 0","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":301260,"byte_end":301267,"line_start":390,"line_end":390,"column_start":5,"column_end":12}},{"value":"/ 0 1","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":301272,"byte_end":301279,"line_start":391,"line_end":391,"column_start":5,"column_end":12}},{"value":"/ x y","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":301284,"byte_end":301291,"line_start":392,"line_end":392,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":301296,"byte_end":301303,"line_start":393,"line_end":393,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":301308,"byte_end":301317,"line_start":394,"line_end":394,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3212},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":301667,"byte_end":301681,"line_start":409,"line_end":409,"column_start":12,"column_end":26},"name":"then_translate","qualname":"<Transform2D<T, Src, Dst>>::then_translate","value":"pub fn then_translate(&Self, Vector2D<T, Dst>) -> Self where T: Copy +\nAdd<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Applies a translation after self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a translation after self's transformation and returns the resulting transform.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":301535,"byte_end":301625,"line_start":406,"line_end":406,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":301630,"byte_end":301639,"line_start":407,"line_end":407,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":301644,"byte_end":301655,"line_start":408,"line_end":408,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3213},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":301986,"byte_end":301999,"line_start":419,"line_end":419,"column_start":12,"column_end":25},"name":"pre_translate","qualname":"<Transform2D<T, Src, Dst>>::pre_translate","value":"pub fn pre_translate(&Self, Vector2D<T, Src>) -> Self where T: Copy +\nAdd<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Applies a translation before self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a translation before self's transformation and returns the resulting transform.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":301853,"byte_end":301944,"line_start":416,"line_end":416,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":301949,"byte_end":301958,"line_start":417,"line_end":417,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":301963,"byte_end":301974,"line_start":418,"line_end":418,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3218},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":302427,"byte_end":302435,"line_start":434,"line_end":434,"column_start":12,"column_end":20},"name":"rotation","qualname":"<Transform2D<T, Src, Dst>>::rotation","value":"pub fn rotation(Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a rotation transform.\n","sig":null,"attributes":[{"value":"/ Returns a rotation transform.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":302368,"byte_end":302401,"line_start":432,"line_end":432,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":302406,"byte_end":302415,"line_start":433,"line_end":433,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3219},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":302812,"byte_end":302823,"line_start":448,"line_end":448,"column_start":12,"column_end":23},"name":"then_rotate","qualname":"<Transform2D<T, Src, Dst>>::then_rotate","value":"pub fn then_rotate(&Self, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Applies a rotation after self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a rotation after self's transformation and returns the resulting transform.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":302683,"byte_end":302770,"line_start":445,"line_end":445,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":302775,"byte_end":302784,"line_start":446,"line_end":446,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":302789,"byte_end":302800,"line_start":447,"line_end":447,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3220},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303048,"byte_end":303058,"line_start":455,"line_end":455,"column_start":12,"column_end":22},"name":"pre_rotate","qualname":"<Transform2D<T, Src, Dst>>::pre_rotate","value":"pub fn pre_rotate(&Self, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Applies a rotation before self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a rotation before self's transformation and returns the resulting transform.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":302918,"byte_end":303006,"line_start":452,"line_end":452,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303011,"byte_end":303020,"line_start":453,"line_end":453,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303025,"byte_end":303036,"line_start":454,"line_end":454,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3225},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303390,"byte_end":303395,"line_start":470,"line_end":470,"column_start":12,"column_end":17},"name":"scale","qualname":"<Transform2D<T, Src, Dst>>::scale","value":"pub fn scale(T, T) -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Create a 2d scale transform:","sig":null,"attributes":[{"value":"/ Create a 2d scale transform:","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303260,"byte_end":303292,"line_start":462,"line_end":462,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303297,"byte_end":303300,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303305,"byte_end":303316,"line_start":464,"line_end":464,"column_start":5,"column_end":16}},{"value":"/ x 0","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303321,"byte_end":303328,"line_start":465,"line_end":465,"column_start":5,"column_end":12}},{"value":"/ 0 y","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303333,"byte_end":303340,"line_start":466,"line_end":466,"column_start":5,"column_end":12}},{"value":"/ 0 0","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303345,"byte_end":303352,"line_start":467,"line_end":467,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303357,"byte_end":303364,"line_start":468,"line_end":468,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303369,"byte_end":303378,"line_start":469,"line_end":469,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3227},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303720,"byte_end":303730,"line_start":486,"line_end":486,"column_start":12,"column_end":22},"name":"then_scale","qualname":"<Transform2D<T, Src, Dst>>::then_scale","value":"pub fn then_scale(&Self, T, T) -> Self where T: Copy + Add<Output = T> +\nMul<Output = T> + Zero","parent":null,"children":[],"decl_id":null,"docs":" Applies a scale after self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a scale after self's transformation and returns the resulting transform.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303594,"byte_end":303678,"line_start":483,"line_end":483,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303683,"byte_end":303692,"line_start":484,"line_end":484,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303697,"byte_end":303708,"line_start":485,"line_end":485,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3228},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":304017,"byte_end":304026,"line_start":496,"line_end":496,"column_start":12,"column_end":21},"name":"pre_scale","qualname":"<Transform2D<T, Src, Dst>>::pre_scale","value":"pub fn pre_scale(&Self, T, T) -> Self where T: Copy + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Applies a scale before self's transformation and returns the resulting transform.\n","sig":null,"attributes":[{"value":"/ Applies a scale before self's transformation and returns the resulting transform.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303890,"byte_end":303975,"line_start":493,"line_end":493,"column_start":5,"column_end":90}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303980,"byte_end":303989,"line_start":494,"line_end":494,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303994,"byte_end":304005,"line_start":495,"line_end":495,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3233},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":304518,"byte_end":304533,"line_start":516,"line_end":516,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Transform2D<T, Src, Dst>>::transform_point","value":"pub fn transform_point(&Self, Point2D<T, Src>) -> Point2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given point transformed by this transform.\n","sig":null,"attributes":[{"value":"/ Returns the given point transformed by this transform.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":304418,"byte_end":304476,"line_start":513,"line_end":513,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":304481,"byte_end":304490,"line_start":514,"line_end":514,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":304495,"byte_end":304506,"line_start":515,"line_end":515,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3234},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":304854,"byte_end":304870,"line_start":526,"line_end":526,"column_start":12,"column_end":28},"name":"transform_vector","qualname":"<Transform2D<T, Src, Dst>>::transform_vector","value":"pub fn transform_vector(&Self, Vector2D<T, Src>) -> Vector2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given vector transformed by this matrix.\n","sig":null,"attributes":[{"value":"/ Returns the given vector transformed by this matrix.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":304756,"byte_end":304812,"line_start":523,"line_end":523,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":304817,"byte_end":304826,"line_start":524,"line_end":524,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":304831,"byte_end":304842,"line_start":525,"line_end":525,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3235},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":305190,"byte_end":305212,"line_start":535,"line_end":535,"column_start":12,"column_end":34},"name":"outer_transformed_rect","qualname":"<Transform2D<T, Src, Dst>>::outer_transformed_rect","value":"pub fn outer_transformed_rect(&Self, &Rect<T, Src>) -> Rect<T, Dst> where\nT: Sub<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a rectangle that encompasses the result of transforming the given rectangle by this\n transform.\n","sig":null,"attributes":[{"value":"/ Returns a rectangle that encompasses the result of transforming the given rectangle by this","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":305034,"byte_end":305129,"line_start":531,"line_end":531,"column_start":5,"column_end":100}},{"value":"/ transform.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":305134,"byte_end":305148,"line_start":532,"line_end":532,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":305153,"byte_end":305162,"line_start":533,"line_end":533,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":305167,"byte_end":305178,"line_start":534,"line_end":534,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3236},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":305767,"byte_end":305788,"line_start":554,"line_end":554,"column_start":12,"column_end":33},"name":"outer_transformed_box","qualname":"<Transform2D<T, Src, Dst>>::outer_transformed_box","value":"pub fn outer_transformed_box(&Self, &Box2D<T, Src>) -> Box2D<T, Dst> where\nT: Sub<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a box that encompasses the result of transforming the given box by this\n transform.\n","sig":null,"attributes":[{"value":"/ Returns a box that encompasses the result of transforming the given box by this","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":305623,"byte_end":305706,"line_start":550,"line_end":550,"column_start":5,"column_end":88}},{"value":"/ transform.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":305711,"byte_end":305725,"line_start":551,"line_end":551,"column_start":5,"column_end":19}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":305730,"byte_end":305739,"line_start":552,"line_end":552,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":305744,"byte_end":305755,"line_start":553,"line_end":553,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3241},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":306367,"byte_end":306378,"line_start":573,"line_end":573,"column_start":12,"column_end":23},"name":"determinant","qualname":"<Transform2D<T, Src, Dst>>::determinant","value":"pub fn determinant(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes and returns the determinant of this transform.\n","sig":null,"attributes":[{"value":"/ Computes and returns the determinant of this transform.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":306296,"byte_end":306355,"line_start":572,"line_end":572,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3242},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":306548,"byte_end":306561,"line_start":579,"line_end":579,"column_start":12,"column_end":25},"name":"is_invertible","qualname":"<Transform2D<T, Src, Dst>>::is_invertible","value":"pub fn is_invertible(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether it is possible to compute the inverse transform.\n","sig":null,"attributes":[{"value":"/ Returns whether it is possible to compute the inverse transform.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":306454,"byte_end":306522,"line_start":577,"line_end":577,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":306527,"byte_end":306536,"line_start":578,"line_end":578,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3243},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":306707,"byte_end":306714,"line_start":585,"line_end":585,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Transform2D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Option<Transform2D<T, Dst, Src>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse transform if possible.\n","sig":null,"attributes":[{"value":"/ Returns the inverse transform if possible.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":306633,"byte_end":306679,"line_start":583,"line_end":583,"column_start":5,"column_end":51}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":306684,"byte_end":306695,"line_start":584,"line_end":584,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":3361},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315762,"byte_end":315773,"line_start":64,"line_end":64,"column_start":12,"column_end":23},"name":"Transform3D","qualname":"::transform3d::Transform3D","value":"Transform3D { m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44, _unit }","parent":null,"children":[{"krate":0,"index":3365},{"krate":0,"index":3366},{"krate":0,"index":3367},{"krate":0,"index":3368},{"krate":0,"index":3369},{"krate":0,"index":3370},{"krate":0,"index":3371},{"krate":0,"index":3372},{"krate":0,"index":3373},{"krate":0,"index":3374},{"krate":0,"index":3375},{"krate":0,"index":3376},{"krate":0,"index":3377},{"krate":0,"index":3378},{"krate":0,"index":3379},{"krate":0,"index":3380},{"krate":0,"index":3381}],"decl_id":null,"docs":" A 3d transform stored as a column-major 4 by 4 matrix.","sig":null,"attributes":[{"value":"/ A 3d transform stored as a column-major 4 by 4 matrix.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":314491,"byte_end":314549,"line_start":35,"line_end":35,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":314550,"byte_end":314553,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Transforms can be parametrized over the source and destination units, to describe a","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":314554,"byte_end":314641,"line_start":37,"line_end":37,"column_start":1,"column_end":88}},{"value":"/ transformation from a space to another.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":314642,"byte_end":314685,"line_start":38,"line_end":38,"column_start":1,"column_end":44}},{"value":"/ For example, `Transform3D<f32, WorldSpace, ScreenSpace>::transform_point3d`","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":314686,"byte_end":314765,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ takes a `Point3D<f32, WorldSpace>` and returns a `Point3D<f32, ScreenSpace>`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":314766,"byte_end":314847,"line_start":40,"line_end":40,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":314848,"byte_end":314851,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Transforms expose a set of convenience methods for pre- and post-transformations.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":314852,"byte_end":314937,"line_start":42,"line_end":42,"column_start":1,"column_end":86}},{"value":"/ Pre-transformations (`pre_*` methods) correspond to adding an operation that is","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":314938,"byte_end":315021,"line_start":43,"line_end":43,"column_start":1,"column_end":84}},{"value":"/ applied before the rest of the transformation, while post-transformations (`then_*`","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315022,"byte_end":315109,"line_start":44,"line_end":44,"column_start":1,"column_end":88}},{"value":"/ methods) add an operation that is applied after.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315110,"byte_end":315162,"line_start":45,"line_end":45,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315163,"byte_end":315166,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ When translating Transform3D into general matrix representations, consider that the","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315167,"byte_end":315254,"line_start":47,"line_end":47,"column_start":1,"column_end":88}},{"value":"/ representation follows the column major notation with column vectors.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315255,"byte_end":315328,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315329,"byte_end":315332,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315333,"byte_end":315344,"line_start":50,"line_end":50,"column_start":1,"column_end":12}},{"value":"/  |x'|   | m11 m12 m13 m14 |   |x|","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315345,"byte_end":315382,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/  |y'|   | m21 m22 m23 m24 |   |y|","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315383,"byte_end":315420,"line_start":52,"line_end":52,"column_start":1,"column_end":38}},{"value":"/  |z'| = | m31 m32 m33 m34 | x |y|","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315421,"byte_end":315458,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/  |w |   | m41 m42 m43 m44 |   |1|","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315459,"byte_end":315496,"line_start":54,"line_end":54,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315497,"byte_end":315504,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315505,"byte_end":315508,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The translation terms are m41, m42 and m43.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315509,"byte_end":315556,"line_start":57,"line_end":57,"column_start":1,"column_end":48}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315557,"byte_end":315567,"line_start":58,"line_end":58,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3365},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315797,"byte_end":315800,"line_start":65,"line_end":65,"column_start":9,"column_end":12},"name":"m11","qualname":"::transform3d::Transform3D::m11","value":"T","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3366},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315809,"byte_end":315812,"line_start":65,"line_end":65,"column_start":21,"column_end":24},"name":"m12","qualname":"::transform3d::Transform3D::m12","value":"T","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3367},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315821,"byte_end":315824,"line_start":65,"line_end":65,"column_start":33,"column_end":36},"name":"m13","qualname":"::transform3d::Transform3D::m13","value":"T","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3368},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315833,"byte_end":315836,"line_start":65,"line_end":65,"column_start":45,"column_end":48},"name":"m14","qualname":"::transform3d::Transform3D::m14","value":"T","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3369},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315849,"byte_end":315852,"line_start":66,"line_end":66,"column_start":9,"column_end":12},"name":"m21","qualname":"::transform3d::Transform3D::m21","value":"T","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3370},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315861,"byte_end":315864,"line_start":66,"line_end":66,"column_start":21,"column_end":24},"name":"m22","qualname":"::transform3d::Transform3D::m22","value":"T","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3371},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315873,"byte_end":315876,"line_start":66,"line_end":66,"column_start":33,"column_end":36},"name":"m23","qualname":"::transform3d::Transform3D::m23","value":"T","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3372},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315885,"byte_end":315888,"line_start":66,"line_end":66,"column_start":45,"column_end":48},"name":"m24","qualname":"::transform3d::Transform3D::m24","value":"T","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3373},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315901,"byte_end":315904,"line_start":67,"line_end":67,"column_start":9,"column_end":12},"name":"m31","qualname":"::transform3d::Transform3D::m31","value":"T","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3374},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315913,"byte_end":315916,"line_start":67,"line_end":67,"column_start":21,"column_end":24},"name":"m32","qualname":"::transform3d::Transform3D::m32","value":"T","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3375},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315925,"byte_end":315928,"line_start":67,"line_end":67,"column_start":33,"column_end":36},"name":"m33","qualname":"::transform3d::Transform3D::m33","value":"T","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3376},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315937,"byte_end":315940,"line_start":67,"line_end":67,"column_start":45,"column_end":48},"name":"m34","qualname":"::transform3d::Transform3D::m34","value":"T","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3377},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315953,"byte_end":315956,"line_start":68,"line_end":68,"column_start":9,"column_end":12},"name":"m41","qualname":"::transform3d::Transform3D::m41","value":"T","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3378},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315965,"byte_end":315968,"line_start":68,"line_end":68,"column_start":21,"column_end":24},"name":"m42","qualname":"::transform3d::Transform3D::m42","value":"T","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3379},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315977,"byte_end":315980,"line_start":68,"line_end":68,"column_start":33,"column_end":36},"name":"m43","qualname":"::transform3d::Transform3D::m43","value":"T","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3380},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":315989,"byte_end":315992,"line_start":68,"line_end":68,"column_start":45,"column_end":48},"name":"m44","qualname":"::transform3d::Transform3D::m44","value":"T","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3381},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":316024,"byte_end":316029,"line_start":70,"line_end":70,"column_start":9,"column_end":14},"name":"_unit","qualname":"::transform3d::Transform3D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":3361},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3410},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319787,"byte_end":319790,"line_start":203,"line_end":203,"column_start":18,"column_end":21},"name":"new","qualname":"<Transform3D<T, Src, Dst>>::new","value":"pub const fn new(T, T, T, T, T, T, T, T, T, T, T, T, T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform specifying all of it's component as a 4 by 4 matrix.","sig":null,"attributes":[{"value":"/ Create a transform specifying all of it's component as a 4 by 4 matrix.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319104,"byte_end":319179,"line_start":184,"line_end":184,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319184,"byte_end":319187,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ Components are specified following column-major-column-vector matrix notation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319192,"byte_end":319274,"line_start":186,"line_end":186,"column_start":5,"column_end":87}},{"value":"/ For example, the translation terms m41, m42, m43 are the 13rd, 14th and 15th parameters.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319279,"byte_end":319371,"line_start":187,"line_end":187,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319376,"byte_end":319379,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319384,"byte_end":319391,"line_start":189,"line_end":189,"column_start":5,"column_end":12}},{"value":"/ use euclid::default::Transform3D;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319396,"byte_end":319433,"line_start":190,"line_end":190,"column_start":5,"column_end":42}},{"value":"/ let tx = 1.0;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319438,"byte_end":319455,"line_start":191,"line_end":191,"column_start":5,"column_end":22}},{"value":"/ let ty = 2.0;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319460,"byte_end":319477,"line_start":192,"line_end":192,"column_start":5,"column_end":22}},{"value":"/ let tz = 3.0;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319482,"byte_end":319499,"line_start":193,"line_end":193,"column_start":5,"column_end":22}},{"value":"/ let translation = Transform3D::new(","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319504,"byte_end":319543,"line_start":194,"line_end":194,"column_start":5,"column_end":44}},{"value":"/   1.0, 0.0, 0.0, 0.0,","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319548,"byte_end":319573,"line_start":195,"line_end":195,"column_start":5,"column_end":30}},{"value":"/   0.0, 1.0, 0.0, 0.0,","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319578,"byte_end":319603,"line_start":196,"line_end":196,"column_start":5,"column_end":30}},{"value":"/   0.0, 0.0, 1.0, 0.0,","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319608,"byte_end":319633,"line_start":197,"line_end":197,"column_start":5,"column_end":30}},{"value":"/   tx,  ty,  tz,  1.0,","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319638,"byte_end":319663,"line_start":198,"line_end":198,"column_start":5,"column_end":30}},{"value":"/ );","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319668,"byte_end":319674,"line_start":199,"line_end":199,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319679,"byte_end":319686,"line_start":200,"line_end":200,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319691,"byte_end":319700,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3411},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":320585,"byte_end":320591,"line_start":231,"line_end":231,"column_start":12,"column_end":18},"name":"new_2d","qualname":"<Transform3D<T, Src, Dst>>::new_2d","value":"pub fn new_2d(T, T, T, T, T, T) -> Self where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Create a transform representing a 2d transformation from the components\n of a 2 by 3 matrix transformation.","sig":null,"attributes":[{"value":"/ Create a transform representing a 2d transformation from the components","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":320171,"byte_end":320246,"line_start":218,"line_end":218,"column_start":5,"column_end":80}},{"value":"/ of a 2 by 3 matrix transformation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":320251,"byte_end":320289,"line_start":219,"line_end":219,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":320294,"byte_end":320297,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Components follow the column-major-column-vector notation (m41 and m42","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":320302,"byte_end":320376,"line_start":221,"line_end":221,"column_start":5,"column_end":79}},{"value":"/ representating the translation terms).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":320381,"byte_end":320423,"line_start":222,"line_end":222,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":320428,"byte_end":320431,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":320436,"byte_end":320447,"line_start":224,"line_end":224,"column_start":5,"column_end":16}},{"value":"/ m11  m12   0   0","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":320452,"byte_end":320472,"line_start":225,"line_end":225,"column_start":5,"column_end":25}},{"value":"/ m21  m22   0   0","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":320477,"byte_end":320497,"line_start":226,"line_end":226,"column_start":5,"column_end":25}},{"value":"/   0    0   1   0","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":320502,"byte_end":320522,"line_start":227,"line_end":227,"column_start":5,"column_end":25}},{"value":"/ m41  m42   0   1","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":320527,"byte_end":320547,"line_start":228,"line_end":228,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":320552,"byte_end":320559,"line_start":229,"line_end":229,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":320564,"byte_end":320573,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3414},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":321111,"byte_end":321116,"line_start":251,"line_end":251,"column_start":12,"column_end":17},"name":"is_2d","qualname":"<Transform3D<T, Src, Dst>>::is_2d","value":"pub fn is_2d(&Self) -> bool where T: Zero + One + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this transform can be represented with a `Transform2D`.","sig":null,"attributes":[{"value":"/ Returns `true` if this transform can be represented with a `Transform2D`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":320932,"byte_end":321009,"line_start":247,"line_end":247,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":321014,"byte_end":321017,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ See <https://drafts.csswg.org/css-transforms/#2d-transform>","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":321022,"byte_end":321085,"line_start":249,"line_end":249,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":321090,"byte_end":321099,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3419},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":321903,"byte_end":321911,"line_start":274,"line_end":274,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Transform3D<T, Src, Dst>>::to_array","value":"pub fn to_array(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":321523,"byte_end":321578,"line_start":265,"line_end":265,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":321583,"byte_end":321586,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ The terms are laid out in the same order as they are","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":321591,"byte_end":321647,"line_start":267,"line_end":267,"column_start":5,"column_end":61}},{"value":"/ specified in `Transform3D::new`, that is following the","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":321652,"byte_end":321710,"line_start":268,"line_end":268,"column_start":5,"column_end":63}},{"value":"/ column-major-column-vector matrix notation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":321715,"byte_end":321762,"line_start":269,"line_end":269,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":321767,"byte_end":321770,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ For example the translation terms are found on the","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":321775,"byte_end":321829,"line_start":271,"line_end":271,"column_start":5,"column_end":59}},{"value":"/ 13th, 14th and 15th slots of the array.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":321834,"byte_end":321877,"line_start":272,"line_end":272,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":321882,"byte_end":321891,"line_start":273,"line_end":273,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3421},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":322576,"byte_end":322595,"line_start":292,"line_end":292,"column_start":12,"column_end":31},"name":"to_array_transposed","qualname":"<Transform3D<T, Src, Dst>>::to_array_transposed","value":"pub fn to_array_transposed(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns an array containing this transform's terms transposed.","sig":null,"attributes":[{"value":"/ Returns an array containing this transform's terms transposed.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":322170,"byte_end":322236,"line_start":283,"line_end":283,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":322241,"byte_end":322244,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ The terms are laid out in transposed order from the same order of","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":322249,"byte_end":322318,"line_start":285,"line_end":285,"column_start":5,"column_end":74}},{"value":"/ `Transform3D::new` and `Transform3D::to_array`, that is following","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":322323,"byte_end":322392,"line_start":286,"line_end":286,"column_start":5,"column_end":74}},{"value":"/ the row-major-column-vector matrix notation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":322397,"byte_end":322445,"line_start":287,"line_end":287,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":322450,"byte_end":322453,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ For example the translation terms are found at indices 3, 7 and 11","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":322458,"byte_end":322528,"line_start":289,"line_end":289,"column_start":5,"column_end":75}},{"value":"/ of the array.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":322533,"byte_end":322550,"line_start":290,"line_end":290,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":322555,"byte_end":322564,"line_start":291,"line_end":291,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3423},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":322975,"byte_end":322984,"line_start":304,"line_end":304,"column_start":12,"column_end":21},"name":"to_arrays","qualname":"<Transform3D<T, Src, Dst>>::to_arrays","value":"pub fn to_arrays(&Self) -> [[T; ]; ]","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `to_array` with elements packed four at a time\n in an array of arrays.\n","sig":null,"attributes":[{"value":"/ Equivalent to `to_array` with elements packed four at a time","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":322854,"byte_end":322918,"line_start":301,"line_end":301,"column_start":5,"column_end":69}},{"value":"/ in an array of arrays.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":322923,"byte_end":322949,"line_start":302,"line_end":302,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":322954,"byte_end":322963,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3426},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":323387,"byte_end":323407,"line_start":316,"line_end":316,"column_start":12,"column_end":32},"name":"to_arrays_transposed","qualname":"<Transform3D<T, Src, Dst>>::to_arrays_transposed","value":"pub fn to_arrays_transposed(&Self) -> [[T; ]; ]","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `to_array_transposed` with elements packed\n four at a time in an array of arrays.\n","sig":null,"attributes":[{"value":"/ Equivalent to `to_array_transposed` with elements packed","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":323255,"byte_end":323315,"line_start":313,"line_end":313,"column_start":5,"column_end":65}},{"value":"/ four at a time in an array of arrays.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":323320,"byte_end":323361,"line_start":314,"line_end":314,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":323366,"byte_end":323375,"line_start":315,"line_end":315,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3429},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":323986,"byte_end":323996,"line_start":332,"line_end":332,"column_start":12,"column_end":22},"name":"from_array","qualname":"<Transform3D<T, Src, Dst>>::from_array","value":"pub fn from_array([T; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a transform providing its components via an array\n of 16 elements instead of as individual parameters.","sig":null,"attributes":[{"value":"/ Create a transform providing its components via an array","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":323678,"byte_end":323738,"line_start":325,"line_end":325,"column_start":5,"column_end":65}},{"value":"/ of 16 elements instead of as individual parameters.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":323743,"byte_end":323798,"line_start":326,"line_end":326,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":323803,"byte_end":323806,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ The order of the components corresponds to the","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":323811,"byte_end":323861,"line_start":328,"line_end":328,"column_start":5,"column_end":55}},{"value":"/ column-major-column-vector matrix notation (the same order","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":323866,"byte_end":323928,"line_start":329,"line_end":329,"column_start":5,"column_end":67}},{"value":"/ as `Transform3D::new`).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":323933,"byte_end":323960,"line_start":330,"line_end":330,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":323965,"byte_end":323974,"line_start":331,"line_end":331,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3431},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":324570,"byte_end":324581,"line_start":348,"line_end":348,"column_start":12,"column_end":23},"name":"from_arrays","qualname":"<Transform3D<T, Src, Dst>>::from_arrays","value":"pub fn from_arrays([[T; ]; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `from_array` with elements packed four at a time\n in an array of arrays.","sig":null,"attributes":[{"value":"/ Equivalent to `from_array` with elements packed four at a time","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":324285,"byte_end":324351,"line_start":341,"line_end":341,"column_start":5,"column_end":71}},{"value":"/ in an array of arrays.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":324356,"byte_end":324382,"line_start":342,"line_end":342,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":324387,"byte_end":324390,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ The order of the components corresponds to the","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":324395,"byte_end":324445,"line_start":344,"line_end":344,"column_start":5,"column_end":55}},{"value":"/ column-major-column-vector matrix notation (the same order","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":324450,"byte_end":324512,"line_start":345,"line_end":345,"column_start":5,"column_end":67}},{"value":"/ as `Transform3D::new`).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":324517,"byte_end":324544,"line_start":346,"line_end":346,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":324549,"byte_end":324558,"line_start":347,"line_end":347,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3434},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":324970,"byte_end":324982,"line_start":359,"line_end":359,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Transform3D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Transform3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":324908,"byte_end":324944,"line_start":357,"line_end":357,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":324949,"byte_end":324958,"line_start":358,"line_end":358,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3435},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":325326,"byte_end":325336,"line_start":370,"line_end":370,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Transform3D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Transform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":325246,"byte_end":325300,"line_start":368,"line_end":368,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":325305,"byte_end":325314,"line_start":369,"line_end":369,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3436},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":325731,"byte_end":325742,"line_start":381,"line_end":381,"column_start":12,"column_end":23},"name":"with_source","qualname":"<Transform3D<T, Src, Dst>>::with_source","value":"pub fn with_source<NewSrc>(&Self) -> Transform3D<T, NewSrc, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different source unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different source unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":325645,"byte_end":325705,"line_start":379,"line_end":379,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":325710,"byte_end":325719,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3438},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":326137,"byte_end":326153,"line_start":392,"line_end":392,"column_start":12,"column_end":28},"name":"with_destination","qualname":"<Transform3D<T, Src, Dst>>::with_destination","value":"pub fn with_destination<NewDst>(&Self) -> Transform3D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same transform with a different destination unit.\n","sig":null,"attributes":[{"value":"/ Returns the same transform with a different destination unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":326046,"byte_end":326111,"line_start":390,"line_end":390,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":326116,"byte_end":326125,"line_start":391,"line_end":391,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3440},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":326746,"byte_end":326751,"line_start":407,"line_end":407,"column_start":12,"column_end":17},"name":"to_2d","qualname":"<Transform3D<T, Src, Dst>>::to_2d","value":"pub fn to_2d(&Self) -> Transform2D<T, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Create a 2D transform picking the relevant terms from this transform.","sig":null,"attributes":[{"value":"/ Create a 2D transform picking the relevant terms from this transform.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":326457,"byte_end":326530,"line_start":401,"line_end":401,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":326535,"byte_end":326538,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ This method assumes that self represents a 2d transformation, callers","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":326543,"byte_end":326616,"line_start":403,"line_end":403,"column_start":5,"column_end":78}},{"value":"/ should check that [`self.is_2d()`] returns `true` beforehand.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":326621,"byte_end":326686,"line_start":404,"line_end":404,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":326691,"byte_end":326694,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ [`self.is_2d()`]: #method.is_2d","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":326699,"byte_end":326734,"line_start":406,"line_end":406,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3445},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":327161,"byte_end":327169,"line_start":429,"line_end":429,"column_start":12,"column_end":20},"name":"identity","qualname":"<Transform3D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an identity matrix:","sig":null,"attributes":[{"value":"/ Creates an identity matrix:","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":327004,"byte_end":327035,"line_start":420,"line_end":420,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":327040,"byte_end":327043,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":327048,"byte_end":327059,"line_start":422,"line_end":422,"column_start":5,"column_end":16}},{"value":"/ 1 0 0 0","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":327064,"byte_end":327075,"line_start":423,"line_end":423,"column_start":5,"column_end":16}},{"value":"/ 0 1 0 0","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":327080,"byte_end":327091,"line_start":424,"line_end":424,"column_start":5,"column_end":16}},{"value":"/ 0 0 1 0","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":327096,"byte_end":327107,"line_start":425,"line_end":425,"column_start":5,"column_end":16}},{"value":"/ 0 0 0 1","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":327112,"byte_end":327123,"line_start":426,"line_end":426,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":327128,"byte_end":327135,"line_start":427,"line_end":427,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":327140,"byte_end":327149,"line_start":428,"line_end":428,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3447},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":327699,"byte_end":327703,"line_start":447,"line_end":447,"column_start":12,"column_end":16},"name":"skew","qualname":"<Transform3D<T, Src, Dst>>::skew","value":"pub fn skew(Angle<T>, Angle<T>) -> Self where T: Trig","parent":null,"children":[],"decl_id":null,"docs":" Create a 2d skew transform.","sig":null,"attributes":[{"value":"/ Create a 2d skew transform.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":327580,"byte_end":327611,"line_start":444,"line_end":444,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":327616,"byte_end":327619,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ See <https://drafts.csswg.org/css-transforms/#funcdef-skew>","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":327624,"byte_end":327687,"line_start":446,"line_end":446,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":3450},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":328388,"byte_end":328399,"line_start":473,"line_end":473,"column_start":12,"column_end":23},"name":"perspective","qualname":"<Transform3D<T, Src, Dst>>::perspective","value":"pub fn perspective(T) -> Self where T: Neg<Output = T> + Div<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Create a simple perspective transform, projecting to the plane `z = -d`.","sig":null,"attributes":[{"value":"/ Create a simple perspective transform, projecting to the plane `z = -d`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":328090,"byte_end":328166,"line_start":463,"line_end":463,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":328171,"byte_end":328174,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":328179,"byte_end":328190,"line_start":465,"line_end":465,"column_start":5,"column_end":16}},{"value":"/ 1   0   0   0","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":328195,"byte_end":328212,"line_start":466,"line_end":466,"column_start":5,"column_end":22}},{"value":"/ 0   1   0   0","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":328217,"byte_end":328234,"line_start":467,"line_end":467,"column_start":5,"column_end":22}},{"value":"/ 0   0   1 -1/d","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":328239,"byte_end":328257,"line_start":468,"line_end":468,"column_start":5,"column_end":23}},{"value":"/ 0   0   0   1","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":328262,"byte_end":328279,"line_start":469,"line_end":469,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":328284,"byte_end":328291,"line_start":470,"line_end":470,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":328296,"byte_end":328299,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ See <https://drafts.csswg.org/css-transforms-2/#PerspectiveDefined>.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":328304,"byte_end":328376,"line_start":472,"line_end":472,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3457},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":329109,"byte_end":329113,"line_start":500,"line_end":500,"column_start":12,"column_end":16},"name":"then","qualname":"<Transform3D<T, Src, Dst>>::then","value":"pub fn then<NewDst>(&Self, &Transform3D<T, Dst, NewDst>)\n-> Transform3D<T, Src, NewDst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplication of the two matrices such that mat's transformation\n applies after self's transformation.","sig":null,"attributes":[{"value":"/ Returns the multiplication of the two matrices such that mat's transformation","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":328884,"byte_end":328965,"line_start":495,"line_end":495,"column_start":5,"column_end":86}},{"value":"/ applies after self's transformation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":328970,"byte_end":329010,"line_start":496,"line_end":496,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":329015,"byte_end":329018,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ Assuming row vectors, this is equivalent to self * mat","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":329023,"byte_end":329081,"line_start":498,"line_end":498,"column_start":5,"column_end":63}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":329086,"byte_end":329097,"line_start":499,"line_end":499,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3463},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":331297,"byte_end":331308,"line_start":539,"line_end":539,"column_start":12,"column_end":23},"name":"translation","qualname":"<Transform3D<T, Src, Dst>>::translation","value":"pub fn translation(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d translation transform:","sig":null,"attributes":[{"value":"/ Create a 3d translation transform:","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":331133,"byte_end":331171,"line_start":530,"line_end":530,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":331176,"byte_end":331179,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":331184,"byte_end":331195,"line_start":532,"line_end":532,"column_start":5,"column_end":16}},{"value":"/ 1 0 0 0","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":331200,"byte_end":331211,"line_start":533,"line_end":533,"column_start":5,"column_end":16}},{"value":"/ 0 1 0 0","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":331216,"byte_end":331227,"line_start":534,"line_end":534,"column_start":5,"column_end":16}},{"value":"/ 0 0 1 0","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":331232,"byte_end":331243,"line_start":535,"line_end":535,"column_start":5,"column_end":16}},{"value":"/ x y z 1","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":331248,"byte_end":331259,"line_start":536,"line_end":536,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":331264,"byte_end":331271,"line_start":537,"line_end":537,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":331276,"byte_end":331285,"line_start":538,"line_end":538,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3466},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":331691,"byte_end":331704,"line_start":553,"line_end":553,"column_start":12,"column_end":25},"name":"pre_translate","qualname":"<Transform3D<T, Src, Dst>>::pre_translate","value":"pub fn pre_translate(&Self, Vector3D<T, Src>) -> Self where T: Copy +\nAdd<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a translation applied before self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a translation applied before self's transformation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":331583,"byte_end":331663,"line_start":551,"line_end":551,"column_start":5,"column_end":85}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":331668,"byte_end":331679,"line_start":552,"line_end":552,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3467},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":331987,"byte_end":332001,"line_start":562,"line_end":562,"column_start":12,"column_end":26},"name":"then_translate","qualname":"<Transform3D<T, Src, Dst>>::then_translate","value":"pub fn then_translate(&Self, Vector3D<T, Dst>) -> Self where T: Copy +\nAdd<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a translation applied after self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a translation applied after self's transformation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":331880,"byte_end":331959,"line_start":560,"line_end":560,"column_start":5,"column_end":84}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":331964,"byte_end":331975,"line_start":561,"line_end":561,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3472},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":332514,"byte_end":332522,"line_start":577,"line_end":577,"column_start":12,"column_end":20},"name":"rotation","qualname":"<Transform3D<T, Src, Dst>>::rotation","value":"pub fn rotation(T, T, T, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d rotation transform from an angle / axis.\n The supplied axis must be normalized.\n","sig":null,"attributes":[{"value":"/ Create a 3d rotation transform from an angle / axis.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":332400,"byte_end":332456,"line_start":575,"line_end":575,"column_start":5,"column_end":61}},{"value":"/ The supplied axis must be normalized.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":332461,"byte_end":332502,"line_start":576,"line_end":576,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3473},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":333499,"byte_end":333510,"line_start":615,"line_end":615,"column_start":12,"column_end":23},"name":"then_rotate","qualname":"<Transform3D<T, Src, Dst>>::then_rotate","value":"pub fn then_rotate(&Self, T, T, T, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a rotation applied after self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a rotation applied after self's transformation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":333395,"byte_end":333471,"line_start":613,"line_end":613,"column_start":5,"column_end":81}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":333476,"byte_end":333487,"line_start":614,"line_end":614,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3474},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":333737,"byte_end":333747,"line_start":621,"line_end":621,"column_start":12,"column_end":22},"name":"pre_rotate","qualname":"<Transform3D<T, Src, Dst>>::pre_rotate","value":"pub fn pre_rotate(&Self, T, T, T, Angle<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a rotation applied before self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a rotation applied before self's transformation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":333632,"byte_end":333709,"line_start":619,"line_end":619,"column_start":5,"column_end":82}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":333714,"byte_end":333725,"line_start":620,"line_end":620,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3479},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":334159,"byte_end":334164,"line_start":640,"line_end":640,"column_start":12,"column_end":17},"name":"scale","qualname":"<Transform3D<T, Src, Dst>>::scale","value":"pub fn scale(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d scale transform:","sig":null,"attributes":[{"value":"/ Create a 3d scale transform:","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":334001,"byte_end":334033,"line_start":631,"line_end":631,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":334038,"byte_end":334041,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":334046,"byte_end":334057,"line_start":633,"line_end":633,"column_start":5,"column_end":16}},{"value":"/ x 0 0 0","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":334062,"byte_end":334073,"line_start":634,"line_end":634,"column_start":5,"column_end":16}},{"value":"/ 0 y 0 0","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":334078,"byte_end":334089,"line_start":635,"line_end":635,"column_start":5,"column_end":16}},{"value":"/ 0 0 z 0","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":334094,"byte_end":334105,"line_start":636,"line_end":636,"column_start":5,"column_end":16}},{"value":"/ 0 0 0 1","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":334110,"byte_end":334121,"line_start":637,"line_end":637,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":334126,"byte_end":334133,"line_start":638,"line_end":638,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":334138,"byte_end":334147,"line_start":639,"line_end":639,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3482},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":334541,"byte_end":334550,"line_start":654,"line_end":654,"column_start":12,"column_end":21},"name":"pre_scale","qualname":"<Transform3D<T, Src, Dst>>::pre_scale","value":"pub fn pre_scale(&Self, T, T, T) -> Self where T: Copy + Add<Output = T> +\nMul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a scale applied before self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a scale applied before self's transformation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":334439,"byte_end":334513,"line_start":652,"line_end":652,"column_start":5,"column_end":79}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":334518,"byte_end":334529,"line_start":653,"line_end":653,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3483},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":335068,"byte_end":335078,"line_start":668,"line_end":668,"column_start":12,"column_end":22},"name":"then_scale","qualname":"<Transform3D<T, Src, Dst>>::then_scale","value":"pub fn then_scale(&Self, T, T, T) -> Self where T: Copy + Add<Output = T> +\nMul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a transform with a scale applied after self's transformation.\n","sig":null,"attributes":[{"value":"/ Returns a transform with a scale applied after self's transformation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":334967,"byte_end":335040,"line_start":666,"line_end":666,"column_start":5,"column_end":78}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":335045,"byte_end":335056,"line_start":667,"line_end":667,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3488},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":335593,"byte_end":335622,"line_start":685,"line_end":685,"column_start":12,"column_end":41},"name":"transform_point2d_homogeneous","qualname":"<Transform3D<T, Src, Dst>>::transform_point2d_homogeneous","value":"pub fn transform_point2d_homogeneous(&Self, Point2D<T, Src>)\n-> HomogeneousVector<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the homogeneous vector corresponding to the transformed 2d point.","sig":null,"attributes":[{"value":"/ Returns the homogeneous vector corresponding to the transformed 2d point.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":335391,"byte_end":335468,"line_start":681,"line_end":681,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":335473,"byte_end":335476,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":335481,"byte_end":335567,"line_start":683,"line_end":683,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":335572,"byte_end":335581,"line_start":684,"line_end":684,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3489},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":336235,"byte_end":336252,"line_start":701,"line_end":701,"column_start":12,"column_end":29},"name":"transform_point2d","qualname":"<Transform3D<T, Src, Dst>>::transform_point2d","value":"pub fn transform_point2d(&Self, Point2D<T, Src>) -> Option<Point2D<T, Dst>>\nwhere T: Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d point transformed by this transform, if the transform makes sense,\n or `None` otherwise.","sig":null,"attributes":[{"value":"/ Returns the given 2d point transformed by this transform, if the transform makes sense,","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":335990,"byte_end":336081,"line_start":696,"line_end":696,"column_start":5,"column_end":96}},{"value":"/ or `None` otherwise.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":336086,"byte_end":336110,"line_start":697,"line_end":697,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":336115,"byte_end":336118,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":336123,"byte_end":336209,"line_start":699,"line_end":699,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":336214,"byte_end":336223,"line_start":700,"line_end":700,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3490},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":336970,"byte_end":336988,"line_start":721,"line_end":721,"column_start":12,"column_end":30},"name":"transform_vector2d","qualname":"<Transform3D<T, Src, Dst>>::transform_vector2d","value":"pub fn transform_vector2d(&Self, Vector2D<T, Src>) -> Vector2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 2d vector transformed by this matrix.","sig":null,"attributes":[{"value":"/ Returns the given 2d vector transformed by this matrix.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":336786,"byte_end":336845,"line_start":717,"line_end":717,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":336850,"byte_end":336853,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":336858,"byte_end":336944,"line_start":719,"line_end":719,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":336949,"byte_end":336958,"line_start":720,"line_end":720,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3491},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":337366,"byte_end":337395,"line_start":732,"line_end":732,"column_start":12,"column_end":41},"name":"transform_point3d_homogeneous","qualname":"<Transform3D<T, Src, Dst>>::transform_point3d_homogeneous","value":"pub fn transform_point3d_homogeneous(&Self, Point3D<T, Src>)\n-> HomogeneousVector<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the homogeneous vector corresponding to the transformed 3d point.","sig":null,"attributes":[{"value":"/ Returns the homogeneous vector corresponding to the transformed 3d point.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":337164,"byte_end":337241,"line_start":728,"line_end":728,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":337246,"byte_end":337249,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":337254,"byte_end":337340,"line_start":730,"line_end":730,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":337345,"byte_end":337354,"line_start":731,"line_end":731,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3492},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":338076,"byte_end":338093,"line_start":748,"line_end":748,"column_start":12,"column_end":29},"name":"transform_point3d","qualname":"<Transform3D<T, Src, Dst>>::transform_point3d","value":"pub fn transform_point3d(&Self, Point3D<T, Src>) -> Option<Point3D<T, Dst>>\nwhere T: Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d point transformed by this transform, if the transform makes sense,\n or `None` otherwise.","sig":null,"attributes":[{"value":"/ Returns the given 3d point transformed by this transform, if the transform makes sense,","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":337831,"byte_end":337922,"line_start":743,"line_end":743,"column_start":5,"column_end":96}},{"value":"/ or `None` otherwise.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":337927,"byte_end":337951,"line_start":744,"line_end":744,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":337956,"byte_end":337959,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":337964,"byte_end":338050,"line_start":746,"line_end":746,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":338055,"byte_end":338064,"line_start":747,"line_end":747,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3493},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":338466,"byte_end":338484,"line_start":759,"line_end":759,"column_start":12,"column_end":30},"name":"transform_vector3d","qualname":"<Transform3D<T, Src, Dst>>::transform_vector3d","value":"pub fn transform_vector3d(&Self, Vector3D<T, Src>) -> Vector3D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Returns the given 3d vector transformed by this matrix.","sig":null,"attributes":[{"value":"/ Returns the given 3d vector transformed by this matrix.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":338282,"byte_end":338341,"line_start":755,"line_end":755,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":338346,"byte_end":338349,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ The input point must be use the unit Src, and the returned point has the unit Dst.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":338354,"byte_end":338440,"line_start":757,"line_end":757,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":338445,"byte_end":338454,"line_start":758,"line_end":758,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3494},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":338940,"byte_end":338962,"line_start":769,"line_end":769,"column_start":12,"column_end":34},"name":"outer_transformed_rect","qualname":"<Transform3D<T, Src, Dst>>::outer_transformed_rect","value":"pub fn outer_transformed_rect(&Self, &Rect<T, Src>) -> Option<Rect<T, Dst>>\nwhere T: Sub<Output = T> + Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a rectangle that encompasses the result of transforming the given rectangle by this\n transform, if the transform makes sense for it, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns a rectangle that encompasses the result of transforming the given rectangle by this","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":338756,"byte_end":338851,"line_start":767,"line_end":767,"column_start":5,"column_end":100}},{"value":"/ transform, if the transform makes sense for it, or `None` otherwise.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":338856,"byte_end":338928,"line_start":768,"line_end":768,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3495},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":339591,"byte_end":339614,"line_start":785,"line_end":785,"column_start":12,"column_end":35},"name":"outer_transformed_box2d","qualname":"<Transform3D<T, Src, Dst>>::outer_transformed_box2d","value":"pub fn outer_transformed_box2d(&Self, &Box2D<T, Src>) -> Option<Box2D<T, Dst>>\nwhere T: Sub<Output = T> + Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d box that encompasses the result of transforming the given box by this\n transform, if the transform makes sense for it, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns a 2d box that encompasses the result of transforming the given box by this","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":339416,"byte_end":339502,"line_start":783,"line_end":783,"column_start":5,"column_end":91}},{"value":"/ transform, if the transform makes sense for it, or `None` otherwise.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":339507,"byte_end":339579,"line_start":784,"line_end":784,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3496},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":340195,"byte_end":340218,"line_start":799,"line_end":799,"column_start":12,"column_end":35},"name":"outer_transformed_box3d","qualname":"<Transform3D<T, Src, Dst>>::outer_transformed_box3d","value":"pub fn outer_transformed_box3d(&Self, &Box3D<T, Src>) -> Option<Box3D<T, Dst>>\nwhere T: Sub<Output = T> + Div<Output = T> + Zero + PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Returns a 3d box that encompasses the result of transforming the given box by this\n transform, if the transform makes sense for it, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns a 3d box that encompasses the result of transforming the given box by this","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":340020,"byte_end":340106,"line_start":797,"line_end":797,"column_start":5,"column_end":91}},{"value":"/ transform, if the transform makes sense for it, or `None` otherwise.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":340111,"byte_end":340183,"line_start":798,"line_end":798,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3501},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":341289,"byte_end":341294,"line_start":828,"line_end":828,"column_start":12,"column_end":17},"name":"ortho","qualname":"<Transform3D<T, Src, Dst>>::ortho","value":"pub fn ortho(T, T, T, T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an orthogonal projection transform.\n","sig":null,"attributes":[{"value":"/ Create an orthogonal projection transform.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":341231,"byte_end":341277,"line_start":827,"line_end":827,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3502},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":342137,"byte_end":342156,"line_start":847,"line_end":847,"column_start":12,"column_end":31},"name":"is_backface_visible","qualname":"<Transform3D<T, Src, Dst>>::is_backface_visible","value":"pub fn is_backface_visible(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check whether shapes on the XY plane with Z pointing towards the\n screen transformed by this matrix would be facing back.\n","sig":null,"attributes":[{"value":"/ Check whether shapes on the XY plane with Z pointing towards the","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":341993,"byte_end":342061,"line_start":845,"line_end":845,"column_start":5,"column_end":73}},{"value":"/ screen transformed by this matrix would be facing back.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":342066,"byte_end":342125,"line_start":846,"line_end":846,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3503},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":342657,"byte_end":342670,"line_start":859,"line_end":859,"column_start":12,"column_end":25},"name":"is_invertible","qualname":"<Transform3D<T, Src, Dst>>::is_invertible","value":"pub fn is_invertible(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether it is possible to compute the inverse transform.\n","sig":null,"attributes":[{"value":"/ Returns whether it is possible to compute the inverse transform.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":342563,"byte_end":342631,"line_start":857,"line_end":857,"column_start":5,"column_end":73}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":342636,"byte_end":342645,"line_start":858,"line_end":858,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3504},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":342800,"byte_end":342807,"line_start":864,"line_end":864,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Transform3D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Option<Transform3D<T, Dst, Src>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the inverse transform if possible.\n","sig":null,"attributes":[{"value":"/ Returns the inverse transform if possible.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":342742,"byte_end":342788,"line_start":863,"line_end":863,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3505},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":346602,"byte_end":346613,"line_start":944,"line_end":944,"column_start":12,"column_end":23},"name":"determinant","qualname":"<Transform3D<T, Src, Dst>>::determinant","value":"pub fn determinant(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Compute the determinant of the transform.\n","sig":null,"attributes":[{"value":"/ Compute the determinant of the transform.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":346545,"byte_end":346590,"line_start":943,"line_end":943,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3506},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":347996,"byte_end":348001,"line_start":973,"line_end":973,"column_start":12,"column_end":17},"name":"mul_s","qualname":"<Transform3D<T, Src, Dst>>::mul_s","value":"pub fn mul_s(&Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Multiplies all of the transform's component by a scalar and returns the result.\n","sig":null,"attributes":[{"value":"/ Multiplies all of the transform's component by a scalar and returns the result.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":347885,"byte_end":347968,"line_start":971,"line_end":971,"column_start":5,"column_end":88}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":347973,"byte_end":347984,"line_start":972,"line_end":972,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3507},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":348423,"byte_end":348433,"line_start":983,"line_end":983,"column_start":12,"column_end":22},"name":"from_scale","qualname":"<Transform3D<T, Src, Dst>>::from_scale","value":"pub fn from_scale(Scale<T, Src, Dst>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convenience function to create a scale transform from a `Scale`.\n","sig":null,"attributes":[{"value":"/ Convenience function to create a scale transform from a `Scale`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":348343,"byte_end":348411,"line_start":982,"line_end":982,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3512},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":348743,"byte_end":348756,"line_start":993,"line_end":993,"column_start":12,"column_end":25},"name":"project_to_2d","qualname":"<Transform3D<T, Src, Dst>>::project_to_2d","value":"pub fn project_to_2d(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a projection of this transform in 2d space.\n","sig":null,"attributes":[{"value":"/ Returns a projection of this transform in 2d space.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":348676,"byte_end":348731,"line_start":992,"line_end":992,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3517},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":350253,"byte_end":350257,"line_start":1032,"line_end":1032,"column_start":12,"column_end":16},"name":"cast","qualname":"<Transform3D<T, Src, Dst>>::cast","value":"pub fn cast<NewT: NumCast>(&Self) -> Transform3D<NewT, Src, Dst>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":350153,"byte_end":350227,"line_start":1030,"line_end":1030,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":350232,"byte_end":350241,"line_start":1031,"line_end":1031,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3519},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":350452,"byte_end":350460,"line_start":1037,"line_end":1037,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Transform3D<T, Src, Dst>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(&Self) -> Option<Transform3D<NewT, Src, Dst>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.\n","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":350357,"byte_end":350440,"line_start":1036,"line_end":1036,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":3525},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":351989,"byte_end":351998,"line_start":1068,"line_end":1068,"column_start":12,"column_end":21},"name":"approx_eq","qualname":"<Transform3D<T, Src, Dst>>::approx_eq","value":"pub fn approx_eq(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n T's default epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":351663,"byte_end":351744,"line_start":1061,"line_end":1061,"column_start":5,"column_end":86}},{"value":"/ T's default epsilon value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":351749,"byte_end":351779,"line_start":1062,"line_end":1062,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":351784,"byte_end":351787,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq()`] but available without importing trait.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":351792,"byte_end":351872,"line_start":1064,"line_end":1064,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":351877,"byte_end":351880,"line_start":1065,"line_end":1065,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":351885,"byte_end":351963,"line_start":1066,"line_end":1066,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":351968,"byte_end":351977,"line_start":1067,"line_end":1067,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3526},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":352434,"byte_end":352447,"line_start":1079,"line_end":1079,"column_start":12,"column_end":25},"name":"approx_eq_eps","qualname":"<Transform3D<T, Src, Dst>>::approx_eq_eps","value":"pub fn approx_eq_eps(&Self, &Self, &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true is this transform is approximately equal to the other one, using\n a provided epsilon value.","sig":null,"attributes":[{"value":"/ Returns true is this transform is approximately equal to the other one, using","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":352097,"byte_end":352178,"line_start":1072,"line_end":1072,"column_start":5,"column_end":86}},{"value":"/ a provided epsilon value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":352183,"byte_end":352212,"line_start":1073,"line_end":1073,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":352217,"byte_end":352220,"line_start":1074,"line_end":1074,"column_start":5,"column_end":8}},{"value":"/ The same as [`ApproxEq::approx_eq_eps()`] but available without importing trait.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":352225,"byte_end":352309,"line_start":1075,"line_end":1075,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":352314,"byte_end":352317,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ [`ApproxEq::approx_eq_eps()`]: ./approxeq/trait.ApproxEq.html#method.approx_eq_eps","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":352322,"byte_end":352408,"line_start":1077,"line_end":1077,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":352413,"byte_end":352422,"line_start":1078,"line_end":1078,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3624},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":366577,"byte_end":366590,"line_start":51,"line_end":51,"column_start":12,"column_end":25},"name":"Translation2D","qualname":"::translation::Translation2D","value":"Translation2D { x, y, _unit }","parent":null,"children":[{"krate":0,"index":3628},{"krate":0,"index":3629},{"krate":0,"index":3630}],"decl_id":null,"docs":" A 2d transformation from a space to another that can only express translations.","sig":null,"attributes":[{"value":"/ A 2d transformation from a space to another that can only express translations.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":365676,"byte_end":365759,"line_start":22,"line_end":22,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":365760,"byte_end":365763,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The main benefit of this type over a Vector2D is the ability to cast","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":365764,"byte_end":365836,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/ between a source and a destination spaces.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":365837,"byte_end":365883,"line_start":25,"line_end":25,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":365884,"byte_end":365887,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":365888,"byte_end":365900,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":365901,"byte_end":365904,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":365905,"byte_end":365912,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use euclid::{Translation2D, Point2D, point2};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":365913,"byte_end":365962,"line_start":30,"line_end":30,"column_start":1,"column_end":50}},{"value":"/ struct ParentSpace;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":365963,"byte_end":365986,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/ struct ChildSpace;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":365987,"byte_end":366009,"line_start":32,"line_end":32,"column_start":1,"column_end":23}},{"value":"/ type ScrollOffset = Translation2D<i32, ParentSpace, ChildSpace>;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":366010,"byte_end":366078,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/ type ParentPoint = Point2D<i32, ParentSpace>;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":366079,"byte_end":366128,"line_start":34,"line_end":34,"column_start":1,"column_end":50}},{"value":"/ type ChildPoint = Point2D<i32, ChildSpace>;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":366129,"byte_end":366176,"line_start":35,"line_end":35,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":366177,"byte_end":366180,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let scrolling = ScrollOffset::new(0, 100);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":366181,"byte_end":366227,"line_start":37,"line_end":37,"column_start":1,"column_end":47}},{"value":"/ let p1: ParentPoint = point2(0, 0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":366228,"byte_end":366267,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/ let p2: ChildPoint = scrolling.transform_point(p1);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":366268,"byte_end":366323,"line_start":39,"line_end":39,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":366324,"byte_end":366331,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":366332,"byte_end":366335,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":366336,"byte_end":366346,"line_start":42,"line_end":42,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3628},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":366614,"byte_end":366615,"line_start":52,"line_end":52,"column_start":9,"column_end":10},"name":"x","qualname":"::translation::Translation2D::x","value":"T","parent":{"krate":0,"index":3624},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3629},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":366628,"byte_end":366629,"line_start":53,"line_end":53,"column_start":9,"column_end":10},"name":"y","qualname":"::translation::Translation2D::y","value":"T","parent":{"krate":0,"index":3624},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3630},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":366661,"byte_end":366666,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"name":"_unit","qualname":"::translation::Translation2D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":3624},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3659},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":367909,"byte_end":367912,"line_start":109,"line_end":109,"column_start":18,"column_end":21},"name":"new","qualname":"<Translation2D<T, Src, Dst>>::new","value":"pub const fn new(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":367882,"byte_end":367891,"line_start":108,"line_end":108,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3660},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":368063,"byte_end":368068,"line_start":118,"line_end":118,"column_start":12,"column_end":17},"name":"splat","qualname":"<Translation2D<T, Src, Dst>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":368042,"byte_end":368051,"line_start":117,"line_end":117,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3661},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":368325,"byte_end":368333,"line_start":131,"line_end":131,"column_start":12,"column_end":20},"name":"identity","qualname":"<Translation2D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Creates no-op translation (both `x` and `y` is `zero()`).\n","sig":null,"attributes":[{"value":"/ Creates no-op translation (both `x` and `y` is `zero()`).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":368238,"byte_end":368299,"line_start":129,"line_end":129,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":368304,"byte_end":368313,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3662},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":368881,"byte_end":368892,"line_start":149,"line_end":149,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Translation2D<T, Src, Dst>>::is_identity","value":"pub fn is_identity(&Self) -> bool where T: Zero + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Check if translation does nothing (both x and y is `zero()`).","sig":null,"attributes":[{"value":"/ Check if translation does nothing (both x and y is `zero()`).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":368428,"byte_end":368493,"line_start":138,"line_end":138,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":368498,"byte_end":368501,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":368506,"byte_end":368517,"line_start":140,"line_end":140,"column_start":5,"column_end":16}},{"value":"/ use euclid::default::Translation2D;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":368522,"byte_end":368561,"line_start":141,"line_end":141,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":368566,"byte_end":368569,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Translation2D::<f32>::identity().is_identity(), true);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":368574,"byte_end":368643,"line_start":143,"line_end":143,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(Translation2D::new(0, 0).is_identity(), true);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":368648,"byte_end":368709,"line_start":144,"line_end":144,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(Translation2D::new(1, 0).is_identity(), false);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":368714,"byte_end":368776,"line_start":145,"line_end":145,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(Translation2D::new(0, 1).is_identity(), false);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":368781,"byte_end":368843,"line_start":146,"line_end":146,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":368848,"byte_end":368855,"line_start":147,"line_end":147,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":368860,"byte_end":368869,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3663},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369085,"byte_end":369099,"line_start":159,"line_end":159,"column_start":12,"column_end":26},"name":"transform_size","qualname":"<Translation2D<T, Src, Dst>>::transform_size","value":"pub fn transform_size(&Self, Size2D<T, Src>) -> Size2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" No-op, just cast the unit.\n","sig":null,"attributes":[{"value":"/ No-op, just cast the unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369029,"byte_end":369059,"line_start":157,"line_end":157,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369064,"byte_end":369073,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3668},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369303,"byte_end":369312,"line_start":167,"line_end":167,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Translation2D<T, Src, Dst>>::to_vector","value":"pub fn to_vector(&Self) -> Vector2D<T, Src>","parent":null,"children":[],"decl_id":null,"docs":" Cast into a 2D vector.\n","sig":null,"attributes":[{"value":"/ Cast into a 2D vector.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369251,"byte_end":369277,"line_start":165,"line_end":165,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369282,"byte_end":369291,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3669},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369444,"byte_end":369452,"line_start":173,"line_end":173,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Translation2D<T, Src, Dst>>::to_array","value":"pub fn to_array(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x and y.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369382,"byte_end":369418,"line_start":171,"line_end":171,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369423,"byte_end":369432,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3671},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369569,"byte_end":369577,"line_start":179,"line_end":179,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Translation2D<T, Src, Dst>>::to_tuple","value":"pub fn to_tuple(&Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x and y.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369508,"byte_end":369543,"line_start":177,"line_end":177,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369548,"byte_end":369557,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3672},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369713,"byte_end":369723,"line_start":185,"line_end":185,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Translation2D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Translation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369633,"byte_end":369687,"line_start":183,"line_end":183,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369692,"byte_end":369701,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3673},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369964,"byte_end":369976,"line_start":195,"line_end":195,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Translation2D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Translation2D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369902,"byte_end":369938,"line_start":193,"line_end":193,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369943,"byte_end":369952,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3674},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":370236,"byte_end":370248,"line_start":205,"line_end":205,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Translation2D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform2D<T, Src, Dst> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this translation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this translation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":370152,"byte_end":370210,"line_start":203,"line_end":203,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":370215,"byte_end":370224,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3675},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":370423,"byte_end":370438,"line_start":214,"line_end":214,"column_start":12,"column_end":27},"name":"transform_point","qualname":"<Translation2D<T, Src, Dst>>::transform_point","value":"pub fn transform_point(&Self, Point2D<T, Src>) -> Point2D<T::Output, Dst>\nwhere T: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a point and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a point and cast its unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":370357,"byte_end":370397,"line_start":212,"line_end":212,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":370402,"byte_end":370411,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3676},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":370649,"byte_end":370663,"line_start":223,"line_end":223,"column_start":12,"column_end":26},"name":"transform_rect","qualname":"<Translation2D<T, Src, Dst>>::transform_rect","value":"pub fn transform_rect(&Self, &Rect<T, Src>) -> Rect<T::Output, Dst> where\nT: Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Translate a rectangle and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a rectangle and cast its unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":370579,"byte_end":370623,"line_start":221,"line_end":221,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":370628,"byte_end":370637,"line_start":222,"line_end":222,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3677},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":370959,"byte_end":370972,"line_start":235,"line_end":235,"column_start":12,"column_end":25},"name":"transform_box","qualname":"<Translation2D<T, Src, Dst>>::transform_box","value":"pub fn transform_box(&Self, &Box2D<T, Src>) -> Box2D<T::Output, Dst> where\nT: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a 2D box and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a 2D box and cast its unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":370892,"byte_end":370933,"line_start":233,"line_end":233,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":370938,"byte_end":370947,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3678},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":371249,"byte_end":371256,"line_start":247,"line_end":247,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Translation2D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Translation2D<T::Output, Dst, Src> where T: Neg","parent":null,"children":[],"decl_id":null,"docs":" Return the inverse transformation.\n","sig":null,"attributes":[{"value":"/ Return the inverse transformation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":371185,"byte_end":371223,"line_start":245,"line_end":245,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":371228,"byte_end":371237,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3728},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":373541,"byte_end":373554,"line_start":326,"line_end":326,"column_start":12,"column_end":25},"name":"Translation3D","qualname":"::translation::Translation3D","value":"Translation3D { x, y, z, _unit }","parent":null,"children":[{"krate":0,"index":3732},{"krate":0,"index":3733},{"krate":0,"index":3734},{"krate":0,"index":3735}],"decl_id":null,"docs":" A 3d transformation from a space to another that can only express translations.","sig":null,"attributes":[{"value":"/ A 3d transformation from a space to another that can only express translations.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":373311,"byte_end":373394,"line_start":321,"line_end":321,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":373395,"byte_end":373398,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ The main benefit of this type over a Vector3D is the ability to cast","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":373399,"byte_end":373471,"line_start":323,"line_end":323,"column_start":1,"column_end":73}},{"value":"/ between a source and a destination spaces.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":373472,"byte_end":373518,"line_start":324,"line_end":324,"column_start":1,"column_end":47}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":373519,"byte_end":373529,"line_start":325,"line_end":325,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3732},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":373578,"byte_end":373579,"line_start":327,"line_end":327,"column_start":9,"column_end":10},"name":"x","qualname":"::translation::Translation3D::x","value":"T","parent":{"krate":0,"index":3728},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3733},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":373592,"byte_end":373593,"line_start":328,"line_end":328,"column_start":9,"column_end":10},"name":"y","qualname":"::translation::Translation3D::y","value":"T","parent":{"krate":0,"index":3728},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3734},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":373606,"byte_end":373607,"line_start":329,"line_end":329,"column_start":9,"column_end":10},"name":"z","qualname":"::translation::Translation3D::z","value":"T","parent":{"krate":0,"index":3728},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3735},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":373639,"byte_end":373644,"line_start":331,"line_end":331,"column_start":9,"column_end":14},"name":"_unit","qualname":"::translation::Translation3D::_unit","value":"core::marker::PhantomData<(Src, Dst)>","parent":{"krate":0,"index":3728},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3764},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":375325,"byte_end":375328,"line_start":403,"line_end":403,"column_start":18,"column_end":21},"name":"new","qualname":"<Translation3D<T, Src, Dst>>::new","value":"pub const fn new(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":375298,"byte_end":375307,"line_start":402,"line_end":402,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3765},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":375500,"byte_end":375505,"line_start":413,"line_end":413,"column_start":12,"column_end":17},"name":"splat","qualname":"<Translation3D<T, Src, Dst>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":375479,"byte_end":375488,"line_start":412,"line_end":412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3766},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":375788,"byte_end":375796,"line_start":427,"line_end":427,"column_start":12,"column_end":20},"name":"identity","qualname":"<Translation3D<T, Src, Dst>>::identity","value":"pub fn identity() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Creates no-op translation (`x`, `y` and `z` is `zero()`).\n","sig":null,"attributes":[{"value":"/ Creates no-op translation (`x`, `y` and `z` is `zero()`).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":375701,"byte_end":375762,"line_start":425,"line_end":425,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":375767,"byte_end":375776,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3767},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":376447,"byte_end":376458,"line_start":446,"line_end":446,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Translation3D<T, Src, Dst>>::is_identity","value":"pub fn is_identity(&Self) -> bool where T: Zero + PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Check if translation does nothing (`x`, `y` and `z` is `zero()`).","sig":null,"attributes":[{"value":"/ Check if translation does nothing (`x`, `y` and `z` is `zero()`).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":375911,"byte_end":375980,"line_start":434,"line_end":434,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":375985,"byte_end":375988,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":375993,"byte_end":376004,"line_start":436,"line_end":436,"column_start":5,"column_end":16}},{"value":"/ use euclid::default::Translation3D;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":376009,"byte_end":376048,"line_start":437,"line_end":437,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":376053,"byte_end":376056,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Translation3D::<f32>::identity().is_identity(), true);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":376061,"byte_end":376130,"line_start":439,"line_end":439,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(Translation3D::new(0, 0, 0).is_identity(), true);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":376135,"byte_end":376199,"line_start":440,"line_end":440,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(Translation3D::new(1, 0, 0).is_identity(), false);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":376204,"byte_end":376269,"line_start":441,"line_end":441,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(Translation3D::new(0, 1, 0).is_identity(), false);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":376274,"byte_end":376339,"line_start":442,"line_end":442,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(Translation3D::new(0, 0, 1).is_identity(), false);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":376344,"byte_end":376409,"line_start":443,"line_end":443,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":376414,"byte_end":376421,"line_start":444,"line_end":444,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":376426,"byte_end":376435,"line_start":445,"line_end":445,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3768},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":376667,"byte_end":376681,"line_start":456,"line_end":456,"column_start":12,"column_end":26},"name":"transform_size","qualname":"<Translation3D<T, Src, Dst>>::transform_size","value":"pub fn transform_size(Self, Size2D<T, Src>) -> Size2D<T, Dst>","parent":null,"children":[],"decl_id":null,"docs":" No-op, just cast the unit.\n","sig":null,"attributes":[{"value":"/ No-op, just cast the unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":376611,"byte_end":376641,"line_start":454,"line_end":454,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":376646,"byte_end":376655,"line_start":455,"line_end":455,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3773},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":376884,"byte_end":376893,"line_start":464,"line_end":464,"column_start":12,"column_end":21},"name":"to_vector","qualname":"<Translation3D<T, Src, Dst>>::to_vector","value":"pub fn to_vector(&Self) -> Vector3D<T, Src>","parent":null,"children":[],"decl_id":null,"docs":" Cast into a 3D vector.\n","sig":null,"attributes":[{"value":"/ Cast into a 3D vector.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":376832,"byte_end":376858,"line_start":462,"line_end":462,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":376863,"byte_end":376872,"line_start":463,"line_end":463,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3774},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":377036,"byte_end":377044,"line_start":470,"line_end":470,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Translation3D<T, Src, Dst>>::to_array","value":"pub fn to_array(&Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x, y and z.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":376971,"byte_end":377010,"line_start":468,"line_end":468,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":377015,"byte_end":377024,"line_start":469,"line_end":469,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3776},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":377172,"byte_end":377180,"line_start":476,"line_end":476,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Translation3D<T, Src, Dst>>::to_tuple","value":"pub fn to_tuple(&Self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y and z.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":377108,"byte_end":377146,"line_start":474,"line_end":474,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":377151,"byte_end":377160,"line_start":475,"line_end":475,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3777},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":377327,"byte_end":377337,"line_start":482,"line_end":482,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Translation3D<T, Src, Dst>>::to_untyped","value":"pub fn to_untyped(&Self) -> Translation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":377247,"byte_end":377301,"line_start":480,"line_end":480,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":377306,"byte_end":377315,"line_start":481,"line_end":481,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3778},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":377601,"byte_end":377613,"line_start":493,"line_end":493,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Translation3D<T, Src, Dst>>::from_untyped","value":"pub fn from_untyped(&Translation3D<T, UnknownUnit, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":377539,"byte_end":377575,"line_start":491,"line_end":491,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":377580,"byte_end":377589,"line_start":492,"line_end":492,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3779},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":377893,"byte_end":377905,"line_start":504,"line_end":504,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Translation3D<T, Src, Dst>>::to_transform","value":"pub fn to_transform(&Self) -> Transform3D<T, Src, Dst> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Returns the matrix representation of this translation.\n","sig":null,"attributes":[{"value":"/ Returns the matrix representation of this translation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":377809,"byte_end":377867,"line_start":502,"line_end":502,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":377872,"byte_end":377881,"line_start":503,"line_end":503,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3780},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":378080,"byte_end":378097,"line_start":513,"line_end":513,"column_start":12,"column_end":29},"name":"transform_point3d","qualname":"<Translation3D<T, Src, Dst>>::transform_point3d","value":"pub fn transform_point3d(&Self, &Point3D<T, Src>) -> Point3D<T::Output, Dst>\nwhere T: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a point and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a point and cast its unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":378014,"byte_end":378054,"line_start":511,"line_end":511,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":378059,"byte_end":378068,"line_start":512,"line_end":512,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3781},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":378319,"byte_end":378336,"line_start":522,"line_end":522,"column_start":12,"column_end":29},"name":"transform_point2d","qualname":"<Translation3D<T, Src, Dst>>::transform_point2d","value":"pub fn transform_point2d(&Self, &Point2D<T, Src>) -> Point2D<T::Output, Dst>\nwhere T: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a point and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a point and cast its unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":378253,"byte_end":378293,"line_start":520,"line_end":520,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":378298,"byte_end":378307,"line_start":521,"line_end":521,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3782},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":378545,"byte_end":378560,"line_start":531,"line_end":531,"column_start":12,"column_end":27},"name":"transform_box2d","qualname":"<Translation3D<T, Src, Dst>>::transform_box2d","value":"pub fn transform_box2d(&Self, &Box2D<T, Src>) -> Box2D<T::Output, Dst> where\nT: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a 2D box and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a 2D box and cast its unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":378478,"byte_end":378519,"line_start":529,"line_end":529,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":378524,"byte_end":378533,"line_start":530,"line_end":530,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3783},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":378846,"byte_end":378861,"line_start":543,"line_end":543,"column_start":12,"column_end":27},"name":"transform_box3d","qualname":"<Translation3D<T, Src, Dst>>::transform_box3d","value":"pub fn transform_box3d(&Self, &Box3D<T, Src>) -> Box3D<T::Output, Dst> where\nT: Add","parent":null,"children":[],"decl_id":null,"docs":" Translate a 3D box and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a 3D box and cast its unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":378779,"byte_end":378820,"line_start":541,"line_end":541,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":378825,"byte_end":378834,"line_start":542,"line_end":542,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3784},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":379150,"byte_end":379164,"line_start":555,"line_end":555,"column_start":12,"column_end":26},"name":"transform_rect","qualname":"<Translation3D<T, Src, Dst>>::transform_rect","value":"pub fn transform_rect(&Self, &Rect<T, Src>) -> Rect<T, Dst> where\nT: Add<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Translate a rectangle and cast its unit.\n","sig":null,"attributes":[{"value":"/ Translate a rectangle and cast its unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":379080,"byte_end":379124,"line_start":553,"line_end":553,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":379129,"byte_end":379138,"line_start":554,"line_end":554,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3785},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":379452,"byte_end":379459,"line_start":567,"line_end":567,"column_start":12,"column_end":19},"name":"inverse","qualname":"<Translation3D<T, Src, Dst>>::inverse","value":"pub fn inverse(&Self) -> Translation3D<T::Output, Dst, Src> where T: Neg","parent":null,"children":[],"decl_id":null,"docs":" Return the inverse transformation.\n","sig":null,"attributes":[{"value":"/ Return the inverse transformation.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":379388,"byte_end":379426,"line_start":565,"line_end":565,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":379431,"byte_end":379440,"line_start":566,"line_end":566,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":3836},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/trig.rs","byte_start":389506,"byte_end":389510,"line_start":11,"line_end":11,"column_start":11,"column_end":15},"name":"Trig","qualname":"::trig::Trig","value":"Trig","parent":null,"children":[{"krate":0,"index":3837},{"krate":0,"index":3838},{"krate":0,"index":3839},{"krate":0,"index":3840},{"krate":0,"index":3841},{"krate":0,"index":3842}],"decl_id":null,"docs":" Trait for basic trigonometry functions, so they can be used on generic numeric types\n","sig":null,"attributes":[{"value":"/ Trait for basic trigonometry functions, so they can be used on generic numeric types","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/trig.rs","byte_start":389407,"byte_end":389495,"line_start":10,"line_end":10,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":3837},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/trig.rs","byte_start":389520,"byte_end":389523,"line_start":12,"line_end":12,"column_start":8,"column_end":11},"name":"sin","qualname":"::trig::Trig::sin","value":"pub fn sin(Self) -> Self","parent":{"krate":0,"index":3836},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3838},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/trig.rs","byte_start":389546,"byte_end":389549,"line_start":13,"line_end":13,"column_start":8,"column_end":11},"name":"cos","qualname":"::trig::Trig::cos","value":"pub fn cos(Self) -> Self","parent":{"krate":0,"index":3836},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3839},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/trig.rs","byte_start":389572,"byte_end":389575,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"tan","qualname":"::trig::Trig::tan","value":"pub fn tan(Self) -> Self","parent":{"krate":0,"index":3836},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3840},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/trig.rs","byte_start":389598,"byte_end":389608,"line_start":15,"line_end":15,"column_start":8,"column_end":18},"name":"fast_atan2","qualname":"::trig::Trig::fast_atan2","value":"pub fn fast_atan2(Self, Self) -> Self","parent":{"krate":0,"index":3836},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3841},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/trig.rs","byte_start":389643,"byte_end":389661,"line_start":16,"line_end":16,"column_start":8,"column_end":26},"name":"degrees_to_radians","qualname":"::trig::Trig::degrees_to_radians","value":"pub fn degrees_to_radians(Self) -> Self","parent":{"krate":0,"index":3836},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3842},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/trig.rs","byte_start":389689,"byte_end":389707,"line_start":17,"line_end":17,"column_start":8,"column_end":26},"name":"radians_to_degrees","qualname":"::trig::Trig::radians_to_degrees","value":"pub fn radians_to_degrees(Self) -> Self","parent":{"krate":0,"index":3836},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3960},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":392871,"byte_end":392879,"line_start":36,"line_end":36,"column_start":12,"column_end":20},"name":"Vector2D","qualname":"::vector::Vector2D","value":"Vector2D { x, y, _unit }","parent":null,"children":[{"krate":0,"index":3963},{"krate":0,"index":3964},{"krate":0,"index":3965}],"decl_id":null,"docs":" A 2d Vector tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 2d Vector tagged with a unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":392813,"byte_end":392848,"line_start":34,"line_end":34,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":392849,"byte_end":392859,"line_start":35,"line_end":35,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":3963},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":392952,"byte_end":392953,"line_start":38,"line_end":38,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::Vector2D::x","value":"T","parent":{"krate":0,"index":3960},"children":[],"decl_id":null,"docs":" The `x` (traditionally, horizontal) coordinate.\n","sig":null,"attributes":[{"value":"/ The `x` (traditionally, horizontal) coordinate.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":392892,"byte_end":392943,"line_start":37,"line_end":37,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":3964},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":393020,"byte_end":393021,"line_start":40,"line_end":40,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::Vector2D::y","value":"T","parent":{"krate":0,"index":3960},"children":[],"decl_id":null,"docs":" The `y` (traditionally, vertical) coordinate.\n","sig":null,"attributes":[{"value":"/ The `y` (traditionally, vertical) coordinate.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":392962,"byte_end":393011,"line_start":39,"line_end":39,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":3965},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":393053,"byte_end":393058,"line_start":42,"line_end":42,"column_start":9,"column_end":14},"name":"_unit","qualname":"::vector::Vector2D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":3960},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4000},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":395423,"byte_end":395427,"line_start":144,"line_end":144,"column_start":12,"column_end":16},"name":"zero","qualname":"<Vector2D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":395349,"byte_end":395397,"line_start":142,"line_end":142,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":395402,"byte_end":395411,"line_start":143,"line_end":143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4001},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":395605,"byte_end":395608,"line_start":153,"line_end":153,"column_start":12,"column_end":15},"name":"one","qualname":"<Vector2D<T, U>>::one","value":"pub fn one() -> Self where T: One","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to one.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to one.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":395532,"byte_end":395579,"line_start":151,"line_end":151,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":395584,"byte_end":395593,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4002},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":395786,"byte_end":395789,"line_start":162,"line_end":162,"column_start":18,"column_end":21},"name":"new","qualname":"<Vector2D<T, U>>::new","value":"pub const fn new(T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":395708,"byte_end":395754,"line_start":160,"line_end":160,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":395759,"byte_end":395768,"line_start":161,"line_end":161,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4003},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":395997,"byte_end":396002,"line_start":172,"line_end":172,"column_start":12,"column_end":17},"name":"splat","qualname":"<Vector2D<T, U>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting all components to the same value.\n","sig":null,"attributes":[{"value":"/ Constructor setting all components to the same value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":395914,"byte_end":395971,"line_start":170,"line_end":170,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":395976,"byte_end":395985,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4004},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":396218,"byte_end":396239,"line_start":184,"line_end":184,"column_start":12,"column_end":33},"name":"from_angle_and_length","qualname":"<Vector2D<T, U>>::from_angle_and_length","value":"pub fn from_angle_and_length(Angle<T>, T) -> Self where T: Trig + Mul<Output =\nT> + Copy","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking angle and length\n","sig":null,"attributes":[{"value":"/ Constructor taking angle and length","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":396167,"byte_end":396206,"line_start":183,"line_end":183,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":4005},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":396510,"byte_end":396522,"line_start":193,"line_end":193,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Vector2D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly  Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly  Lengths instead of scalar values.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":396418,"byte_end":396484,"line_start":191,"line_end":191,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":396489,"byte_end":396498,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4006},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":396664,"byte_end":396676,"line_start":199,"line_end":199,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Vector2D<T, U>>::from_untyped","value":"pub fn from_untyped(Vector2D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unit-less value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unit-less value with units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":396601,"byte_end":396638,"line_start":197,"line_end":197,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":396643,"byte_end":396652,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4007},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397320,"byte_end":397323,"line_start":223,"line_end":223,"column_start":12,"column_end":15},"name":"abs","qualname":"<Vector2D<T, U>>::abs","value":"pub fn abs(Self) -> Self where T: Signed","parent":null,"children":[],"decl_id":null,"docs":" Computes the vector with absolute values of each component.","sig":null,"attributes":[{"value":"/ Computes the vector with absolute values of each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":396750,"byte_end":396813,"line_start":203,"line_end":203,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":396818,"byte_end":396821,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":396826,"byte_end":396839,"line_start":205,"line_end":205,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":396844,"byte_end":396847,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":396852,"byte_end":396863,"line_start":207,"line_end":207,"column_start":5,"column_end":16}},{"value":"/ # use std::{i32, f32};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":396868,"byte_end":396894,"line_start":208,"line_end":208,"column_start":5,"column_end":31}},{"value":"/ # use euclid::vec2;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":396899,"byte_end":396922,"line_start":209,"line_end":209,"column_start":5,"column_end":28}},{"value":"/ enum U {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":396927,"byte_end":396940,"line_start":210,"line_end":210,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":396945,"byte_end":396948,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, U>(-1, 2).abs(), vec2(1, 2));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":396953,"byte_end":397007,"line_start":212,"line_end":212,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397012,"byte_end":397015,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ let vec = vec2::<_, U>(f32::NAN, -f32::MAX).abs();","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397020,"byte_end":397074,"line_start":214,"line_end":214,"column_start":5,"column_end":59}},{"value":"/ assert!(vec.x.is_nan());","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397079,"byte_end":397107,"line_start":215,"line_end":215,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(vec.y, f32::MAX);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397112,"byte_end":397144,"line_start":216,"line_end":216,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397149,"byte_end":397156,"line_start":217,"line_end":217,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397161,"byte_end":397164,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397169,"byte_end":397181,"line_start":219,"line_end":219,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397186,"byte_end":397189,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ The behavior for each component follows the scalar type's implementation of","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397194,"byte_end":397273,"line_start":221,"line_end":221,"column_start":5,"column_end":84}},{"value":"/ `num_traits::Signed::abs`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397278,"byte_end":397308,"line_start":222,"line_end":222,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":4008},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397467,"byte_end":397470,"line_start":232,"line_end":232,"column_start":12,"column_end":15},"name":"dot","qualname":"<Vector2D<T, U>>::dot","value":"pub fn dot(Self, Self) -> T where T: Add<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Dot product.\n","sig":null,"attributes":[{"value":"/ Dot product.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397425,"byte_end":397441,"line_start":230,"line_end":230,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397446,"byte_end":397455,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4009},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397724,"byte_end":397729,"line_start":241,"line_end":241,"column_start":12,"column_end":17},"name":"cross","qualname":"<Vector2D<T, U>>::cross","value":"pub fn cross(Self, Self) -> T where T: Sub<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the norm of the cross product [self.x, self.y, 0] x [other.x, other.y, 0].\n","sig":null,"attributes":[{"value":"/ Returns the norm of the cross product [self.x, self.y, 0] x [other.x, other.y, 0].","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397612,"byte_end":397698,"line_start":239,"line_end":239,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397703,"byte_end":397712,"line_start":240,"line_end":240,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4010},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397962,"byte_end":397975,"line_start":250,"line_end":250,"column_start":12,"column_end":25},"name":"component_mul","qualname":"<Vector2D<T, U>>::component_mul","value":"pub fn component_mul(Self, Self) -> Self where T: Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the component-wise multiplication of the two vectors.\n","sig":null,"attributes":[{"value":"/ Returns the component-wise multiplication of the two vectors.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397871,"byte_end":397936,"line_start":248,"line_end":248,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":397941,"byte_end":397950,"line_start":249,"line_end":249,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4011},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":398192,"byte_end":398205,"line_start":259,"line_end":259,"column_start":12,"column_end":25},"name":"component_div","qualname":"<Vector2D<T, U>>::component_div","value":"pub fn component_div(Self, Self) -> Self where T: Div<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the component-wise division of the two vectors.\n","sig":null,"attributes":[{"value":"/ Returns the component-wise division of the two vectors.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":398107,"byte_end":398166,"line_start":257,"line_end":257,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":398171,"byte_end":398180,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4015},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":398465,"byte_end":398471,"line_start":270,"line_end":270,"column_start":12,"column_end":18},"name":"extend","qualname":"<Vector2D<T, U>>::extend","value":"pub fn extend(Self, T) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Create a 3d vector from this one, using the specified z value.\n","sig":null,"attributes":[{"value":"/ Create a 3d vector from this one, using the specified z value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":398373,"byte_end":398439,"line_start":268,"line_end":268,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":398444,"byte_end":398453,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4016},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":398671,"byte_end":398679,"line_start":278,"line_end":278,"column_start":12,"column_end":20},"name":"to_point","qualname":"<Vector2D<T, U>>::to_point","value":"pub fn to_point(Self) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this vector into a point.","sig":null,"attributes":[{"value":"/ Cast this vector into a point.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":398547,"byte_end":398581,"line_start":274,"line_end":274,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":398586,"byte_end":398589,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ Equivalent to adding this vector to the origin.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":398594,"byte_end":398645,"line_start":276,"line_end":276,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":398650,"byte_end":398659,"line_start":277,"line_end":277,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4017},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":398865,"byte_end":398867,"line_start":288,"line_end":288,"column_start":12,"column_end":14},"name":"yx","qualname":"<Vector2D<T, U>>::yx","value":"pub fn yx(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Swap x and y.\n","sig":null,"attributes":[{"value":"/ Swap x and y.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":398822,"byte_end":398839,"line_start":286,"line_end":286,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":398844,"byte_end":398853,"line_start":287,"line_end":287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4018},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":398983,"byte_end":398990,"line_start":294,"line_end":294,"column_start":12,"column_end":19},"name":"to_size","qualname":"<Vector2D<T, U>>::to_size","value":"pub fn to_size(Self) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this vector into a size.\n","sig":null,"attributes":[{"value":"/ Cast this vector into a size.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":398924,"byte_end":398957,"line_start":292,"line_end":292,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":398962,"byte_end":398971,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4019},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399136,"byte_end":399146,"line_start":300,"line_end":300,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Vector2D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Vector2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399056,"byte_end":399110,"line_start":298,"line_end":298,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399115,"byte_end":399124,"line_start":299,"line_end":299,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4020},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399267,"byte_end":399276,"line_start":306,"line_end":306,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Vector2D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Vector2D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit.\n","sig":null,"attributes":[{"value":"/ Cast the unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399223,"byte_end":399241,"line_start":304,"line_end":304,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399246,"byte_end":399255,"line_start":305,"line_end":305,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4022},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399408,"byte_end":399416,"line_start":312,"line_end":312,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Vector2D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x and y.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399346,"byte_end":399382,"line_start":310,"line_end":310,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399387,"byte_end":399396,"line_start":311,"line_end":311,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4024},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399532,"byte_end":399540,"line_start":318,"line_end":318,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Vector2D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x and y.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x and y.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399471,"byte_end":399506,"line_start":316,"line_end":316,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399511,"byte_end":399520,"line_start":317,"line_end":317,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4025},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399692,"byte_end":399697,"line_start":324,"line_end":324,"column_start":12,"column_end":17},"name":"to_3d","qualname":"<Vector2D<T, U>>::to_3d","value":"pub fn to_3d(Self) -> Vector3D<T, U> where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 3d vector with `z` coordinate equals to `T::zero()`.\n","sig":null,"attributes":[{"value":"/ Convert into a 3d vector with `z` coordinate equals to `T::zero()`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399595,"byte_end":399666,"line_start":322,"line_end":322,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399671,"byte_end":399680,"line_start":323,"line_end":323,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4026},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400165,"byte_end":400170,"line_start":343,"line_end":343,"column_start":12,"column_end":17},"name":"round","qualname":"<Vector2D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399809,"byte_end":399864,"line_start":331,"line_end":331,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399869,"byte_end":399872,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399877,"byte_end":399952,"line_start":333,"line_end":333,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399957,"byte_end":399960,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399965,"byte_end":399976,"line_start":335,"line_end":335,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec2;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":399981,"byte_end":400004,"line_start":336,"line_end":336,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400009,"byte_end":400023,"line_start":337,"line_end":337,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400028,"byte_end":400031,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, Mm>(-0.1, -0.8).round(), vec2::<_, Mm>(0.0, -1.0))","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400036,"byte_end":400111,"line_start":339,"line_end":339,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400116,"byte_end":400123,"line_start":340,"line_end":340,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400128,"byte_end":400137,"line_start":341,"line_end":341,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400142,"byte_end":400153,"line_start":342,"line_end":342,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4027},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400665,"byte_end":400669,"line_start":362,"line_end":362,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Vector2D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400275,"byte_end":400366,"line_start":350,"line_end":350,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400371,"byte_end":400374,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400379,"byte_end":400454,"line_start":352,"line_end":352,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400459,"byte_end":400462,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400467,"byte_end":400478,"line_start":354,"line_end":354,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec2;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400483,"byte_end":400506,"line_start":355,"line_end":355,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400511,"byte_end":400525,"line_start":356,"line_end":356,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400530,"byte_end":400533,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, Mm>(-0.1, -0.8).ceil(), vec2::<_, Mm>(0.0, 0.0))","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400538,"byte_end":400611,"line_start":358,"line_end":358,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400616,"byte_end":400623,"line_start":359,"line_end":359,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400628,"byte_end":400637,"line_start":360,"line_end":360,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400642,"byte_end":400653,"line_start":361,"line_end":361,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4028},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":401161,"byte_end":401166,"line_start":381,"line_end":381,"column_start":12,"column_end":17},"name":"floor","qualname":"<Vector2D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400771,"byte_end":400859,"line_start":369,"line_end":369,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400864,"byte_end":400867,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400872,"byte_end":400947,"line_start":371,"line_end":371,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400952,"byte_end":400955,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400960,"byte_end":400971,"line_start":373,"line_end":373,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec2;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":400976,"byte_end":400999,"line_start":374,"line_end":374,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":401004,"byte_end":401018,"line_start":375,"line_end":375,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":401023,"byte_end":401026,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec2::<_, Mm>(-0.1, -0.8).floor(), vec2::<_, Mm>(-1.0, -1.0))","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":401031,"byte_end":401107,"line_start":377,"line_end":377,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":401112,"byte_end":401119,"line_start":378,"line_end":378,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":401124,"byte_end":401133,"line_start":379,"line_end":379,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":401138,"byte_end":401149,"line_start":380,"line_end":380,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4029},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":401506,"byte_end":401523,"line_start":393,"line_end":393,"column_start":12,"column_end":29},"name":"angle_from_x_axis","qualname":"<Vector2D<T, U>>::angle_from_x_axis","value":"pub fn angle_from_x_axis(Self) -> Angle<T> where T: Trig","parent":null,"children":[],"decl_id":null,"docs":" Returns the signed angle between this vector and the x axis.\n Positive values counted counterclockwise, where 0 is `+x` axis, `PI/2`\n is `+y` axis.","sig":null,"attributes":[{"value":"/ Returns the signed angle between this vector and the x axis.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":401271,"byte_end":401335,"line_start":388,"line_end":388,"column_start":5,"column_end":69}},{"value":"/ Positive values counted counterclockwise, where 0 is `+x` axis, `PI/2`","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":401340,"byte_end":401414,"line_start":389,"line_end":389,"column_start":5,"column_end":79}},{"value":"/ is `+y` axis.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":401419,"byte_end":401436,"line_start":390,"line_end":390,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":401441,"byte_end":401444,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ The returned angle is between -PI and PI.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":401449,"byte_end":401494,"line_start":392,"line_end":392,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4030},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":401724,"byte_end":401736,"line_start":402,"line_end":402,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Vector2D<T, U>>::to_transform","value":"pub fn to_transform(Self) -> Transform2D<T, U, U> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Creates translation by this vector in vector units.\n","sig":null,"attributes":[{"value":"/ Creates translation by this vector in vector units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":401643,"byte_end":401698,"line_start":400,"line_end":400,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":401703,"byte_end":401712,"line_start":401,"line_end":401,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4034},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":402023,"byte_end":402036,"line_start":416,"line_end":416,"column_start":12,"column_end":25},"name":"square_length","qualname":"<Vector2D<T, U>>::square_length","value":"pub fn square_length(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector's length squared.\n","sig":null,"attributes":[{"value":"/ Returns the vector's length squared.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":401957,"byte_end":401997,"line_start":414,"line_end":414,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":402002,"byte_end":402011,"line_start":415,"line_end":415,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4035},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":402256,"byte_end":402275,"line_start":424,"line_end":424,"column_start":12,"column_end":31},"name":"project_onto_vector","qualname":"<Vector2D<T, U>>::project_onto_vector","value":"pub fn project_onto_vector(Self, Self) -> Self where T: Sub<T, Output = T> +\nDiv<T, Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns this vector projected onto another one.","sig":null,"attributes":[{"value":"/ Returns this vector projected onto another one.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":402103,"byte_end":402154,"line_start":420,"line_end":420,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":402159,"byte_end":402162,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ Projecting onto a nil vector will cause a division by zero.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":402167,"byte_end":402230,"line_start":422,"line_end":422,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":402235,"byte_end":402244,"line_start":423,"line_end":423,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4036},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":402574,"byte_end":402582,"line_start":434,"line_end":434,"column_start":12,"column_end":20},"name":"angle_to","qualname":"<Vector2D<T, U>>::angle_to","value":"pub fn angle_to(Self, Self) -> Angle<T> where T: Sub<Output = T> + Trig","parent":null,"children":[],"decl_id":null,"docs":" Returns the signed angle between this vector and another vector.","sig":null,"attributes":[{"value":"/ Returns the signed angle between this vector and another vector.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":402436,"byte_end":402504,"line_start":431,"line_end":431,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":402509,"byte_end":402512,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ The returned angle is between -PI and PI.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":402517,"byte_end":402562,"line_start":433,"line_end":433,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":4040},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":402846,"byte_end":402852,"line_start":445,"line_end":445,"column_start":12,"column_end":18},"name":"length","qualname":"<Vector2D<T, U>>::length","value":"pub fn length(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector length.\n","sig":null,"attributes":[{"value":"/ Returns the vector length.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":402790,"byte_end":402820,"line_start":443,"line_end":443,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":402825,"byte_end":402834,"line_start":444,"line_end":444,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4041},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":403002,"byte_end":403011,"line_start":452,"line_end":452,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Vector2D<T, U>>::normalize","value":"pub fn normalize(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit.\n","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":402913,"byte_end":402960,"line_start":449,"line_end":449,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":402965,"byte_end":402974,"line_start":450,"line_end":450,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":402979,"byte_end":402990,"line_start":451,"line_end":451,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4042},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":403301,"byte_end":403314,"line_start":462,"line_end":462,"column_start":12,"column_end":25},"name":"try_normalize","qualname":"<Vector2D<T, U>>::try_normalize","value":"pub fn try_normalize(Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit.","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":403068,"byte_end":403115,"line_start":456,"line_end":456,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":403120,"byte_end":403123,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ Unlike [`Vector2D::normalize`](#method.normalize), this returns None in the case that the","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":403128,"byte_end":403221,"line_start":458,"line_end":458,"column_start":5,"column_end":98}},{"value":"/ length of the vector is zero.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":403226,"byte_end":403259,"line_start":459,"line_end":459,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":403264,"byte_end":403273,"line_start":460,"line_end":460,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":403278,"byte_end":403289,"line_start":461,"line_end":461,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4043},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":403618,"byte_end":403634,"line_start":474,"line_end":474,"column_start":12,"column_end":28},"name":"robust_normalize","qualname":"<Vector2D<T, U>>::robust_normalize","value":"pub fn robust_normalize(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return the normalized vector even if the length is larger than the max value of Float.\n","sig":null,"attributes":[{"value":"/ Return the normalized vector even if the length is larger than the max value of Float.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":403486,"byte_end":403576,"line_start":471,"line_end":471,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":403581,"byte_end":403590,"line_start":472,"line_end":472,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":403595,"byte_end":403606,"line_start":473,"line_end":473,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4044},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":403946,"byte_end":403961,"line_start":486,"line_end":486,"column_start":12,"column_end":27},"name":"with_max_length","qualname":"<Vector2D<T, U>>::with_max_length","value":"pub fn with_max_length(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector capped to a maximum length.\n","sig":null,"attributes":[{"value":"/ Return this vector capped to a maximum length.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":403870,"byte_end":403920,"line_start":484,"line_end":484,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":403925,"byte_end":403934,"line_start":485,"line_end":485,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4045},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":404273,"byte_end":404288,"line_start":497,"line_end":497,"column_start":12,"column_end":27},"name":"with_min_length","qualname":"<Vector2D<T, U>>::with_min_length","value":"pub fn with_min_length(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with a minimum length applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with a minimum length applied.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":404194,"byte_end":404247,"line_start":495,"line_end":495,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":404252,"byte_end":404261,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4046},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":404611,"byte_end":404623,"line_start":508,"line_end":508,"column_start":12,"column_end":24},"name":"clamp_length","qualname":"<Vector2D<T, U>>::clamp_length","value":"pub fn clamp_length(Self, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with minimum and maximum lengths applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with minimum and maximum lengths applied.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":404521,"byte_end":404585,"line_start":506,"line_end":506,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":404590,"byte_end":404599,"line_start":507,"line_end":507,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4047},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":404826,"byte_end":404835,"line_start":515,"line_end":515,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Vector2D<T, U>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members are finite.\n","sig":null,"attributes":[{"value":"/ Returns true if all members are finite.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":404757,"byte_end":404800,"line_start":513,"line_end":513,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":404805,"byte_end":404814,"line_start":514,"line_end":514,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4051},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405666,"byte_end":405670,"line_start":542,"line_end":542,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Vector2D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate each component between this vector and another vector.","sig":null,"attributes":[{"value":"/ Linearly interpolate each component between this vector and another vector.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405021,"byte_end":405100,"line_start":524,"line_end":524,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405105,"byte_end":405108,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405113,"byte_end":405126,"line_start":526,"line_end":526,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405131,"byte_end":405134,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405139,"byte_end":405150,"line_start":528,"line_end":528,"column_start":5,"column_end":16}},{"value":"/ use euclid::vec2;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405155,"byte_end":405176,"line_start":529,"line_end":529,"column_start":5,"column_end":26}},{"value":"/ use euclid::default::Vector2D;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405181,"byte_end":405215,"line_start":530,"line_end":530,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405220,"byte_end":405223,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ let from: Vector2D<_> = vec2(0.0, 10.0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405228,"byte_end":405272,"line_start":532,"line_end":532,"column_start":5,"column_end":49}},{"value":"/ let to:  Vector2D<_> = vec2(8.0, -4.0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405277,"byte_end":405320,"line_start":533,"line_end":533,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405325,"byte_end":405328,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), vec2(-8.0,  24.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405333,"byte_end":405388,"line_start":535,"line_end":535,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.0), vec2( 0.0,  10.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405393,"byte_end":405448,"line_start":536,"line_end":536,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  0.5), vec2( 4.0,   3.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405453,"byte_end":405508,"line_start":537,"line_end":537,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  1.0), vec2( 8.0,  -4.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405513,"byte_end":405568,"line_start":538,"line_end":538,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(from.lerp(to,  2.0), vec2(16.0, -18.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405573,"byte_end":405628,"line_start":539,"line_end":539,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405633,"byte_end":405640,"line_start":540,"line_end":540,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405645,"byte_end":405654,"line_start":541,"line_end":541,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4052},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405885,"byte_end":405892,"line_start":549,"line_end":549,"column_start":12,"column_end":19},"name":"reflect","qualname":"<Vector2D<T, U>>::reflect","value":"pub fn reflect(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a reflection vector using an incident ray and a surface normal.\n","sig":null,"attributes":[{"value":"/ Returns a reflection vector using an incident ray and a surface normal.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405784,"byte_end":405859,"line_start":547,"line_end":547,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":405864,"byte_end":405873,"line_start":548,"line_end":548,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4056},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":406174,"byte_end":406177,"line_start":558,"line_end":558,"column_start":12,"column_end":15},"name":"min","qualname":"<Vector2D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are minimum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are minimum of this vector and another.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":406062,"byte_end":406148,"line_start":556,"line_end":556,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":406153,"byte_end":406162,"line_start":557,"line_end":557,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4057},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":406387,"byte_end":406390,"line_start":564,"line_end":564,"column_start":12,"column_end":15},"name":"max","qualname":"<Vector2D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are maximum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are maximum of this vector and another.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":406275,"byte_end":406361,"line_start":562,"line_end":562,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":406366,"byte_end":406375,"line_start":563,"line_end":563,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4058},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":406686,"byte_end":406691,"line_start":573,"line_end":573,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Vector2D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which is clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the vector each component of which is clamped by corresponding","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":406488,"byte_end":406562,"line_start":568,"line_end":568,"column_start":5,"column_end":79}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":406567,"byte_end":406603,"line_start":569,"line_end":569,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":406608,"byte_end":406611,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":406616,"byte_end":406660,"line_start":571,"line_end":571,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":406665,"byte_end":406674,"line_start":572,"line_end":572,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4059},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":406911,"byte_end":406923,"line_start":582,"line_end":582,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Vector2D<T, U>>::greater_than","value":"pub fn greater_than(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater than\" operation on each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":406807,"byte_end":406885,"line_start":580,"line_end":580,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":406890,"byte_end":406899,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4060},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":407173,"byte_end":407183,"line_start":591,"line_end":591,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Vector2D<T, U>>::lower_than","value":"pub fn lower_than(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower than\" operation on each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":407071,"byte_end":407147,"line_start":589,"line_end":589,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":407152,"byte_end":407161,"line_start":590,"line_end":590,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4064},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":407469,"byte_end":407474,"line_start":602,"line_end":602,"column_start":12,"column_end":17},"name":"equal","qualname":"<Vector2D<T, U>>::equal","value":"pub fn equal(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":407372,"byte_end":407443,"line_start":600,"line_end":600,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":407448,"byte_end":407457,"line_start":601,"line_end":601,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4065},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":407725,"byte_end":407734,"line_start":611,"line_end":611,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Vector2D<T, U>>::not_equal","value":"pub fn not_equal(Self, Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":407624,"byte_end":407699,"line_start":609,"line_end":609,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":407704,"byte_end":407713,"line_start":610,"line_end":610,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4069},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":408311,"byte_end":408315,"line_start":626,"line_end":626,"column_start":12,"column_end":16},"name":"cast","qualname":"<Vector2D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Vector2D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":407930,"byte_end":408004,"line_start":620,"line_end":620,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":408009,"byte_end":408012,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":408017,"byte_end":408105,"line_start":622,"line_end":622,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":408110,"byte_end":408198,"line_start":623,"line_end":623,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":408203,"byte_end":408285,"line_start":624,"line_end":624,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":408290,"byte_end":408299,"line_start":625,"line_end":625,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4071},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":408780,"byte_end":408788,"line_start":635,"line_end":635,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Vector2D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Vector2D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":408404,"byte_end":408487,"line_start":630,"line_end":630,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":408492,"byte_end":408495,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":408500,"byte_end":408588,"line_start":632,"line_end":632,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":408593,"byte_end":408681,"line_start":633,"line_end":633,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":408686,"byte_end":408768,"line_start":634,"line_end":634,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":4073},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409113,"byte_end":409119,"line_start":646,"line_end":646,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Vector2D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Vector2D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` vector.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409057,"byte_end":409087,"line_start":644,"line_end":644,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409092,"byte_end":409101,"line_start":645,"line_end":645,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4074},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409235,"byte_end":409241,"line_start":652,"line_end":652,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Vector2D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Vector2D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` vector.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409179,"byte_end":409209,"line_start":650,"line_end":650,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409214,"byte_end":409223,"line_start":651,"line_end":651,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4075},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409598,"byte_end":409606,"line_start":662,"line_end":662,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Vector2D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Vector2D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` vector, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409301,"byte_end":409361,"line_start":656,"line_end":656,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409366,"byte_end":409369,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409374,"byte_end":409452,"line_start":658,"line_end":658,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409457,"byte_end":409531,"line_start":659,"line_end":659,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409536,"byte_end":409572,"line_start":660,"line_end":660,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409577,"byte_end":409586,"line_start":661,"line_end":661,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4076},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409963,"byte_end":409969,"line_start":672,"line_end":672,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Vector2D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Vector2D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` vector, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409668,"byte_end":409726,"line_start":666,"line_end":666,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409731,"byte_end":409734,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409739,"byte_end":409817,"line_start":668,"line_end":668,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409822,"byte_end":409896,"line_start":669,"line_end":669,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409901,"byte_end":409937,"line_start":670,"line_end":670,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":409942,"byte_end":409951,"line_start":671,"line_end":671,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4077},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":410322,"byte_end":410328,"line_start":682,"line_end":682,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Vector2D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Vector2D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i32 vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i32 vector, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":410029,"byte_end":410085,"line_start":676,"line_end":676,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":410090,"byte_end":410093,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":410098,"byte_end":410176,"line_start":678,"line_end":678,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":410181,"byte_end":410255,"line_start":679,"line_end":679,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":410260,"byte_end":410296,"line_start":680,"line_end":680,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":410301,"byte_end":410310,"line_start":681,"line_end":681,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4078},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":410681,"byte_end":410687,"line_start":692,"line_end":692,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Vector2D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Vector2D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an i64 vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an i64 vector, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":410388,"byte_end":410444,"line_start":686,"line_end":686,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":410449,"byte_end":410452,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":410457,"byte_end":410535,"line_start":688,"line_end":688,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":410540,"byte_end":410614,"line_start":689,"line_end":689,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":410619,"byte_end":410655,"line_start":690,"line_end":690,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":410660,"byte_end":410669,"line_start":691,"line_end":691,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":4197},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415431,"byte_end":415439,"line_start":893,"line_end":893,"column_start":12,"column_end":20},"name":"Vector3D","qualname":"::vector::Vector3D","value":"Vector3D { x, y, z, _unit }","parent":null,"children":[{"krate":0,"index":4200},{"krate":0,"index":4201},{"krate":0,"index":4202},{"krate":0,"index":4203}],"decl_id":null,"docs":" A 3d Vector tagged with a unit.\n","sig":null,"attributes":[{"value":"/ A 3d Vector tagged with a unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415373,"byte_end":415408,"line_start":891,"line_end":891,"column_start":1,"column_end":36}},{"value":"repr(C)","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415409,"byte_end":415419,"line_start":892,"line_end":892,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":4200},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415512,"byte_end":415513,"line_start":895,"line_end":895,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::Vector3D::x","value":"T","parent":{"krate":0,"index":4197},"children":[],"decl_id":null,"docs":" The `x` (traditionally, horizontal) coordinate.\n","sig":null,"attributes":[{"value":"/ The `x` (traditionally, horizontal) coordinate.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415452,"byte_end":415503,"line_start":894,"line_end":894,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":4201},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415580,"byte_end":415581,"line_start":897,"line_end":897,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::Vector3D::y","value":"T","parent":{"krate":0,"index":4197},"children":[],"decl_id":null,"docs":" The `y` (traditionally, vertical) coordinate.\n","sig":null,"attributes":[{"value":"/ The `y` (traditionally, vertical) coordinate.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415522,"byte_end":415571,"line_start":896,"line_end":896,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":4202},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415645,"byte_end":415646,"line_start":899,"line_end":899,"column_start":9,"column_end":10},"name":"z","qualname":"::vector::Vector3D::z","value":"T","parent":{"krate":0,"index":4197},"children":[],"decl_id":null,"docs":" The `z` (traditionally, depth) coordinate.\n","sig":null,"attributes":[{"value":"/ The `z` (traditionally, depth) coordinate.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415590,"byte_end":415636,"line_start":898,"line_end":898,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":4203},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415678,"byte_end":415683,"line_start":901,"line_end":901,"column_start":9,"column_end":14},"name":"_unit","qualname":"::vector::Vector3D::_unit","value":"core::marker::PhantomData<U>","parent":{"krate":0,"index":4197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4238},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":417867,"byte_end":417871,"line_start":994,"line_end":994,"column_start":12,"column_end":16},"name":"zero","qualname":"<Vector3D<T, U>>::zero","value":"pub fn zero() -> Self where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to zero.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to zero.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":417793,"byte_end":417841,"line_start":992,"line_end":992,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":417846,"byte_end":417855,"line_start":993,"line_end":993,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4239},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":418054,"byte_end":418057,"line_start":1003,"line_end":1003,"column_start":12,"column_end":15},"name":"one","qualname":"<Vector3D<T, U>>::one","value":"pub fn one() -> Self where T: One","parent":null,"children":[],"decl_id":null,"docs":" Constructor, setting all components to one.\n","sig":null,"attributes":[{"value":"/ Constructor, setting all components to one.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":417981,"byte_end":418028,"line_start":1001,"line_end":1001,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":418033,"byte_end":418042,"line_start":1002,"line_end":1002,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4240},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":418238,"byte_end":418241,"line_start":1012,"line_end":1012,"column_start":18,"column_end":21},"name":"new","qualname":"<Vector3D<T, U>>::new","value":"pub const fn new(T, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking scalar values directly.\n","sig":null,"attributes":[{"value":"/ Constructor taking scalar values directly.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":418160,"byte_end":418206,"line_start":1010,"line_end":1010,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":418211,"byte_end":418220,"line_start":1011,"line_end":1011,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4241},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":418469,"byte_end":418474,"line_start":1022,"line_end":1022,"column_start":12,"column_end":17},"name":"splat","qualname":"<Vector3D<T, U>>::splat","value":"pub fn splat(T) -> Self where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructor setting all components to the same value.\n","sig":null,"attributes":[{"value":"/ Constructor setting all components to the same value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":418386,"byte_end":418443,"line_start":1020,"line_end":1020,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":418448,"byte_end":418457,"line_start":1021,"line_end":1021,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4242},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":418757,"byte_end":418769,"line_start":1036,"line_end":1036,"column_start":12,"column_end":24},"name":"from_lengths","qualname":"<Vector3D<T, U>>::from_lengths","value":"pub fn from_lengths(Length<T, U>, Length<T, U>, Length<T, U>)\n-> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Constructor taking properly  Lengths instead of scalar values.\n","sig":null,"attributes":[{"value":"/ Constructor taking properly  Lengths instead of scalar values.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":418665,"byte_end":418731,"line_start":1034,"line_end":1034,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":418736,"byte_end":418745,"line_start":1035,"line_end":1035,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4243},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":418942,"byte_end":418954,"line_start":1042,"line_end":1042,"column_start":12,"column_end":24},"name":"from_untyped","qualname":"<Vector3D<T, U>>::from_untyped","value":"pub fn from_untyped(Vector3D<T, UnknownUnit>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Tag a unitless value with units.\n","sig":null,"attributes":[{"value":"/ Tag a unitless value with units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":418880,"byte_end":418916,"line_start":1040,"line_end":1040,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":418921,"byte_end":418930,"line_start":1041,"line_end":1041,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4244},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419646,"byte_end":419649,"line_start":1067,"line_end":1067,"column_start":12,"column_end":15},"name":"abs","qualname":"<Vector3D<T, U>>::abs","value":"pub fn abs(Self) -> Self where T: Signed","parent":null,"children":[],"decl_id":null,"docs":" Computes the vector with absolute values of each component.","sig":null,"attributes":[{"value":"/ Computes the vector with absolute values of each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419033,"byte_end":419096,"line_start":1046,"line_end":1046,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419101,"byte_end":419104,"line_start":1047,"line_end":1047,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419109,"byte_end":419122,"line_start":1048,"line_end":1048,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419127,"byte_end":419130,"line_start":1049,"line_end":1049,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419135,"byte_end":419146,"line_start":1050,"line_end":1050,"column_start":5,"column_end":16}},{"value":"/ # use std::{i32, f32};","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419151,"byte_end":419177,"line_start":1051,"line_end":1051,"column_start":5,"column_end":31}},{"value":"/ # use euclid::vec3;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419182,"byte_end":419205,"line_start":1052,"line_end":1052,"column_start":5,"column_end":28}},{"value":"/ enum U {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419210,"byte_end":419223,"line_start":1053,"line_end":1053,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419228,"byte_end":419231,"line_start":1054,"line_end":1054,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, U>(-1, 0, 2).abs(), vec3(1, 0, 2));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419236,"byte_end":419296,"line_start":1055,"line_end":1055,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419301,"byte_end":419304,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ let vec = vec3::<_, U>(f32::NAN, 0.0, -f32::MAX).abs();","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419309,"byte_end":419368,"line_start":1057,"line_end":1057,"column_start":5,"column_end":64}},{"value":"/ assert!(vec.x.is_nan());","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419373,"byte_end":419401,"line_start":1058,"line_end":1058,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(vec.y, 0.0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419406,"byte_end":419433,"line_start":1059,"line_end":1059,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(vec.z, f32::MAX);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419438,"byte_end":419470,"line_start":1060,"line_end":1060,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419475,"byte_end":419482,"line_start":1061,"line_end":1061,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419487,"byte_end":419490,"line_start":1062,"line_end":1062,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419495,"byte_end":419507,"line_start":1063,"line_end":1063,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419512,"byte_end":419515,"line_start":1064,"line_end":1064,"column_start":5,"column_end":8}},{"value":"/ The behavior for each component follows the scalar type's implementation of","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419520,"byte_end":419599,"line_start":1065,"line_end":1065,"column_start":5,"column_end":84}},{"value":"/ `num_traits::Signed::abs`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419604,"byte_end":419634,"line_start":1066,"line_end":1066,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":4245},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419807,"byte_end":419810,"line_start":1076,"line_end":1076,"column_start":12,"column_end":15},"name":"dot","qualname":"<Vector3D<T, U>>::dot","value":"pub fn dot(Self, Self) -> T where T: Add<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Dot product.\n","sig":null,"attributes":[{"value":"/ Dot product.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419765,"byte_end":419781,"line_start":1074,"line_end":1074,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419786,"byte_end":419795,"line_start":1075,"line_end":1075,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4249},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":420051,"byte_end":420056,"line_start":1087,"line_end":1087,"column_start":12,"column_end":17},"name":"cross","qualname":"<Vector3D<T, U>>::cross","value":"pub fn cross(Self, Self) -> Self where T: Sub<Output = T> + Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Cross product.\n","sig":null,"attributes":[{"value":"/ Cross product.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":420007,"byte_end":420025,"line_start":1085,"line_end":1085,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":420030,"byte_end":420039,"line_start":1086,"line_end":1086,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4250},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":420419,"byte_end":420432,"line_start":1100,"line_end":1100,"column_start":12,"column_end":25},"name":"component_mul","qualname":"<Vector3D<T, U>>::component_mul","value":"pub fn component_mul(Self, Self) -> Self where T: Mul<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the component-wise multiplication of the two vectors.\n","sig":null,"attributes":[{"value":"/ Returns the component-wise multiplication of the two vectors.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":420328,"byte_end":420393,"line_start":1098,"line_end":1098,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":420398,"byte_end":420407,"line_start":1099,"line_end":1099,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4251},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":420667,"byte_end":420680,"line_start":1109,"line_end":1109,"column_start":12,"column_end":25},"name":"component_div","qualname":"<Vector3D<T, U>>::component_div","value":"pub fn component_div(Self, Self) -> Self where T: Div<Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the component-wise division of the two vectors.\n","sig":null,"attributes":[{"value":"/ Returns the component-wise division of the two vectors.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":420582,"byte_end":420641,"line_start":1107,"line_end":1107,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":420646,"byte_end":420655,"line_start":1108,"line_end":1108,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4252},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":420954,"byte_end":420962,"line_start":1120,"line_end":1120,"column_start":12,"column_end":20},"name":"to_point","qualname":"<Vector3D<T, U>>::to_point","value":"pub fn to_point(Self) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast this vector into a point.","sig":null,"attributes":[{"value":"/ Cast this vector into a point.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":420830,"byte_end":420864,"line_start":1116,"line_end":1116,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":420869,"byte_end":420872,"line_start":1117,"line_end":1117,"column_start":5,"column_end":8}},{"value":"/ Equivalent to adding this vector to the origin.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":420877,"byte_end":420928,"line_start":1118,"line_end":1118,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":420933,"byte_end":420942,"line_start":1119,"line_end":1119,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4253},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":421127,"byte_end":421129,"line_start":1126,"line_end":1126,"column_start":12,"column_end":14},"name":"xy","qualname":"<Vector3D<T, U>>::xy","value":"pub fn xy(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and y coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and y coordinates","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":421038,"byte_end":421101,"line_start":1124,"line_end":1124,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":421106,"byte_end":421115,"line_start":1125,"line_end":1125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4254},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":421285,"byte_end":421287,"line_start":1132,"line_end":1132,"column_start":12,"column_end":14},"name":"xz","qualname":"<Vector3D<T, U>>::xz","value":"pub fn xz(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and z coordinates","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":421196,"byte_end":421259,"line_start":1130,"line_end":1130,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":421264,"byte_end":421273,"line_start":1131,"line_end":1131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4255},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":421443,"byte_end":421445,"line_start":1138,"line_end":1138,"column_start":12,"column_end":14},"name":"yz","qualname":"<Vector3D<T, U>>::yz","value":"pub fn yz(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and z coordinates\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and z coordinates","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":421354,"byte_end":421417,"line_start":1136,"line_end":1136,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":421422,"byte_end":421431,"line_start":1137,"line_end":1137,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4256},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":421577,"byte_end":421585,"line_start":1144,"line_end":1144,"column_start":12,"column_end":20},"name":"to_array","qualname":"<Vector3D<T, U>>::to_array","value":"pub fn to_array(Self) -> [T; ]","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x, y and z.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":421512,"byte_end":421551,"line_start":1142,"line_end":1142,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":421556,"byte_end":421565,"line_start":1143,"line_end":1143,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4258},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":421716,"byte_end":421727,"line_start":1150,"line_end":1150,"column_start":12,"column_end":23},"name":"to_array_4d","qualname":"<Vector3D<T, U>>::to_array_4d","value":"pub fn to_array_4d(Self) -> [T; ] where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Cast into an array with x, y, z and 0.\n","sig":null,"attributes":[{"value":"/ Cast into an array with x, y, z and 0.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":421648,"byte_end":421690,"line_start":1148,"line_end":1148,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":421695,"byte_end":421704,"line_start":1149,"line_end":1149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4260},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":421899,"byte_end":421907,"line_start":1159,"line_end":1159,"column_start":12,"column_end":20},"name":"to_tuple","qualname":"<Vector3D<T, U>>::to_tuple","value":"pub fn to_tuple(Self) -> (T, T, T)","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y and z.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y and z.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":421835,"byte_end":421873,"line_start":1157,"line_end":1157,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":421878,"byte_end":421887,"line_start":1158,"line_end":1158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4261},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422040,"byte_end":422051,"line_start":1165,"line_end":1165,"column_start":12,"column_end":23},"name":"to_tuple_4d","qualname":"<Vector3D<T, U>>::to_tuple_4d","value":"pub fn to_tuple_4d(Self) -> (T, T, T, T) where T: Zero","parent":null,"children":[],"decl_id":null,"docs":" Cast into a tuple with x, y, z and 0.\n","sig":null,"attributes":[{"value":"/ Cast into a tuple with x, y, z and 0.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":421973,"byte_end":422014,"line_start":1163,"line_end":1163,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422019,"byte_end":422028,"line_start":1164,"line_end":1164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4262},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422245,"byte_end":422255,"line_start":1174,"line_end":1174,"column_start":12,"column_end":22},"name":"to_untyped","qualname":"<Vector3D<T, U>>::to_untyped","value":"pub fn to_untyped(Self) -> Vector3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":" Drop the units, preserving only the numeric value.\n","sig":null,"attributes":[{"value":"/ Drop the units, preserving only the numeric value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422165,"byte_end":422219,"line_start":1172,"line_end":1172,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422224,"byte_end":422233,"line_start":1173,"line_end":1173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4263},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422384,"byte_end":422393,"line_start":1180,"line_end":1180,"column_start":12,"column_end":21},"name":"cast_unit","qualname":"<Vector3D<T, U>>::cast_unit","value":"pub fn cast_unit<V>(Self) -> Vector3D<T, V>","parent":null,"children":[],"decl_id":null,"docs":" Cast the unit.\n","sig":null,"attributes":[{"value":"/ Cast the unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422340,"byte_end":422358,"line_start":1178,"line_end":1178,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422363,"byte_end":422372,"line_start":1179,"line_end":1179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4265},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422526,"byte_end":422531,"line_start":1186,"line_end":1186,"column_start":12,"column_end":17},"name":"to_2d","qualname":"<Vector3D<T, U>>::to_2d","value":"pub fn to_2d(Self) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convert into a 2d vector.\n","sig":null,"attributes":[{"value":"/ Convert into a 2d vector.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422471,"byte_end":422500,"line_start":1184,"line_end":1184,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422505,"byte_end":422514,"line_start":1185,"line_end":1185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4266},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422953,"byte_end":422958,"line_start":1202,"line_end":1202,"column_start":12,"column_end":17},"name":"round","qualname":"<Vector3D<T, U>>::round","value":"pub fn round(Self) -> Self where T: Round","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the nearest integer value.","sig":null,"attributes":[{"value":"/ Rounds each component to the nearest integer value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422587,"byte_end":422642,"line_start":1190,"line_end":1190,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422647,"byte_end":422650,"line_start":1191,"line_end":1191,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422655,"byte_end":422730,"line_start":1192,"line_end":1192,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422735,"byte_end":422738,"line_start":1193,"line_end":1193,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422743,"byte_end":422754,"line_start":1194,"line_end":1194,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec3;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422759,"byte_end":422782,"line_start":1195,"line_end":1195,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422787,"byte_end":422801,"line_start":1196,"line_end":1196,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422806,"byte_end":422809,"line_start":1197,"line_end":1197,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, Mm>(-0.1, -0.8, 0.4).round(), vec3::<_, Mm>(0.0, -1.0, 0.0))","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422814,"byte_end":422899,"line_start":1198,"line_end":1198,"column_start":5,"column_end":90}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422904,"byte_end":422911,"line_start":1199,"line_end":1199,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422916,"byte_end":422925,"line_start":1200,"line_end":1200,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":422930,"byte_end":422941,"line_start":1201,"line_end":1201,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4267},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423479,"byte_end":423483,"line_start":1221,"line_end":1221,"column_start":12,"column_end":16},"name":"ceil","qualname":"<Vector3D<T, U>>::ceil","value":"pub fn ceil(Self) -> Self where T: Ceil","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the smallest integer equal or greater than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the smallest integer equal or greater than the original value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423079,"byte_end":423170,"line_start":1209,"line_end":1209,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423175,"byte_end":423178,"line_start":1210,"line_end":1210,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423183,"byte_end":423258,"line_start":1211,"line_end":1211,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423263,"byte_end":423266,"line_start":1212,"line_end":1212,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423271,"byte_end":423282,"line_start":1213,"line_end":1213,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec3;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423287,"byte_end":423310,"line_start":1214,"line_end":1214,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423315,"byte_end":423329,"line_start":1215,"line_end":1215,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423334,"byte_end":423337,"line_start":1216,"line_end":1216,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, Mm>(-0.1, -0.8, 0.4).ceil(), vec3::<_, Mm>(0.0, 0.0, 1.0))","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423342,"byte_end":423425,"line_start":1217,"line_end":1217,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423430,"byte_end":423437,"line_start":1218,"line_end":1218,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423442,"byte_end":423451,"line_start":1219,"line_end":1219,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423456,"byte_end":423467,"line_start":1220,"line_end":1220,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4268},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":424000,"byte_end":424005,"line_start":1240,"line_end":1240,"column_start":12,"column_end":17},"name":"floor","qualname":"<Vector3D<T, U>>::floor","value":"pub fn floor(Self) -> Self where T: Floor","parent":null,"children":[],"decl_id":null,"docs":" Rounds each component to the biggest integer equal or lower than the original value.","sig":null,"attributes":[{"value":"/ Rounds each component to the biggest integer equal or lower than the original value.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423600,"byte_end":423688,"line_start":1228,"line_end":1228,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423693,"byte_end":423696,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ This behavior is preserved for negative values (unlike the basic cast).","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423701,"byte_end":423776,"line_start":1230,"line_end":1230,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423781,"byte_end":423784,"line_start":1231,"line_end":1231,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423789,"byte_end":423800,"line_start":1232,"line_end":1232,"column_start":5,"column_end":16}},{"value":"/ # use euclid::vec3;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423805,"byte_end":423828,"line_start":1233,"line_end":1233,"column_start":5,"column_end":28}},{"value":"/ enum Mm {}","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423833,"byte_end":423847,"line_start":1234,"line_end":1234,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423852,"byte_end":423855,"line_start":1235,"line_end":1235,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(vec3::<_, Mm>(-0.1, -0.8, 0.4).floor(), vec3::<_, Mm>(-1.0, -1.0, 0.0))","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423860,"byte_end":423946,"line_start":1236,"line_end":1236,"column_start":5,"column_end":91}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423951,"byte_end":423958,"line_start":1237,"line_end":1237,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423963,"byte_end":423972,"line_start":1238,"line_end":1238,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":423977,"byte_end":423988,"line_start":1239,"line_end":1239,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4269},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":424206,"byte_end":424218,"line_start":1249,"line_end":1249,"column_start":12,"column_end":24},"name":"to_transform","qualname":"<Vector3D<T, U>>::to_transform","value":"pub fn to_transform(Self) -> Transform3D<T, U, U> where T: Zero + One","parent":null,"children":[],"decl_id":null,"docs":" Creates translation by this vector in vector units\n","sig":null,"attributes":[{"value":"/ Creates translation by this vector in vector units","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":424126,"byte_end":424180,"line_start":1247,"line_end":1247,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":424185,"byte_end":424194,"line_start":1248,"line_end":1248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4273},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":424513,"byte_end":424526,"line_start":1263,"line_end":1263,"column_start":12,"column_end":25},"name":"square_length","qualname":"<Vector3D<T, U>>::square_length","value":"pub fn square_length(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector's length squared.\n","sig":null,"attributes":[{"value":"/ Returns the vector's length squared.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":424447,"byte_end":424487,"line_start":1261,"line_end":1261,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":424492,"byte_end":424501,"line_start":1262,"line_end":1262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4274},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":424764,"byte_end":424783,"line_start":1271,"line_end":1271,"column_start":12,"column_end":31},"name":"project_onto_vector","qualname":"<Vector3D<T, U>>::project_onto_vector","value":"pub fn project_onto_vector(Self, Self) -> Self where T: Sub<T, Output = T> +\nDiv<T, Output = T>","parent":null,"children":[],"decl_id":null,"docs":" Returns this vector projected onto another one.","sig":null,"attributes":[{"value":"/ Returns this vector projected onto another one.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":424611,"byte_end":424662,"line_start":1267,"line_end":1267,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":424667,"byte_end":424670,"line_start":1268,"line_end":1268,"column_start":5,"column_end":8}},{"value":"/ Projecting onto a nil vector will cause a division by zero.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":424675,"byte_end":424738,"line_start":1269,"line_end":1269,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":424743,"byte_end":424752,"line_start":1270,"line_end":1270,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4278},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":425119,"byte_end":425127,"line_start":1283,"line_end":1283,"column_start":12,"column_end":20},"name":"angle_to","qualname":"<Vector3D<T, U>>::angle_to","value":"pub fn angle_to(Self, Self) -> Angle<T> where T: Trig","parent":null,"children":[],"decl_id":null,"docs":" Returns the positive angle between this vector and another vector.","sig":null,"attributes":[{"value":"/ Returns the positive angle between this vector and another vector.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":424981,"byte_end":425051,"line_start":1280,"line_end":1280,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":425056,"byte_end":425059,"line_start":1281,"line_end":1281,"column_start":5,"column_end":8}},{"value":"/ The returned angle is between 0 and PI.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":425064,"byte_end":425107,"line_start":1282,"line_end":1282,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":4279},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":425380,"byte_end":425386,"line_start":1295,"line_end":1295,"column_start":12,"column_end":18},"name":"length","qualname":"<Vector3D<T, U>>::length","value":"pub fn length(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector length.\n","sig":null,"attributes":[{"value":"/ Returns the vector length.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":425324,"byte_end":425354,"line_start":1293,"line_end":1293,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":425359,"byte_end":425368,"line_start":1294,"line_end":1294,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4280},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":425535,"byte_end":425544,"line_start":1302,"line_end":1302,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Vector3D<T, U>>::normalize","value":"pub fn normalize(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit\n","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":425447,"byte_end":425493,"line_start":1299,"line_end":1299,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":425498,"byte_end":425507,"line_start":1300,"line_end":1300,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":425512,"byte_end":425523,"line_start":1301,"line_end":1301,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4281},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":425834,"byte_end":425847,"line_start":1312,"line_end":1312,"column_start":12,"column_end":25},"name":"try_normalize","qualname":"<Vector3D<T, U>>::try_normalize","value":"pub fn try_normalize(Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector with length of one unit.","sig":null,"attributes":[{"value":"/ Returns the vector with length of one unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":425601,"byte_end":425648,"line_start":1306,"line_end":1306,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":425653,"byte_end":425656,"line_start":1307,"line_end":1307,"column_start":5,"column_end":8}},{"value":"/ Unlike [`Vector2D::normalize`](#method.normalize), this returns None in the case that the","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":425661,"byte_end":425754,"line_start":1308,"line_end":1308,"column_start":5,"column_end":98}},{"value":"/ length of the vector is zero.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":425759,"byte_end":425792,"line_start":1309,"line_end":1309,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":425797,"byte_end":425806,"line_start":1310,"line_end":1310,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":425811,"byte_end":425822,"line_start":1311,"line_end":1311,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4282},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":426151,"byte_end":426167,"line_start":1324,"line_end":1324,"column_start":12,"column_end":28},"name":"robust_normalize","qualname":"<Vector3D<T, U>>::robust_normalize","value":"pub fn robust_normalize(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return the normalized vector even if the length is larger than the max value of Float.\n","sig":null,"attributes":[{"value":"/ Return the normalized vector even if the length is larger than the max value of Float.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":426019,"byte_end":426109,"line_start":1321,"line_end":1321,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":426114,"byte_end":426123,"line_start":1322,"line_end":1322,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":426128,"byte_end":426139,"line_start":1323,"line_end":1323,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4283},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":426479,"byte_end":426494,"line_start":1336,"line_end":1336,"column_start":12,"column_end":27},"name":"with_max_length","qualname":"<Vector3D<T, U>>::with_max_length","value":"pub fn with_max_length(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector capped to a maximum length.\n","sig":null,"attributes":[{"value":"/ Return this vector capped to a maximum length.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":426403,"byte_end":426453,"line_start":1334,"line_end":1334,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":426458,"byte_end":426467,"line_start":1335,"line_end":1335,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4284},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":426806,"byte_end":426821,"line_start":1347,"line_end":1347,"column_start":12,"column_end":27},"name":"with_min_length","qualname":"<Vector3D<T, U>>::with_min_length","value":"pub fn with_min_length(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with a minimum length applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with a minimum length applied.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":426727,"byte_end":426780,"line_start":1345,"line_end":1345,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":426785,"byte_end":426794,"line_start":1346,"line_end":1346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4285},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427144,"byte_end":427156,"line_start":1358,"line_end":1358,"column_start":12,"column_end":24},"name":"clamp_length","qualname":"<Vector3D<T, U>>::clamp_length","value":"pub fn clamp_length(Self, T, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return this vector with minimum and maximum lengths applied.\n","sig":null,"attributes":[{"value":"/ Return this vector with minimum and maximum lengths applied.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427054,"byte_end":427118,"line_start":1356,"line_end":1356,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427123,"byte_end":427132,"line_start":1357,"line_end":1357,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4286},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427359,"byte_end":427368,"line_start":1365,"line_end":1365,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Vector3D<T, U>>::is_finite","value":"pub fn is_finite(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members are finite.\n","sig":null,"attributes":[{"value":"/ Returns true if all members are finite.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427290,"byte_end":427333,"line_start":1363,"line_end":1363,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427338,"byte_end":427347,"line_start":1364,"line_end":1364,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4290},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":428263,"byte_end":428267,"line_start":1392,"line_end":1392,"column_start":12,"column_end":16},"name":"lerp","qualname":"<Vector3D<T, U>>::lerp","value":"pub fn lerp(Self, Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Linearly interpolate each component between this vector and another vector.","sig":null,"attributes":[{"value":"/ Linearly interpolate each component between this vector and another vector.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427576,"byte_end":427655,"line_start":1374,"line_end":1374,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427660,"byte_end":427663,"line_start":1375,"line_end":1375,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427668,"byte_end":427681,"line_start":1376,"line_end":1376,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427686,"byte_end":427689,"line_start":1377,"line_end":1377,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427694,"byte_end":427705,"line_start":1378,"line_end":1378,"column_start":5,"column_end":16}},{"value":"/ use euclid::vec3;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427710,"byte_end":427731,"line_start":1379,"line_end":1379,"column_start":5,"column_end":26}},{"value":"/ use euclid::default::Vector3D;","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427736,"byte_end":427770,"line_start":1380,"line_end":1380,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427775,"byte_end":427778,"line_start":1381,"line_end":1381,"column_start":5,"column_end":8}},{"value":"/ let from: Vector3D<_> = vec3(0.0, 10.0, -1.0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427783,"byte_end":427833,"line_start":1382,"line_end":1382,"column_start":5,"column_end":55}},{"value":"/ let to:  Vector3D<_> = vec3(8.0, -4.0,  0.0);","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427838,"byte_end":427887,"line_start":1383,"line_end":1383,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427892,"byte_end":427895,"line_start":1384,"line_end":1384,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from.lerp(to, -1.0), vec3(-8.0,  24.0, -2.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427900,"byte_end":427961,"line_start":1385,"line_end":1385,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  0.0), vec3( 0.0,  10.0, -1.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427966,"byte_end":428027,"line_start":1386,"line_end":1386,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  0.5), vec3( 4.0,   3.0, -0.5));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":428032,"byte_end":428093,"line_start":1387,"line_end":1387,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  1.0), vec3( 8.0,  -4.0,  0.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":428098,"byte_end":428159,"line_start":1388,"line_end":1388,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from.lerp(to,  2.0), vec3(16.0, -18.0,  1.0));","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":428164,"byte_end":428225,"line_start":1389,"line_end":1389,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":428230,"byte_end":428237,"line_start":1390,"line_end":1390,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":428242,"byte_end":428251,"line_start":1391,"line_end":1391,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4291},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":428482,"byte_end":428489,"line_start":1399,"line_end":1399,"column_start":12,"column_end":19},"name":"reflect","qualname":"<Vector3D<T, U>>::reflect","value":"pub fn reflect(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a reflection vector using an incident ray and a surface normal.\n","sig":null,"attributes":[{"value":"/ Returns a reflection vector using an incident ray and a surface normal.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":428381,"byte_end":428456,"line_start":1397,"line_end":1397,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":428461,"byte_end":428470,"line_start":1398,"line_end":1398,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4295},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":428771,"byte_end":428774,"line_start":1408,"line_end":1408,"column_start":12,"column_end":15},"name":"min","qualname":"<Vector3D<T, U>>::min","value":"pub fn min(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are minimum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are minimum of this vector and another.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":428659,"byte_end":428745,"line_start":1406,"line_end":1406,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":428750,"byte_end":428759,"line_start":1407,"line_end":1407,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4296},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":429053,"byte_end":429056,"line_start":1418,"line_end":1418,"column_start":12,"column_end":15},"name":"max","qualname":"<Vector3D<T, U>>::max","value":"pub fn max(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which are maximum of this vector and another.\n","sig":null,"attributes":[{"value":"/ Returns the vector each component of which are maximum of this vector and another.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":428941,"byte_end":429027,"line_start":1416,"line_end":1416,"column_start":5,"column_end":91}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":429032,"byte_end":429041,"line_start":1417,"line_end":1417,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4297},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":429421,"byte_end":429426,"line_start":1431,"line_end":1431,"column_start":12,"column_end":17},"name":"clamp","qualname":"<Vector3D<T, U>>::clamp","value":"pub fn clamp(Self, Self, Self) -> Self where T: Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns the vector each component of which is clamped by corresponding\n components of `start` and `end`.","sig":null,"attributes":[{"value":"/ Returns the vector each component of which is clamped by corresponding","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":429223,"byte_end":429297,"line_start":1426,"line_end":1426,"column_start":5,"column_end":79}},{"value":"/ components of `start` and `end`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":429302,"byte_end":429338,"line_start":1427,"line_end":1427,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":429343,"byte_end":429346,"line_start":1428,"line_end":1428,"column_start":5,"column_end":8}},{"value":"/ Shortcut for `self.max(start).min(end)`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":429351,"byte_end":429395,"line_start":1429,"line_end":1429,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":429400,"byte_end":429409,"line_start":1430,"line_end":1430,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4298},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":429646,"byte_end":429658,"line_start":1440,"line_end":1440,"column_start":12,"column_end":24},"name":"greater_than","qualname":"<Vector3D<T, U>>::greater_than","value":"pub fn greater_than(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"greater than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"greater than\" operation on each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":429542,"byte_end":429620,"line_start":1438,"line_end":1438,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":429625,"byte_end":429634,"line_start":1439,"line_end":1439,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4299},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":429941,"byte_end":429951,"line_start":1450,"line_end":1450,"column_start":12,"column_end":22},"name":"lower_than","qualname":"<Vector3D<T, U>>::lower_than","value":"pub fn lower_than(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"lower than\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"lower than\" operation on each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":429839,"byte_end":429915,"line_start":1448,"line_end":1448,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":429920,"byte_end":429929,"line_start":1449,"line_end":1449,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4303},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":430270,"byte_end":430275,"line_start":1462,"line_end":1462,"column_start":12,"column_end":17},"name":"equal","qualname":"<Vector3D<T, U>>::equal","value":"pub fn equal(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"equal\" operation on each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":430173,"byte_end":430244,"line_start":1460,"line_end":1460,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":430249,"byte_end":430258,"line_start":1461,"line_end":1461,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4304},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":430560,"byte_end":430569,"line_start":1472,"line_end":1472,"column_start":12,"column_end":21},"name":"not_equal","qualname":"<Vector3D<T, U>>::not_equal","value":"pub fn not_equal(Self, Self) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Returns vector with results of \"not equal\" operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns vector with results of \"not equal\" operation on each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":430459,"byte_end":430534,"line_start":1470,"line_end":1470,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":430539,"byte_end":430548,"line_start":1471,"line_end":1471,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4308},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":431180,"byte_end":431184,"line_start":1488,"line_end":1488,"column_start":12,"column_end":16},"name":"cast","qualname":"<Vector3D<T, U>>::cast","value":"pub fn cast<NewT: NumCast>(Self) -> Vector3D<NewT, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":430799,"byte_end":430873,"line_start":1482,"line_end":1482,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":430878,"byte_end":430881,"line_start":1483,"line_end":1483,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":430886,"byte_end":430974,"line_start":1484,"line_end":1484,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":430979,"byte_end":431067,"line_start":1485,"line_end":1485,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":431072,"byte_end":431154,"line_start":1486,"line_end":1486,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":431159,"byte_end":431168,"line_start":1487,"line_end":1487,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4310},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":431649,"byte_end":431657,"line_start":1497,"line_end":1497,"column_start":12,"column_end":20},"name":"try_cast","qualname":"<Vector3D<T, U>>::try_cast","value":"pub fn try_cast<NewT: NumCast>(Self) -> Option<Vector3D<NewT, U>>","parent":null,"children":[],"decl_id":null,"docs":" Fallible cast from one numeric representation to another, preserving the units.","sig":null,"attributes":[{"value":"/ Fallible cast from one numeric representation to another, preserving the units.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":431273,"byte_end":431356,"line_start":1492,"line_end":1492,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":431361,"byte_end":431364,"line_start":1493,"line_end":1493,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector to integer coordinates, the decimals are truncated","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":431369,"byte_end":431457,"line_start":1494,"line_end":1494,"column_start":5,"column_end":93}},{"value":"/ as one would expect from a simple cast, but this behavior does not always make sense","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":431462,"byte_end":431550,"line_start":1495,"line_end":1495,"column_start":5,"column_end":93}},{"value":"/ geometrically. Consider using `round()`, `ceil()` or `floor()` before casting.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":431555,"byte_end":431637,"line_start":1496,"line_end":1496,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":4312},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432055,"byte_end":432061,"line_start":1512,"line_end":1512,"column_start":12,"column_end":18},"name":"to_f32","qualname":"<Vector3D<T, U>>::to_f32","value":"pub fn to_f32(Self) -> Vector3D<f32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f32` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f32` vector.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":431999,"byte_end":432029,"line_start":1510,"line_end":1510,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432034,"byte_end":432043,"line_start":1511,"line_end":1511,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4313},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432177,"byte_end":432183,"line_start":1518,"line_end":1518,"column_start":12,"column_end":18},"name":"to_f64","qualname":"<Vector3D<T, U>>::to_f64","value":"pub fn to_f64(Self) -> Vector3D<f64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `f64` vector.\n","sig":null,"attributes":[{"value":"/ Cast into an `f64` vector.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432121,"byte_end":432151,"line_start":1516,"line_end":1516,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432156,"byte_end":432165,"line_start":1517,"line_end":1517,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4314},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432540,"byte_end":432548,"line_start":1528,"line_end":1528,"column_start":12,"column_end":20},"name":"to_usize","qualname":"<Vector3D<T, U>>::to_usize","value":"pub fn to_usize(Self) -> Vector3D<usize, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `usize` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `usize` vector, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432243,"byte_end":432303,"line_start":1522,"line_end":1522,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432308,"byte_end":432311,"line_start":1523,"line_end":1523,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432316,"byte_end":432394,"line_start":1524,"line_end":1524,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432399,"byte_end":432473,"line_start":1525,"line_end":1525,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432478,"byte_end":432514,"line_start":1526,"line_end":1526,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432519,"byte_end":432528,"line_start":1527,"line_end":1527,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4315},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432905,"byte_end":432911,"line_start":1538,"line_end":1538,"column_start":12,"column_end":18},"name":"to_u32","qualname":"<Vector3D<T, U>>::to_u32","value":"pub fn to_u32(Self) -> Vector3D<u32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `u32` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `u32` vector, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432610,"byte_end":432668,"line_start":1532,"line_end":1532,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432673,"byte_end":432676,"line_start":1533,"line_end":1533,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432681,"byte_end":432759,"line_start":1534,"line_end":1534,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432764,"byte_end":432838,"line_start":1535,"line_end":1535,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432843,"byte_end":432879,"line_start":1536,"line_end":1536,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432884,"byte_end":432893,"line_start":1537,"line_end":1537,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4316},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":433266,"byte_end":433272,"line_start":1548,"line_end":1548,"column_start":12,"column_end":18},"name":"to_i32","qualname":"<Vector3D<T, U>>::to_i32","value":"pub fn to_i32(Self) -> Vector3D<i32, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i32` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i32` vector, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":432971,"byte_end":433029,"line_start":1542,"line_end":1542,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":433034,"byte_end":433037,"line_start":1543,"line_end":1543,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":433042,"byte_end":433120,"line_start":1544,"line_end":1544,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":433125,"byte_end":433199,"line_start":1545,"line_end":1545,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":433204,"byte_end":433240,"line_start":1546,"line_end":1546,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":433245,"byte_end":433254,"line_start":1547,"line_end":1547,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4317},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":433627,"byte_end":433633,"line_start":1558,"line_end":1558,"column_start":12,"column_end":18},"name":"to_i64","qualname":"<Vector3D<T, U>>::to_i64","value":"pub fn to_i64(Self) -> Vector3D<i64, U>","parent":null,"children":[],"decl_id":null,"docs":" Cast into an `i64` vector, truncating decimals if any.","sig":null,"attributes":[{"value":"/ Cast into an `i64` vector, truncating decimals if any.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":433332,"byte_end":433390,"line_start":1552,"line_end":1552,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":433395,"byte_end":433398,"line_start":1553,"line_end":1553,"column_start":5,"column_end":8}},{"value":"/ When casting from floating vector vectors, it is worth considering whether","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":433403,"byte_end":433481,"line_start":1554,"line_end":1554,"column_start":5,"column_end":83}},{"value":"/ to `round()`, `ceil()` or `floor()` before the cast in order to obtain","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":433486,"byte_end":433560,"line_start":1555,"line_end":1555,"column_start":5,"column_end":79}},{"value":"/ the desired conversion behavior.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":433565,"byte_end":433601,"line_start":1556,"line_end":1556,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":433606,"byte_end":433615,"line_start":1557,"line_end":1557,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":4683},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":438859,"byte_end":438871,"line_start":1777,"line_end":1777,"column_start":12,"column_end":24},"name":"BoolVector2D","qualname":"::vector::BoolVector2D","value":"BoolVector2D { x, y }","parent":null,"children":[{"krate":0,"index":4684},{"krate":0,"index":4685}],"decl_id":null,"docs":" A 2d vector of booleans, useful for component-wise logic operations.\n","sig":null,"attributes":[{"value":"/ A 2d vector of booleans, useful for component-wise logic operations.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":438724,"byte_end":438796,"line_start":1775,"line_end":1775,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":4684},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":438882,"byte_end":438883,"line_start":1778,"line_end":1778,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::BoolVector2D::x","value":"bool","parent":{"krate":0,"index":4683},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4685},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":438899,"byte_end":438900,"line_start":1779,"line_end":1779,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::BoolVector2D::y","value":"bool","parent":{"krate":0,"index":4683},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4701},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439046,"byte_end":439058,"line_start":1784,"line_end":1784,"column_start":12,"column_end":24},"name":"BoolVector3D","qualname":"::vector::BoolVector3D","value":"BoolVector3D { x, y, z }","parent":null,"children":[{"krate":0,"index":4702},{"krate":0,"index":4703},{"krate":0,"index":4704}],"decl_id":null,"docs":" A 3d vector of booleans, useful for component-wise logic operations.\n","sig":null,"attributes":[{"value":"/ A 3d vector of booleans, useful for component-wise logic operations.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":438911,"byte_end":438983,"line_start":1782,"line_end":1782,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":4702},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439069,"byte_end":439070,"line_start":1785,"line_end":1785,"column_start":9,"column_end":10},"name":"x","qualname":"::vector::BoolVector3D::x","value":"bool","parent":{"krate":0,"index":4701},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4703},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439086,"byte_end":439087,"line_start":1786,"line_end":1786,"column_start":9,"column_end":10},"name":"y","qualname":"::vector::BoolVector3D::y","value":"bool","parent":{"krate":0,"index":4701},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":4704},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439103,"byte_end":439104,"line_start":1787,"line_end":1787,"column_start":9,"column_end":10},"name":"z","qualname":"::vector::BoolVector3D::z","value":"bool","parent":{"krate":0,"index":4701},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":4434},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439235,"byte_end":439238,"line_start":1793,"line_end":1793,"column_start":12,"column_end":15},"name":"all","qualname":"<BoolVector2D>::all","value":"pub fn all(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `true` and `false` otherwise.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439139,"byte_end":439209,"line_start":1791,"line_end":1791,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439214,"byte_end":439223,"line_start":1792,"line_end":1792,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4435},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439386,"byte_end":439389,"line_start":1799,"line_end":1799,"column_start":12,"column_end":15},"name":"any","qualname":"<BoolVector2D>::any","value":"pub fn any(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component are `true` and `false` otherwise.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439291,"byte_end":439360,"line_start":1797,"line_end":1797,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439365,"byte_end":439374,"line_start":1798,"line_end":1798,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4436},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439560,"byte_end":439564,"line_start":1805,"line_end":1805,"column_start":12,"column_end":16},"name":"none","qualname":"<BoolVector2D>::none","value":"pub fn none(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439442,"byte_end":439534,"line_start":1803,"line_end":1803,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439539,"byte_end":439548,"line_start":1804,"line_end":1804,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4437},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439701,"byte_end":439704,"line_start":1811,"line_end":1811,"column_start":12,"column_end":15},"name":"and","qualname":"<BoolVector2D>::and","value":"pub fn and(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component AND operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component AND operation applied.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439612,"byte_end":439675,"line_start":1809,"line_end":1809,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439680,"byte_end":439689,"line_start":1810,"line_end":1810,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4438},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439934,"byte_end":439936,"line_start":1820,"line_end":1820,"column_start":12,"column_end":14},"name":"or","qualname":"<BoolVector2D>::or","value":"pub fn or(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component OR operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component OR operation applied.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439846,"byte_end":439908,"line_start":1818,"line_end":1818,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439913,"byte_end":439922,"line_start":1819,"line_end":1819,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4439},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":440180,"byte_end":440183,"line_start":1829,"line_end":1829,"column_start":12,"column_end":15},"name":"not","qualname":"<BoolVector2D>::not","value":"pub fn not(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with results of negation operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns new vector with results of negation operation on each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":440078,"byte_end":440154,"line_start":1827,"line_end":1827,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":440159,"byte_end":440168,"line_start":1828,"line_end":1828,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4440},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":440505,"byte_end":440517,"line_start":1839,"line_end":1839,"column_start":12,"column_end":24},"name":"select_point","qualname":"<BoolVector2D>::select_point","value":"pub fn select_point<T, U>(Self, Point2D<T, U>, Point2D<T, U>) -> Point2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns point, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns point, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":440292,"byte_end":440384,"line_start":1836,"line_end":1836,"column_start":5,"column_end":97}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":440389,"byte_end":440479,"line_start":1837,"line_end":1837,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":440484,"byte_end":440493,"line_start":1838,"line_end":1838,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4443},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":440924,"byte_end":440937,"line_start":1849,"line_end":1849,"column_start":12,"column_end":25},"name":"select_vector","qualname":"<BoolVector2D>::select_vector","value":"pub fn select_vector<T, U>(Self, Vector2D<T, U>, Vector2D<T, U>)\n-> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns vector, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns vector, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":440710,"byte_end":440803,"line_start":1846,"line_end":1846,"column_start":5,"column_end":98}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":440808,"byte_end":440898,"line_start":1847,"line_end":1847,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":440903,"byte_end":440912,"line_start":1848,"line_end":1848,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4446},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":441343,"byte_end":441354,"line_start":1859,"line_end":1859,"column_start":12,"column_end":23},"name":"select_size","qualname":"<BoolVector2D>::select_size","value":"pub fn select_size<T, U>(Self, Size2D<T, U>, Size2D<T, U>) -> Size2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns size, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns size, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":441131,"byte_end":441222,"line_start":1856,"line_end":1856,"column_start":5,"column_end":96}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":441227,"byte_end":441317,"line_start":1857,"line_end":1857,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":441322,"byte_end":441331,"line_start":1858,"line_end":1858,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4450},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":441679,"byte_end":441682,"line_start":1870,"line_end":1870,"column_start":12,"column_end":15},"name":"all","qualname":"<BoolVector3D>::all","value":"pub fn all(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `true` and `false` otherwise.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":441583,"byte_end":441653,"line_start":1868,"line_end":1868,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":441658,"byte_end":441667,"line_start":1869,"line_end":1869,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4451},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":441840,"byte_end":441843,"line_start":1876,"line_end":1876,"column_start":12,"column_end":15},"name":"any","qualname":"<BoolVector3D>::any","value":"pub fn any(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if any component are `true` and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if any component are `true` and `false` otherwise.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":441745,"byte_end":441814,"line_start":1874,"line_end":1874,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":441819,"byte_end":441828,"line_start":1875,"line_end":1875,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4452},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":442024,"byte_end":442028,"line_start":1882,"line_end":1882,"column_start":12,"column_end":16},"name":"none","qualname":"<BoolVector3D>::none","value":"pub fn none(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all components are `false` and `false` otherwise. Negation of `any()`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":441906,"byte_end":441998,"line_start":1880,"line_end":1880,"column_start":5,"column_end":97}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":442003,"byte_end":442012,"line_start":1881,"line_end":1881,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4453},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":442165,"byte_end":442168,"line_start":1888,"line_end":1888,"column_start":12,"column_end":15},"name":"and","qualname":"<BoolVector3D>::and","value":"pub fn and(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component AND operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component AND operation applied.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":442076,"byte_end":442139,"line_start":1886,"line_end":1886,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":442144,"byte_end":442153,"line_start":1887,"line_end":1887,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4454},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":442432,"byte_end":442434,"line_start":1898,"line_end":1898,"column_start":12,"column_end":14},"name":"or","qualname":"<BoolVector3D>::or","value":"pub fn or(Self, Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with by-component OR operation applied.\n","sig":null,"attributes":[{"value":"/ Returns new vector with by-component OR operation applied.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":442344,"byte_end":442406,"line_start":1896,"line_end":1896,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":442411,"byte_end":442420,"line_start":1897,"line_end":1897,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4455},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":442712,"byte_end":442715,"line_start":1908,"line_end":1908,"column_start":12,"column_end":15},"name":"not","qualname":"<BoolVector3D>::not","value":"pub fn not(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns new vector with results of negation operation on each component.\n","sig":null,"attributes":[{"value":"/ Returns new vector with results of negation operation on each component.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":442610,"byte_end":442686,"line_start":1906,"line_end":1906,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":442691,"byte_end":442700,"line_start":1907,"line_end":1907,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4456},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":443061,"byte_end":443073,"line_start":1919,"line_end":1919,"column_start":12,"column_end":24},"name":"select_point","qualname":"<BoolVector3D>::select_point","value":"pub fn select_point<T, U>(Self, Point3D<T, U>, Point3D<T, U>) -> Point3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns point, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns point, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":442848,"byte_end":442940,"line_start":1916,"line_end":1916,"column_start":5,"column_end":97}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":442945,"byte_end":443035,"line_start":1917,"line_end":1917,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":443040,"byte_end":443049,"line_start":1918,"line_end":1918,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4459},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":443524,"byte_end":443537,"line_start":1930,"line_end":1930,"column_start":12,"column_end":25},"name":"select_vector","qualname":"<BoolVector3D>::select_vector","value":"pub fn select_vector<T, U>(Self, Vector3D<T, U>, Vector3D<T, U>)\n-> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns vector, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns vector, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":443310,"byte_end":443403,"line_start":1927,"line_end":1927,"column_start":5,"column_end":98}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":443408,"byte_end":443498,"line_start":1928,"line_end":1928,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":443503,"byte_end":443512,"line_start":1929,"line_end":1929,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4462},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":444003,"byte_end":444014,"line_start":1942,"line_end":1942,"column_start":12,"column_end":23},"name":"select_size","qualname":"<BoolVector3D>::select_size","value":"pub fn select_size<T, U>(Self, Size3D<T, U>, Size3D<T, U>) -> Size3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Returns size, each component of which or from `a`, or from `b` depending on truly value\n of corresponding vector component. `true` selects value from `a` and `false` from `b`.\n","sig":null,"attributes":[{"value":"/ Returns size, each component of which or from `a`, or from `b` depending on truly value","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":443775,"byte_end":443866,"line_start":1938,"line_end":1938,"column_start":5,"column_end":96}},{"value":"/ of corresponding vector component. `true` selects value from `a` and `false` from `b`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":443871,"byte_end":443961,"line_start":1939,"line_end":1939,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":443966,"byte_end":443975,"line_start":1940,"line_end":1940,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":443980,"byte_end":443991,"line_start":1941,"line_end":1941,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4465},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":444363,"byte_end":444365,"line_start":1952,"line_end":1952,"column_start":12,"column_end":14},"name":"xy","qualname":"<BoolVector3D>::xy","value":"pub fn xy(Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and y coordinates.\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and y coordinates.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":444273,"byte_end":444337,"line_start":1950,"line_end":1950,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":444342,"byte_end":444351,"line_start":1951,"line_end":1951,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4466},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":444570,"byte_end":444572,"line_start":1961,"line_end":1961,"column_start":12,"column_end":14},"name":"xz","qualname":"<BoolVector3D>::xz","value":"pub fn xz(Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's x and z coordinates.\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's x and z coordinates.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":444480,"byte_end":444544,"line_start":1959,"line_end":1959,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":444549,"byte_end":444558,"line_start":1960,"line_end":1960,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":4467},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":444777,"byte_end":444779,"line_start":1970,"line_end":1970,"column_start":12,"column_end":14},"name":"yz","qualname":"<BoolVector3D>::yz","value":"pub fn yz(Self) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Returns a 2d vector using this vector's y and z coordinates.\n","sig":null,"attributes":[{"value":"/ Returns a 2d vector using this vector's y and z coordinates.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":444687,"byte_end":444751,"line_start":1968,"line_end":1968,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":444756,"byte_end":444765,"line_start":1969,"line_end":1969,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":4468},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":444944,"byte_end":444948,"line_start":1980,"line_end":1980,"column_start":14,"column_end":18},"name":"vec2","qualname":"::vector::vec2","value":"pub const fn vec2<T, U>(T, T) -> Vector2D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convenience constructor.\n","sig":null,"attributes":[{"value":"/ Convenience constructor.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":444892,"byte_end":444920,"line_start":1978,"line_end":1978,"column_start":1,"column_end":29}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":444921,"byte_end":444930,"line_start":1979,"line_end":1979,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":4471},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":445113,"byte_end":445117,"line_start":1990,"line_end":1990,"column_start":14,"column_end":18},"name":"vec3","qualname":"::vector::vec3","value":"pub const fn vec3<T, U>(T, T, T) -> Vector3D<T, U>","parent":null,"children":[],"decl_id":null,"docs":" Convenience constructor.\n","sig":null,"attributes":[{"value":"/ Convenience constructor.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":445061,"byte_end":445089,"line_start":1988,"line_end":1988,"column_start":1,"column_end":29}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":445090,"byte_end":445099,"line_start":1989,"line_end":1989,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":4474},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":445313,"byte_end":445318,"line_start":2001,"line_end":2001,"column_start":14,"column_end":19},"name":"bvec2","qualname":"::vector::bvec2","value":"pub const fn bvec2(bool, bool) -> BoolVector2D","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `BoolVector2D { x, y }`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `BoolVector2D { x, y }`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":445247,"byte_end":445289,"line_start":1999,"line_end":1999,"column_start":1,"column_end":43}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":445290,"byte_end":445299,"line_start":2000,"line_end":2000,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":4475},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":445453,"byte_end":445458,"line_start":2007,"line_end":2007,"column_start":14,"column_end":19},"name":"bvec3","qualname":"::vector::bvec3","value":"pub const fn bvec3(bool, bool, bool) -> BoolVector3D","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `BoolVector3D { x, y, z }`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `BoolVector3D { x, y, z }`.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":445384,"byte_end":445429,"line_start":2005,"line_end":2005,"column_start":1,"column_end":46}},{"value":"inline","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":445430,"byte_end":445439,"line_start":2006,"line_end":2006,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":4720},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":3050,"byte_end":3061,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"UnknownUnit","qualname":"::UnknownUnit","value":"","parent":null,"children":[],"decl_id":null,"docs":" The default unit.\n","sig":null,"attributes":[{"value":"/ The default unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2940,"byte_end":2961,"line_start":87,"line_end":87,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":4476},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":3072,"byte_end":3079,"line_start":91,"line_end":91,"column_start":9,"column_end":16},"name":"default","qualname":"::default","value":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":4477},{"krate":0,"index":4478},{"krate":0,"index":4480},{"krate":0,"index":4482},{"krate":0,"index":4484},{"krate":0,"index":4486},{"krate":0,"index":4488},{"krate":0,"index":4490},{"krate":0,"index":4492},{"krate":0,"index":4494},{"krate":0,"index":4496},{"krate":0,"index":4498},{"krate":0,"index":4500},{"krate":0,"index":4502},{"krate":0,"index":4504},{"krate":0,"index":4506},{"krate":0,"index":4508},{"krate":0,"index":4510},{"krate":0,"index":4512},{"krate":0,"index":4514},{"krate":0,"index":4516},{"krate":0,"index":4518}],"decl_id":null,"docs":" A set of aliases for all types, tagged with the default unknown unit.\n","sig":null,"attributes":[{"value":"/ A set of aliases for all types, tagged with the default unknown unit.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":3086,"byte_end":3159,"line_start":92,"line_end":92,"column_start":5,"column_end":78}}]},{"kind":"Type","id":{"krate":0,"index":4480},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":3202,"byte_end":3208,"line_start":95,"line_end":95,"column_start":14,"column_end":20},"name":"Length","qualname":"::default::Length","value":"super::Length<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4482},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":3258,"byte_end":3265,"line_start":96,"line_end":96,"column_start":14,"column_end":21},"name":"Point2D","qualname":"::default::Point2D","value":"super::Point2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4484},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":3316,"byte_end":3323,"line_start":97,"line_end":97,"column_start":14,"column_end":21},"name":"Point3D","qualname":"::default::Point3D","value":"super::Point3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4486},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":3374,"byte_end":3382,"line_start":98,"line_end":98,"column_start":14,"column_end":22},"name":"Vector2D","qualname":"::default::Vector2D","value":"super::Vector2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4488},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":3434,"byte_end":3442,"line_start":99,"line_end":99,"column_start":14,"column_end":22},"name":"Vector3D","qualname":"::default::Vector3D","value":"super::Vector3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4490},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":3494,"byte_end":3511,"line_start":100,"line_end":100,"column_start":14,"column_end":31},"name":"HomogeneousVector","qualname":"::default::HomogeneousVector","value":"super::HomogeneousVector<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4492},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":3572,"byte_end":3578,"line_start":101,"line_end":101,"column_start":14,"column_end":20},"name":"Size2D","qualname":"::default::Size2D","value":"super::Size2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4494},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":3628,"byte_end":3634,"line_start":102,"line_end":102,"column_start":14,"column_end":20},"name":"Size3D","qualname":"::default::Size3D","value":"super::Size3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4496},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":3684,"byte_end":3688,"line_start":103,"line_end":103,"column_start":14,"column_end":18},"name":"Rect","qualname":"::default::Rect","value":"super::Rect<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4498},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":3736,"byte_end":3741,"line_start":104,"line_end":104,"column_start":14,"column_end":19},"name":"Box2D","qualname":"::default::Box2D","value":"super::Box2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4500},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":3790,"byte_end":3795,"line_start":105,"line_end":105,"column_start":14,"column_end":19},"name":"Box3D","qualname":"::default::Box3D","value":"super::Box3D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4502},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":3844,"byte_end":3857,"line_start":106,"line_end":106,"column_start":14,"column_end":27},"name":"SideOffsets2D","qualname":"::default::SideOffsets2D","value":"super::SideOffsets2D<T, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4504},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":3914,"byte_end":3925,"line_start":107,"line_end":107,"column_start":14,"column_end":25},"name":"Transform2D","qualname":"::default::Transform2D","value":"super::Transform2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4506},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":3993,"byte_end":4004,"line_start":108,"line_end":108,"column_start":14,"column_end":25},"name":"Transform3D","qualname":"::default::Transform3D","value":"super::Transform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4508},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":4072,"byte_end":4082,"line_start":109,"line_end":109,"column_start":14,"column_end":24},"name":"Rotation2D","qualname":"::default::Rotation2D","value":"super::Rotation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4510},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":4149,"byte_end":4159,"line_start":110,"line_end":110,"column_start":14,"column_end":24},"name":"Rotation3D","qualname":"::default::Rotation3D","value":"super::Rotation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4512},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":4226,"byte_end":4239,"line_start":111,"line_end":111,"column_start":14,"column_end":27},"name":"Translation2D","qualname":"::default::Translation2D","value":"super::Translation2D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4514},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":4309,"byte_end":4322,"line_start":112,"line_end":112,"column_start":14,"column_end":27},"name":"Translation3D","qualname":"::default::Translation3D","value":"super::Translation3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4516},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":4392,"byte_end":4397,"line_start":113,"line_end":113,"column_start":14,"column_end":19},"name":"Scale","qualname":"::default::Scale","value":"super::Scale<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":4518},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":4459,"byte_end":4475,"line_start":114,"line_end":114,"column_start":14,"column_end":30},"name":"RigidTransform3D","qualname":"::default::RigidTransform3D","value":"super::RigidTransform3D<T, UnknownUnit, UnknownUnit>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":6672,"byte_end":6677,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":6851,"byte_end":6856,"line_start":40,"line_end":40,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":7124,"byte_end":7129,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":7668,"byte_end":7673,"line_start":77,"line_end":77,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":8358,"byte_end":8363,"line_start":104,"line_end":104,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":8659,"byte_end":8664,"line_start":120,"line_end":120,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":8768,"byte_end":8773,"line_start":129,"line_end":129,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":9213,"byte_end":9218,"line_start":154,"line_end":154,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":9933,"byte_end":9938,"line_start":184,"line_end":184,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":10119,"byte_end":10124,"line_start":191,"line_end":191,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":10284,"byte_end":10289,"line_start":198,"line_end":198,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":10454,"byte_end":10459,"line_start":204,"line_end":204,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":10610,"byte_end":10615,"line_start":210,"line_end":210,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":10763,"byte_end":10768,"line_start":216,"line_end":216,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":10961,"byte_end":10966,"line_start":223,"line_end":223,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":11114,"byte_end":11119,"line_start":229,"line_end":229,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":11286,"byte_end":11291,"line_start":237,"line_end":237,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":11475,"byte_end":11480,"line_start":245,"line_end":245,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":11608,"byte_end":11613,"line_start":251,"line_end":251,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":262},{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":11797,"byte_end":11802,"line_start":259,"line_end":259,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":11924,"byte_end":11929,"line_start":265,"line_end":265,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":12070,"byte_end":12075,"line_start":272,"line_end":272,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19691,"byte_end":19696,"line_start":70,"line_end":70,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19835,"byte_end":19840,"line_start":77,"line_end":77,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19879,"byte_end":19884,"line_start":79,"line_end":79,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":20022,"byte_end":20027,"line_start":85,"line_end":85,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":20167,"byte_end":20172,"line_start":91,"line_end":91,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":20221,"byte_end":20226,"line_start":93,"line_end":93,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":397}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":20427,"byte_end":20432,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":21151,"byte_end":21156,"line_start":131,"line_end":131,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":22868,"byte_end":22873,"line_start":180,"line_end":180,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":24565,"byte_end":24570,"line_start":238,"line_end":238,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":24855,"byte_end":24860,"line_start":252,"line_end":252,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":25604,"byte_end":25609,"line_start":288,"line_end":288,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":26824,"byte_end":26829,"line_start":324,"line_end":324,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":27826,"byte_end":27831,"line_start":365,"line_end":365,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":28144,"byte_end":28149,"line_start":376,"line_end":376,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":28370,"byte_end":28375,"line_start":386,"line_end":386,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":28574,"byte_end":28579,"line_start":397,"line_end":397,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":28779,"byte_end":28784,"line_start":407,"line_end":407,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":29002,"byte_end":29007,"line_start":416,"line_end":416,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":29150,"byte_end":29155,"line_start":423,"line_end":423,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":29373,"byte_end":29378,"line_start":432,"line_end":432,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":29541,"byte_end":29546,"line_start":439,"line_end":439,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":480},{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":29794,"byte_end":29799,"line_start":448,"line_end":448,"column_start":60,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":485}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":29993,"byte_end":29998,"line_start":456,"line_end":456,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":490},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":30246,"byte_end":30251,"line_start":465,"line_end":465,"column_start":60,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":30402,"byte_end":30407,"line_start":473,"line_end":473,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":31473,"byte_end":31478,"line_start":517,"line_end":517,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34324,"byte_end":34329,"line_start":595,"line_end":595,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34510,"byte_end":34515,"line_start":603,"line_end":603,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":35190,"byte_end":35195,"line_start":622,"line_end":622,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":35857,"byte_end":35862,"line_start":645,"line_end":645,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":36017,"byte_end":36022,"line_start":654,"line_end":654,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":44967,"byte_end":44972,"line_start":40,"line_end":40,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":45111,"byte_end":45116,"line_start":47,"line_end":47,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":45155,"byte_end":45160,"line_start":49,"line_end":49,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":45298,"byte_end":45303,"line_start":55,"line_end":55,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":45443,"byte_end":45448,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":45497,"byte_end":45502,"line_start":63,"line_end":63,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":45703,"byte_end":45708,"line_start":72,"line_end":72,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":645},{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":46137,"byte_end":46142,"line_start":89,"line_end":89,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":48168,"byte_end":48173,"line_start":146,"line_end":146,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":49797,"byte_end":49802,"line_start":213,"line_end":213,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":665}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":50105,"byte_end":50110,"line_start":228,"line_end":228,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":50629,"byte_end":50634,"line_start":257,"line_end":257,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":51100,"byte_end":51105,"line_start":272,"line_end":272,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":52287,"byte_end":52292,"line_start":319,"line_end":319,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":685}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":52609,"byte_end":52614,"line_start":330,"line_end":330,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":52835,"byte_end":52840,"line_start":340,"line_end":340,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":53410,"byte_end":53415,"line_start":369,"line_end":369,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":700}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":53615,"byte_end":53620,"line_start":379,"line_end":379,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":704},{"krate":0,"index":705}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":53838,"byte_end":53843,"line_start":388,"line_end":388,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":54004,"byte_end":54009,"line_start":396,"line_end":396,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":54235,"byte_end":54240,"line_start":405,"line_end":405,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":54421,"byte_end":54426,"line_start":413,"line_end":413,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":723},{"krate":0,"index":724}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":54682,"byte_end":54687,"line_start":422,"line_end":422,"column_start":60,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":728}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":54889,"byte_end":54894,"line_start":430,"line_end":430,"column_start":55,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":733},{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":55150,"byte_end":55155,"line_start":439,"line_end":439,"column_start":60,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":738}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":55314,"byte_end":55319,"line_start":447,"line_end":447,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":749}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":56603,"byte_end":56608,"line_start":502,"line_end":502,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59474,"byte_end":59479,"line_start":580,"line_end":580,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59660,"byte_end":59665,"line_start":588,"line_end":588,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":60344,"byte_end":60349,"line_start":607,"line_end":607,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":775},{"krate":0,"index":776}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":61017,"byte_end":61022,"line_start":632,"line_end":632,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":780}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":61177,"byte_end":61182,"line_start":641,"line_end":641,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":71439,"byte_end":71456,"line_start":34,"line_end":34,"column_start":27,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":71495,"byte_end":71512,"line_start":36,"line_end":36,"column_start":29,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":72548,"byte_end":72565,"line_start":81,"line_end":81,"column_start":19,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":72613,"byte_end":72630,"line_start":83,"line_end":83,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":72822,"byte_end":72839,"line_start":92,"line_end":92,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":73038,"byte_end":73055,"line_start":104,"line_end":104,"column_start":12,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":73381,"byte_end":73398,"line_start":118,"line_end":118,"column_start":59,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":863},{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":74203,"byte_end":74220,"line_start":148,"line_end":148,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":74398,"byte_end":74415,"line_start":155,"line_end":155,"column_start":43,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":74592,"byte_end":74609,"line_start":162,"line_end":162,"column_start":48,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":74783,"byte_end":74800,"line_start":169,"line_end":169,"column_start":41,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":74966,"byte_end":74983,"line_start":176,"line_end":176,"column_start":39,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77723,"byte_end":77729,"line_start":44,"line_end":44,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77847,"byte_end":77853,"line_start":50,"line_end":50,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":78421,"byte_end":78427,"line_start":78,"line_end":78,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":976}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":78595,"byte_end":78601,"line_start":86,"line_end":86,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":983}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":79670,"byte_end":79676,"line_start":124,"line_end":124,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":987},{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":80023,"byte_end":80029,"line_start":138,"line_end":138,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":992},{"krate":0,"index":994}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":80481,"byte_end":80487,"line_start":151,"line_end":151,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":999}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":80618,"byte_end":80624,"line_start":157,"line_end":157,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1003}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":80749,"byte_end":80755,"line_start":164,"line_end":164,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":80883,"byte_end":80889,"line_start":171,"line_end":171,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1012},{"krate":0,"index":1013}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":81092,"byte_end":81098,"line_start":180,"line_end":180,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1017},{"krate":0,"index":1018}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":81317,"byte_end":81323,"line_start":189,"line_end":189,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1022}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":81531,"byte_end":81537,"line_start":196,"line_end":196,"column_start":74,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":1028}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":81711,"byte_end":81717,"line_start":203,"line_end":203,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1033}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":81849,"byte_end":81855,"line_start":210,"line_end":210,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1037},{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":82064,"byte_end":82070,"line_start":219,"line_end":219,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1042}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":82248,"byte_end":82254,"line_start":226,"line_end":226,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1046},{"krate":0,"index":1047}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":82551,"byte_end":82557,"line_start":237,"line_end":237,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1052},{"krate":0,"index":1053}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":82779,"byte_end":82785,"line_start":247,"line_end":247,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1057},{"krate":0,"index":1058}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":83014,"byte_end":83020,"line_start":257,"line_end":257,"column_start":56,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":83169,"byte_end":83175,"line_start":265,"line_end":265,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1066},{"krate":0,"index":1067}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":83404,"byte_end":83410,"line_start":275,"line_end":275,"column_start":56,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1071}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":83588,"byte_end":83594,"line_start":283,"line_end":283,"column_start":52,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1076},{"krate":0,"index":1077}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":83846,"byte_end":83852,"line_start":293,"line_end":293,"column_start":52,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1082},{"krate":0,"index":1083}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":84064,"byte_end":84070,"line_start":303,"line_end":303,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1087},{"krate":0,"index":1088}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":84243,"byte_end":84249,"line_start":312,"line_end":312,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1092}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":84374,"byte_end":84380,"line_start":318,"line_end":318,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1096}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":84519,"byte_end":84525,"line_start":324,"line_end":324,"column_start":23,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":84560,"byte_end":84566,"line_start":326,"line_end":326,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1103}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":84685,"byte_end":84691,"line_start":332,"line_end":332,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1107}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":84821,"byte_end":84827,"line_start":339,"line_end":339,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1111},{"krate":0,"index":1112}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":93525,"byte_end":93526,"line_start":32,"line_end":32,"column_start":36,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1121}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":93666,"byte_end":93667,"line_start":42,"line_end":42,"column_start":34,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1126}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":96881,"byte_end":96888,"line_start":38,"line_end":38,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":96927,"byte_end":96934,"line_start":40,"line_end":40,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1239}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":98190,"byte_end":98197,"line_start":96,"line_end":96,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":98245,"byte_end":98252,"line_start":98,"line_end":98,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1246}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":98402,"byte_end":98409,"line_start":107,"line_end":107,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1250}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":98623,"byte_end":98630,"line_start":119,"line_end":119,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1255}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":98804,"byte_end":98811,"line_start":125,"line_end":125,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1259}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":98928,"byte_end":98935,"line_start":131,"line_end":131,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1268}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100084,"byte_end":100091,"line_start":186,"line_end":186,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1272},{"krate":0,"index":1273},{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1276},{"krate":0,"index":1278},{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1284},{"krate":0,"index":1285}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":105153,"byte_end":105160,"line_start":386,"line_end":386,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1289},{"krate":0,"index":1290},{"krate":0,"index":1291}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":105761,"byte_end":105768,"line_start":410,"line_end":410,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1295},{"krate":0,"index":1297},{"krate":0,"index":1299},{"krate":0,"index":1300},{"krate":0,"index":1301},{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1304}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108582,"byte_end":108589,"line_start":488,"line_end":488,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1308}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108793,"byte_end":108800,"line_start":496,"line_end":496,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1312}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108989,"byte_end":108996,"line_start":503,"line_end":503,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1316}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":109133,"byte_end":109140,"line_start":510,"line_end":510,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1320},{"krate":0,"index":1321}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":109320,"byte_end":109327,"line_start":519,"line_end":519,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1325},{"krate":0,"index":1326}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":109567,"byte_end":109574,"line_start":528,"line_end":528,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1330}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":109761,"byte_end":109768,"line_start":536,"line_end":536,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1334},{"krate":0,"index":1335}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":110019,"byte_end":110026,"line_start":545,"line_end":545,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1339}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":110166,"byte_end":110173,"line_start":552,"line_end":552,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1343},{"krate":0,"index":1344}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":110383,"byte_end":110390,"line_start":561,"line_end":561,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1348},{"krate":0,"index":1349}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":110630,"byte_end":110637,"line_start":570,"line_end":570,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1353}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":110824,"byte_end":110831,"line_start":578,"line_end":578,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1357},{"krate":0,"index":1358}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":111082,"byte_end":111089,"line_start":587,"line_end":587,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1362}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":111239,"byte_end":111246,"line_start":594,"line_end":594,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1366},{"krate":0,"index":1367}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":111467,"byte_end":111474,"line_start":603,"line_end":603,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1371}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":111631,"byte_end":111638,"line_start":610,"line_end":610,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1376},{"krate":0,"index":1377}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":111884,"byte_end":111891,"line_start":619,"line_end":619,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1381}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":112065,"byte_end":112072,"line_start":627,"line_end":627,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1385},{"krate":0,"index":1386}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":112293,"byte_end":112300,"line_start":636,"line_end":636,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1390}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":112457,"byte_end":112464,"line_start":643,"line_end":643,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1395},{"krate":0,"index":1396}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":112710,"byte_end":112717,"line_start":652,"line_end":652,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1400}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":112883,"byte_end":112890,"line_start":660,"line_end":660,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1404}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":112997,"byte_end":113004,"line_start":667,"line_end":667,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1408}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":113158,"byte_end":113165,"line_start":675,"line_end":675,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1412}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":113317,"byte_end":113324,"line_start":683,"line_end":683,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1416}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":113504,"byte_end":113511,"line_start":691,"line_end":691,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1420},{"krate":0,"index":1421}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":113836,"byte_end":113843,"line_start":703,"line_end":703,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1426}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":113944,"byte_end":113951,"line_start":709,"line_end":709,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1432}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":114056,"byte_end":114063,"line_start":715,"line_end":715,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1437}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":114164,"byte_end":114171,"line_start":721,"line_end":721,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1441}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":114492,"byte_end":114499,"line_start":739,"line_end":739,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":114538,"byte_end":114545,"line_start":741,"line_end":741,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1455}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":115483,"byte_end":115490,"line_start":784,"line_end":784,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":115538,"byte_end":115545,"line_start":786,"line_end":786,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1462}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":115716,"byte_end":115723,"line_start":795,"line_end":795,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1466}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":115925,"byte_end":115932,"line_start":806,"line_end":806,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1471}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":116173,"byte_end":116180,"line_start":816,"line_end":816,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1475}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":116317,"byte_end":116324,"line_start":822,"line_end":822,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1481},{"krate":0,"index":1482},{"krate":0,"index":1483},{"krate":0,"index":1484}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":117561,"byte_end":117568,"line_start":879,"line_end":879,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1490},{"krate":0,"index":1491},{"krate":0,"index":1492},{"krate":0,"index":1494},{"krate":0,"index":1496},{"krate":0,"index":1497},{"krate":0,"index":1498},{"krate":0,"index":1499},{"krate":0,"index":1501},{"krate":0,"index":1502},{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":1505}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":123159,"byte_end":123166,"line_start":1094,"line_end":1094,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1511}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":123905,"byte_end":123912,"line_start":1126,"line_end":1126,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1515},{"krate":0,"index":1517},{"krate":0,"index":1519},{"krate":0,"index":1520},{"krate":0,"index":1521},{"krate":0,"index":1522},{"krate":0,"index":1523},{"krate":0,"index":1524}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126812,"byte_end":126819,"line_start":1208,"line_end":1208,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1528}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":127045,"byte_end":127052,"line_start":1216,"line_end":1216,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1532}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":127309,"byte_end":127316,"line_start":1227,"line_end":1227,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1536}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":127453,"byte_end":127460,"line_start":1234,"line_end":1234,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1540},{"krate":0,"index":1541}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":127649,"byte_end":127656,"line_start":1243,"line_end":1243,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1545},{"krate":0,"index":1546}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":127965,"byte_end":127972,"line_start":1256,"line_end":1256,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1550}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":128190,"byte_end":128197,"line_start":1265,"line_end":1265,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1554},{"krate":0,"index":1555}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":128466,"byte_end":128473,"line_start":1274,"line_end":1274,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1559}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":128613,"byte_end":128620,"line_start":1281,"line_end":1281,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1563},{"krate":0,"index":1564}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":128848,"byte_end":128855,"line_start":1290,"line_end":1290,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1568},{"krate":0,"index":1569}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":129164,"byte_end":129171,"line_start":1303,"line_end":1303,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1573}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":129389,"byte_end":129396,"line_start":1312,"line_end":1312,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1577},{"krate":0,"index":1578}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":129665,"byte_end":129672,"line_start":1321,"line_end":1321,"column_start":69,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":1582}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":129822,"byte_end":129829,"line_start":1328,"line_end":1328,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1586},{"krate":0,"index":1587}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":130104,"byte_end":130111,"line_start":1341,"line_end":1341,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1591}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":130313,"byte_end":130320,"line_start":1350,"line_end":1350,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1596},{"krate":0,"index":1597}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":130631,"byte_end":130638,"line_start":1363,"line_end":1363,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1601}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":130784,"byte_end":130791,"line_start":1370,"line_end":1370,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1605},{"krate":0,"index":1606}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":131066,"byte_end":131073,"line_start":1383,"line_end":1383,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1610}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":131275,"byte_end":131282,"line_start":1392,"line_end":1392,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1615},{"krate":0,"index":1616}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":131593,"byte_end":131600,"line_start":1405,"line_end":1405,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1620}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":131738,"byte_end":131745,"line_start":1412,"line_end":1412,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1624}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":131852,"byte_end":131859,"line_start":1419,"line_end":1419,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1628}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":132013,"byte_end":132020,"line_start":1427,"line_end":1427,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1632}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":132172,"byte_end":132179,"line_start":1435,"line_end":1435,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1636}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":132359,"byte_end":132366,"line_start":1443,"line_end":1443,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1640},{"krate":0,"index":1641}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":132825,"byte_end":132832,"line_start":1461,"line_end":1461,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1646}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":132941,"byte_end":132948,"line_start":1467,"line_end":1467,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1652}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":133062,"byte_end":133069,"line_start":1473,"line_end":1473,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1657}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":133184,"byte_end":133191,"line_start":1479,"line_end":1479,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1661}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":148893,"byte_end":148897,"line_start":72,"line_end":72,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1744}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":149040,"byte_end":149044,"line_start":79,"line_end":79,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":149083,"byte_end":149087,"line_start":81,"line_end":81,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1752}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":149229,"byte_end":149233,"line_start":87,"line_end":87,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1756}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":149381,"byte_end":149385,"line_start":93,"line_end":93,"column_start":23,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":149434,"byte_end":149438,"line_start":95,"line_end":95,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1763}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":149711,"byte_end":149715,"line_start":105,"line_end":105,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1767}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":149829,"byte_end":149833,"line_start":111,"line_end":111,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1771}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150001,"byte_end":150005,"line_start":119,"line_end":119,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1775},{"krate":0,"index":1776}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150406,"byte_end":150410,"line_start":139,"line_end":139,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1790},{"krate":0,"index":1791}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":151678,"byte_end":151682,"line_start":209,"line_end":209,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1795},{"krate":0,"index":1796}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":152201,"byte_end":152205,"line_start":227,"line_end":227,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1800}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":152561,"byte_end":152565,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1804}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":152985,"byte_end":152989,"line_start":260,"line_end":260,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1808}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":153559,"byte_end":153563,"line_start":277,"line_end":277,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1812}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":154410,"byte_end":154414,"line_start":300,"line_end":300,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1816}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":155032,"byte_end":155036,"line_start":319,"line_end":319,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1820}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":155849,"byte_end":155853,"line_start":341,"line_end":341,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1825}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":156221,"byte_end":156225,"line_start":355,"line_end":355,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1829}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":156448,"byte_end":156452,"line_start":365,"line_end":365,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1833}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":156683,"byte_end":156687,"line_start":375,"line_end":375,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1837}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":157025,"byte_end":157029,"line_start":388,"line_end":388,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1842}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":157153,"byte_end":157157,"line_start":395,"line_end":395,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1846}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":157292,"byte_end":157296,"line_start":402,"line_end":402,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1850}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":157496,"byte_end":157500,"line_start":413,"line_end":413,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1854},{"krate":0,"index":1855}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":157720,"byte_end":157724,"line_start":422,"line_end":422,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1859}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":157867,"byte_end":157871,"line_start":429,"line_end":429,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1863},{"krate":0,"index":1864}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":158099,"byte_end":158103,"line_start":438,"line_end":438,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1868}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":158266,"byte_end":158270,"line_start":445,"line_end":445,"column_start":55,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1873},{"krate":0,"index":1874}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":158528,"byte_end":158532,"line_start":454,"line_end":454,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1878}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":158738,"byte_end":158742,"line_start":462,"line_end":462,"column_start":55,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1883},{"krate":0,"index":1884}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":159000,"byte_end":159004,"line_start":471,"line_end":471,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1888}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":159173,"byte_end":159177,"line_start":479,"line_end":479,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1892},{"krate":0,"index":1893},{"krate":0,"index":1894}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":159818,"byte_end":159822,"line_start":502,"line_end":502,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1899},{"krate":0,"index":1901},{"krate":0,"index":1903},{"krate":0,"index":1904},{"krate":0,"index":1905},{"krate":0,"index":1906},{"krate":0,"index":1907},{"krate":0,"index":1908},{"krate":0,"index":1909}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163109,"byte_end":163113,"line_start":590,"line_end":590,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1913}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163362,"byte_end":163366,"line_start":598,"line_end":598,"column_start":76,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1919}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":165428,"byte_end":165432,"line_start":649,"line_end":649,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1923}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":175955,"byte_end":175971,"line_start":28,"line_end":28,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1954}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":176284,"byte_end":176300,"line_start":39,"line_end":39,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1959}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":176582,"byte_end":176598,"line_start":48,"line_end":48,"column_start":40,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1966},{"krate":0,"index":1967},{"krate":0,"index":1968},{"krate":0,"index":1969},{"krate":0,"index":1970},{"krate":0,"index":1971},{"krate":0,"index":1973},{"krate":0,"index":1974},{"krate":0,"index":1975},{"krate":0,"index":1976}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":180984,"byte_end":181000,"line_start":187,"line_end":187,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1981}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":181176,"byte_end":181192,"line_start":194,"line_end":194,"column_start":67,"column_end":83},"value":"","parent":null,"children":[{"krate":0,"index":1986}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":185081,"byte_end":185091,"line_start":40,"line_end":40,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":185144,"byte_end":185154,"line_start":42,"line_end":42,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2085}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":185336,"byte_end":185346,"line_start":51,"line_end":51,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":185408,"byte_end":185418,"line_start":53,"line_end":53,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2094}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":185569,"byte_end":185579,"line_start":62,"line_end":62,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2099}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":185724,"byte_end":185734,"line_start":71,"line_end":71,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2105},{"krate":0,"index":2106},{"krate":0,"index":2107}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186285,"byte_end":186295,"line_start":96,"line_end":96,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2112},{"krate":0,"index":2115},{"krate":0,"index":2116}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187940,"byte_end":187950,"line_start":159,"line_end":159,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2121}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":188155,"byte_end":188165,"line_start":169,"line_end":169,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2126},{"krate":0,"index":2127},{"krate":0,"index":2128},{"krate":0,"index":2130},{"krate":0,"index":2131}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":189564,"byte_end":189574,"line_start":209,"line_end":209,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2136}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":190994,"byte_end":191004,"line_start":251,"line_end":251,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":191057,"byte_end":191067,"line_start":253,"line_end":253,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2154}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":191334,"byte_end":191344,"line_start":265,"line_end":265,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":191406,"byte_end":191416,"line_start":267,"line_end":267,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2163}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":191622,"byte_end":191632,"line_start":276,"line_end":276,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2168}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":191845,"byte_end":191855,"line_start":288,"line_end":288,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2174},{"krate":0,"index":2175}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":192726,"byte_end":192736,"line_start":319,"line_end":319,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2180},{"krate":0,"index":2181},{"krate":0,"index":2184},{"krate":0,"index":2185}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":195283,"byte_end":195293,"line_start":403,"line_end":403,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2190},{"krate":0,"index":2191},{"krate":0,"index":2192},{"krate":0,"index":2193},{"krate":0,"index":2194},{"krate":0,"index":2195},{"krate":0,"index":2196},{"krate":0,"index":2197},{"krate":0,"index":2198},{"krate":0,"index":2199},{"krate":0,"index":2200},{"krate":0,"index":2201},{"krate":0,"index":2202},{"krate":0,"index":2203},{"krate":0,"index":2204},{"krate":0,"index":2205},{"krate":0,"index":2206},{"krate":0,"index":2207},{"krate":0,"index":2208},{"krate":0,"index":2210},{"krate":0,"index":2211},{"krate":0,"index":2212}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":204931,"byte_end":204941,"line_start":706,"line_end":706,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2217}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":205196,"byte_end":205206,"line_start":716,"line_end":716,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2222},{"krate":0,"index":2223}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215806,"byte_end":215811,"line_start":53,"line_end":53,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2293},{"krate":0,"index":2294},{"krate":0,"index":2295},{"krate":0,"index":2296},{"krate":0,"index":2297},{"krate":0,"index":2298},{"krate":0,"index":2299},{"krate":0,"index":2300},{"krate":0,"index":2301},{"krate":0,"index":2302},{"krate":0,"index":2303},{"krate":0,"index":2304}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220473,"byte_end":220478,"line_start":241,"line_end":241,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2309},{"krate":0,"index":2311}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":222364,"byte_end":222369,"line_start":300,"line_end":300,"column_start":47,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2318},{"krate":0,"index":2319}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":222592,"byte_end":222597,"line_start":310,"line_end":310,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2324},{"krate":0,"index":2325}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":222832,"byte_end":222837,"line_start":320,"line_end":320,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2330},{"krate":0,"index":2331}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":223195,"byte_end":223200,"line_start":332,"line_end":332,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2336}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":223335,"byte_end":223340,"line_start":338,"line_end":338,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":223403,"byte_end":223408,"line_start":340,"line_end":340,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2345}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":223563,"byte_end":223568,"line_start":346,"line_end":346,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2350}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":223703,"byte_end":223708,"line_start":352,"line_end":352,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2355}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":223845,"byte_end":223850,"line_start":358,"line_end":358,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":223913,"byte_end":223918,"line_start":360,"line_end":360,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2364}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":224063,"byte_end":224068,"line_start":366,"line_end":366,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2369}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":224185,"byte_end":224190,"line_start":372,"line_end":372,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2374}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":224320,"byte_end":224325,"line_start":378,"line_end":378,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2380}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":227320,"byte_end":227333,"line_start":60,"line_end":60,"column_start":27,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":227372,"byte_end":227385,"line_start":62,"line_end":62,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2443}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":227669,"byte_end":227682,"line_start":74,"line_end":74,"column_start":19,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":227730,"byte_end":227743,"line_start":76,"line_end":76,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2450}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":227999,"byte_end":228012,"line_start":88,"line_end":88,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2454}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":228252,"byte_end":228265,"line_start":100,"line_end":100,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":2459}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":228509,"byte_end":228522,"line_start":110,"line_end":110,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2463}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":228798,"byte_end":228811,"line_start":122,"line_end":122,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2467},{"krate":0,"index":2468},{"krate":0,"index":2469},{"krate":0,"index":2470},{"krate":0,"index":2471},{"krate":0,"index":2472},{"krate":0,"index":2473},{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2476}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":231889,"byte_end":231902,"line_start":229,"line_end":229,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2480},{"krate":0,"index":2481}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":232237,"byte_end":232250,"line_start":244,"line_end":244,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2485},{"krate":0,"index":2486}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":232585,"byte_end":232598,"line_start":258,"line_end":258,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2490}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":232839,"byte_end":232852,"line_start":268,"line_end":268,"column_start":55,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":2495},{"krate":0,"index":2496}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":233225,"byte_end":233238,"line_start":282,"line_end":282,"column_start":60,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":2500}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":233384,"byte_end":233397,"line_start":289,"line_end":289,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":2504},{"krate":0,"index":2505}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":233732,"byte_end":233745,"line_start":303,"line_end":303,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2509}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":233986,"byte_end":233999,"line_start":313,"line_end":313,"column_start":55,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":2514},{"krate":0,"index":2515}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":234372,"byte_end":234385,"line_start":327,"line_end":327,"column_start":60,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":2519}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":238834,"byte_end":238840,"line_start":41,"line_end":41,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":238879,"byte_end":238885,"line_start":43,"line_end":43,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2627}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":240317,"byte_end":240323,"line_start":102,"line_end":102,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":240371,"byte_end":240377,"line_start":104,"line_end":104,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2634}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":240545,"byte_end":240551,"line_start":113,"line_end":113,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2638}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":240738,"byte_end":240744,"line_start":123,"line_end":123,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2643}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":240961,"byte_end":240967,"line_start":131,"line_end":131,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2647}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":241083,"byte_end":241089,"line_start":137,"line_end":137,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2651},{"krate":0,"index":2652},{"krate":0,"index":2653},{"krate":0,"index":2654},{"krate":0,"index":2655}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242220,"byte_end":242226,"line_start":184,"line_end":184,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2659},{"krate":0,"index":2661},{"krate":0,"index":2662},{"krate":0,"index":2663},{"krate":0,"index":2664},{"krate":0,"index":2666},{"krate":0,"index":2667},{"krate":0,"index":2668},{"krate":0,"index":2669},{"krate":0,"index":2670}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":245593,"byte_end":245599,"line_start":307,"line_end":307,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2674},{"krate":0,"index":2676},{"krate":0,"index":2678},{"krate":0,"index":2679},{"krate":0,"index":2680},{"krate":0,"index":2681},{"krate":0,"index":2682},{"krate":0,"index":2683},{"krate":0,"index":2684}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248766,"byte_end":248772,"line_start":395,"line_end":395,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2688}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248966,"byte_end":248972,"line_start":403,"line_end":403,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2692},{"krate":0,"index":2693}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":249565,"byte_end":249571,"line_start":419,"line_end":419,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2697},{"krate":0,"index":2698},{"krate":0,"index":2699},{"krate":0,"index":2700},{"krate":0,"index":2701},{"krate":0,"index":2702},{"krate":0,"index":2703}],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":251467,"byte_end":251473,"line_start":478,"line_end":478,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2707},{"krate":0,"index":2708}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":252032,"byte_end":252038,"line_start":496,"line_end":496,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2712}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":252194,"byte_end":252200,"line_start":504,"line_end":504,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2716}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":252354,"byte_end":252360,"line_start":512,"line_end":512,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2720}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":252516,"byte_end":252522,"line_start":520,"line_end":520,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2724}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":252650,"byte_end":252656,"line_start":527,"line_end":527,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2728},{"krate":0,"index":2729}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":252835,"byte_end":252841,"line_start":536,"line_end":536,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2733},{"krate":0,"index":2734}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":253089,"byte_end":253095,"line_start":545,"line_end":545,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2738},{"krate":0,"index":2739}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":253295,"byte_end":253301,"line_start":552,"line_end":552,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2743}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":253488,"byte_end":253494,"line_start":558,"line_end":558,"column_start":74,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":2749}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":253648,"byte_end":253654,"line_start":564,"line_end":564,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2754}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":253826,"byte_end":253832,"line_start":572,"line_end":572,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2758},{"krate":0,"index":2759}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":254063,"byte_end":254069,"line_start":581,"line_end":581,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2763}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":254251,"byte_end":254257,"line_start":589,"line_end":589,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2767},{"krate":0,"index":2768}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":254482,"byte_end":254488,"line_start":598,"line_end":598,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2772}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":254674,"byte_end":254680,"line_start":606,"line_end":606,"column_start":55,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2777},{"krate":0,"index":2778}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":254939,"byte_end":254945,"line_start":615,"line_end":615,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2782}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":255091,"byte_end":255097,"line_start":622,"line_end":622,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2786},{"krate":0,"index":2787}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":255322,"byte_end":255328,"line_start":631,"line_end":631,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2791}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":255514,"byte_end":255520,"line_start":639,"line_end":639,"column_start":55,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2796},{"krate":0,"index":2797}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":255779,"byte_end":255785,"line_start":648,"line_end":648,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2801}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":256543,"byte_end":256549,"line_start":683,"line_end":683,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2808}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":256674,"byte_end":256680,"line_start":690,"line_end":690,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2813}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":256804,"byte_end":256810,"line_start":697,"line_end":697,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2819}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":256928,"byte_end":256934,"line_start":704,"line_end":704,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2824}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":257058,"byte_end":257064,"line_start":711,"line_end":711,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2828}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":263754,"byte_end":263760,"line_start":947,"line_end":947,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":263799,"byte_end":263805,"line_start":949,"line_end":949,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2842}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":264804,"byte_end":264810,"line_start":992,"line_end":992,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":264858,"byte_end":264864,"line_start":994,"line_end":994,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2849}],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":265061,"byte_end":265067,"line_start":1003,"line_end":1003,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2853}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":265282,"byte_end":265288,"line_start":1014,"line_end":1014,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2858}],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":265572,"byte_end":265578,"line_start":1024,"line_end":1024,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2862}],"docs":"","sig":null,"attributes":[]},{"id":385,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":265714,"byte_end":265720,"line_start":1030,"line_end":1030,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2866},{"krate":0,"index":2867},{"krate":0,"index":2868},{"krate":0,"index":2869},{"krate":0,"index":2870}],"docs":"","sig":null,"attributes":[]},{"id":386,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":266949,"byte_end":266955,"line_start":1078,"line_end":1078,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2874},{"krate":0,"index":2876},{"krate":0,"index":2877},{"krate":0,"index":2878},{"krate":0,"index":2879},{"krate":0,"index":2881},{"krate":0,"index":2882},{"krate":0,"index":2883},{"krate":0,"index":2884},{"krate":0,"index":2885}],"docs":"","sig":null,"attributes":[]},{"id":387,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":270543,"byte_end":270549,"line_start":1201,"line_end":1201,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2889},{"krate":0,"index":2891},{"krate":0,"index":2893},{"krate":0,"index":2894},{"krate":0,"index":2895},{"krate":0,"index":2896},{"krate":0,"index":2897},{"krate":0,"index":2898}],"docs":"","sig":null,"attributes":[]},{"id":388,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273448,"byte_end":273454,"line_start":1283,"line_end":1283,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2902}],"docs":"","sig":null,"attributes":[]},{"id":389,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273674,"byte_end":273680,"line_start":1291,"line_end":1291,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2906},{"krate":0,"index":2907}],"docs":"","sig":null,"attributes":[]},{"id":390,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":274318,"byte_end":274324,"line_start":1307,"line_end":1307,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2911},{"krate":0,"index":2912},{"krate":0,"index":2913},{"krate":0,"index":2914},{"krate":0,"index":2915},{"krate":0,"index":2916},{"krate":0,"index":2917}],"docs":"","sig":null,"attributes":[]},{"id":391,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":276400,"byte_end":276406,"line_start":1375,"line_end":1375,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2921},{"krate":0,"index":2922}],"docs":"","sig":null,"attributes":[]},{"id":392,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":277049,"byte_end":277055,"line_start":1395,"line_end":1395,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2926}],"docs":"","sig":null,"attributes":[]},{"id":393,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":277211,"byte_end":277217,"line_start":1403,"line_end":1403,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2930}],"docs":"","sig":null,"attributes":[]},{"id":394,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":277371,"byte_end":277377,"line_start":1411,"line_end":1411,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2934}],"docs":"","sig":null,"attributes":[]},{"id":395,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":277533,"byte_end":277539,"line_start":1419,"line_end":1419,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2938}],"docs":"","sig":null,"attributes":[]},{"id":396,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":277681,"byte_end":277687,"line_start":1426,"line_end":1426,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2942},{"krate":0,"index":2943}],"docs":"","sig":null,"attributes":[]},{"id":397,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":277879,"byte_end":277885,"line_start":1435,"line_end":1435,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2947},{"krate":0,"index":2948}],"docs":"","sig":null,"attributes":[]},{"id":398,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":278206,"byte_end":278212,"line_start":1448,"line_end":1448,"column_start":54,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2952},{"krate":0,"index":2953}],"docs":"","sig":null,"attributes":[]},{"id":399,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":278485,"byte_end":278491,"line_start":1459,"line_end":1459,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2957}],"docs":"","sig":null,"attributes":[]},{"id":400,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":278678,"byte_end":278684,"line_start":1465,"line_end":1465,"column_start":74,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":2963}],"docs":"","sig":null,"attributes":[]},{"id":401,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":278838,"byte_end":278844,"line_start":1471,"line_end":1471,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2968}],"docs":"","sig":null,"attributes":[]},{"id":402,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":279051,"byte_end":279057,"line_start":1480,"line_end":1480,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2972},{"krate":0,"index":2973}],"docs":"","sig":null,"attributes":[]},{"id":403,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":279361,"byte_end":279367,"line_start":1493,"line_end":1493,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2977}],"docs":"","sig":null,"attributes":[]},{"id":404,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":279584,"byte_end":279590,"line_start":1502,"line_end":1502,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2981},{"krate":0,"index":2982}],"docs":"","sig":null,"attributes":[]},{"id":405,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":279882,"byte_end":279888,"line_start":1515,"line_end":1515,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2986}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":280103,"byte_end":280109,"line_start":1524,"line_end":1524,"column_start":55,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2991},{"krate":0,"index":2992}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":280437,"byte_end":280443,"line_start":1537,"line_end":1537,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2996}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":280589,"byte_end":280595,"line_start":1544,"line_end":1544,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3000},{"krate":0,"index":3001}],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":280887,"byte_end":280893,"line_start":1557,"line_end":1557,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3005}],"docs":"","sig":null,"attributes":[]},{"id":410,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":281108,"byte_end":281114,"line_start":1566,"line_end":1566,"column_start":55,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":3010},{"krate":0,"index":3011}],"docs":"","sig":null,"attributes":[]},{"id":411,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":281442,"byte_end":281448,"line_start":1579,"line_end":1579,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":3015}],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":282025,"byte_end":282031,"line_start":1605,"line_end":1605,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3019}],"docs":"","sig":null,"attributes":[]},{"id":413,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":282161,"byte_end":282167,"line_start":1612,"line_end":1612,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3024}],"docs":"","sig":null,"attributes":[]},{"id":414,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":282303,"byte_end":282309,"line_start":1619,"line_end":1619,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3030}],"docs":"","sig":null,"attributes":[]},{"id":415,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":282436,"byte_end":282442,"line_start":1626,"line_end":1626,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3035}],"docs":"","sig":null,"attributes":[]},{"id":416,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":282584,"byte_end":282590,"line_start":1633,"line_end":1633,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3039}],"docs":"","sig":null,"attributes":[]},{"id":417,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":292201,"byte_end":292212,"line_start":87,"line_end":87,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":418,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":292265,"byte_end":292276,"line_start":89,"line_end":89,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3139}],"docs":"","sig":null,"attributes":[]},{"id":419,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":292630,"byte_end":292641,"line_start":103,"line_end":103,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":420,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":292703,"byte_end":292714,"line_start":105,"line_end":105,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3148}],"docs":"","sig":null,"attributes":[]},{"id":421,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293045,"byte_end":293056,"line_start":118,"line_end":118,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3153}],"docs":"","sig":null,"attributes":[]},{"id":422,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293329,"byte_end":293340,"line_start":132,"line_end":132,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3159},{"krate":0,"index":3160},{"krate":0,"index":3161}],"docs":"","sig":null,"attributes":[]},{"id":423,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295005,"byte_end":295016,"line_start":182,"line_end":182,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3166},{"krate":0,"index":3168},{"krate":0,"index":3170},{"krate":0,"index":3173},{"krate":0,"index":3175},{"krate":0,"index":3178},{"krate":0,"index":3179},{"krate":0,"index":3180},{"krate":0,"index":3182},{"krate":0,"index":3184}],"docs":"","sig":null,"attributes":[]},{"id":424,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":298764,"byte_end":298775,"line_start":306,"line_end":306,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3189},{"krate":0,"index":3191}],"docs":"","sig":null,"attributes":[]},{"id":425,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":299694,"byte_end":299705,"line_start":332,"line_end":332,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3197},{"krate":0,"index":3198}],"docs":"","sig":null,"attributes":[]},{"id":426,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":300339,"byte_end":300350,"line_start":361,"line_end":361,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3203}],"docs":"","sig":null,"attributes":[]},{"id":427,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":301137,"byte_end":301148,"line_start":383,"line_end":383,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3209},{"krate":0,"index":3212},{"krate":0,"index":3213}],"docs":"","sig":null,"attributes":[]},{"id":428,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":302250,"byte_end":302261,"line_start":428,"line_end":428,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3218},{"krate":0,"index":3219},{"krate":0,"index":3220}],"docs":"","sig":null,"attributes":[]},{"id":429,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303229,"byte_end":303240,"line_start":461,"line_end":461,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3225},{"krate":0,"index":3227},{"krate":0,"index":3228}],"docs":"","sig":null,"attributes":[]},{"id":430,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":304332,"byte_end":304343,"line_start":509,"line_end":509,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3233},{"krate":0,"index":3234},{"krate":0,"index":3235},{"krate":0,"index":3236}],"docs":"","sig":null,"attributes":[]},{"id":431,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":306167,"byte_end":306178,"line_start":568,"line_end":568,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3241},{"krate":0,"index":3242},{"krate":0,"index":3243}],"docs":"","sig":null,"attributes":[]},{"id":432,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":307313,"byte_end":307324,"line_start":607,"line_end":607,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3248}],"docs":"","sig":null,"attributes":[]},{"id":433,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":307532,"byte_end":307543,"line_start":616,"line_end":616,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3253},{"krate":0,"index":3254}],"docs":"","sig":null,"attributes":[]},{"id":434,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":308129,"byte_end":308140,"line_start":629,"line_end":629,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3259}],"docs":"","sig":null,"attributes":[]},{"id":435,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":316965,"byte_end":316976,"line_start":108,"line_end":108,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":436,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":317029,"byte_end":317040,"line_start":110,"line_end":110,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3390}],"docs":"","sig":null,"attributes":[]},{"id":437,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":317744,"byte_end":317755,"line_start":134,"line_end":134,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":438,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":317817,"byte_end":317828,"line_start":136,"line_end":136,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3399}],"docs":"","sig":null,"attributes":[]},{"id":439,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":318529,"byte_end":318540,"line_start":159,"line_end":159,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3404}],"docs":"","sig":null,"attributes":[]},{"id":440,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319073,"byte_end":319084,"line_start":183,"line_end":183,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3410},{"krate":0,"index":3411},{"krate":0,"index":3414}],"docs":"","sig":null,"attributes":[]},{"id":441,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":321492,"byte_end":321503,"line_start":264,"line_end":264,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3419},{"krate":0,"index":3421},{"krate":0,"index":3423},{"krate":0,"index":3426},{"krate":0,"index":3429},{"krate":0,"index":3431},{"krate":0,"index":3434},{"krate":0,"index":3435},{"krate":0,"index":3436},{"krate":0,"index":3438},{"krate":0,"index":3440}],"docs":"","sig":null,"attributes":[]},{"id":442,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":326948,"byte_end":326959,"line_start":416,"line_end":416,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3445},{"krate":0,"index":3446},{"krate":0,"index":3447},{"krate":0,"index":3450}],"docs":"","sig":null,"attributes":[]},{"id":443,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":328798,"byte_end":328809,"line_start":491,"line_end":491,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3457}],"docs":"","sig":null,"attributes":[]},{"id":444,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":331077,"byte_end":331088,"line_start":526,"line_end":526,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3463},{"krate":0,"index":3466},{"krate":0,"index":3467}],"docs":"","sig":null,"attributes":[]},{"id":445,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":332258,"byte_end":332269,"line_start":571,"line_end":571,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3472},{"krate":0,"index":3473},{"krate":0,"index":3474}],"docs":"","sig":null,"attributes":[]},{"id":446,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":333945,"byte_end":333956,"line_start":627,"line_end":627,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3479},{"krate":0,"index":3482},{"krate":0,"index":3483}],"docs":"","sig":null,"attributes":[]},{"id":447,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":335305,"byte_end":335316,"line_start":677,"line_end":677,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3488},{"krate":0,"index":3489},{"krate":0,"index":3490},{"krate":0,"index":3491},{"krate":0,"index":3492},{"krate":0,"index":3493},{"krate":0,"index":3494},{"krate":0,"index":3495},{"krate":0,"index":3496}],"docs":"","sig":null,"attributes":[]},{"id":448,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":341004,"byte_end":341015,"line_start":817,"line_end":817,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3501},{"krate":0,"index":3502},{"krate":0,"index":3503},{"krate":0,"index":3504},{"krate":0,"index":3505},{"krate":0,"index":3506},{"krate":0,"index":3507}],"docs":"","sig":null,"attributes":[]},{"id":449,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":348565,"byte_end":348576,"line_start":988,"line_end":988,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3512}],"docs":"","sig":null,"attributes":[]},{"id":450,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":350122,"byte_end":350133,"line_start":1029,"line_end":1029,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3517},{"krate":0,"index":3519}],"docs":"","sig":null,"attributes":[]},{"id":451,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":351632,"byte_end":351643,"line_start":1060,"line_end":1060,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3525},{"krate":0,"index":3526}],"docs":"","sig":null,"attributes":[]},{"id":452,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":352611,"byte_end":352622,"line_start":1085,"line_end":1085,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3531},{"krate":0,"index":3532}],"docs":"","sig":null,"attributes":[]},{"id":453,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":353556,"byte_end":353567,"line_start":1101,"line_end":1101,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3537}],"docs":"","sig":null,"attributes":[]},{"id":454,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":353761,"byte_end":353772,"line_start":1110,"line_end":1110,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3542}],"docs":"","sig":null,"attributes":[]},{"id":455,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":367132,"byte_end":367145,"line_start":74,"line_end":74,"column_start":34,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":456,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":367198,"byte_end":367211,"line_start":76,"line_end":76,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3639}],"docs":"","sig":null,"attributes":[]},{"id":457,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":367419,"byte_end":367432,"line_start":86,"line_end":86,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":458,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":367494,"byte_end":367507,"line_start":88,"line_end":88,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3648}],"docs":"","sig":null,"attributes":[]},{"id":459,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":367671,"byte_end":367684,"line_start":97,"line_end":97,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3653}],"docs":"","sig":null,"attributes":[]},{"id":460,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":367849,"byte_end":367862,"line_start":107,"line_end":107,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3659},{"krate":0,"index":3660},{"krate":0,"index":3661},{"krate":0,"index":3662},{"krate":0,"index":3663}],"docs":"","sig":null,"attributes":[]},{"id":461,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369218,"byte_end":369231,"line_start":164,"line_end":164,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3668},{"krate":0,"index":3669},{"krate":0,"index":3671},{"krate":0,"index":3672},{"krate":0,"index":3673},{"krate":0,"index":3674},{"krate":0,"index":3675},{"krate":0,"index":3676},{"krate":0,"index":3677},{"krate":0,"index":3678}],"docs":"","sig":null,"attributes":[]},{"id":462,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":371456,"byte_end":371469,"line_start":255,"line_end":255,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":3684},{"krate":0,"index":3685}],"docs":"","sig":null,"attributes":[]},{"id":463,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":371757,"byte_end":371770,"line_start":263,"line_end":263,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":3690}],"docs":"","sig":null,"attributes":[]},{"id":464,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":371983,"byte_end":371996,"line_start":270,"line_end":270,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":3696},{"krate":0,"index":3697}],"docs":"","sig":null,"attributes":[]},{"id":465,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":372284,"byte_end":372297,"line_start":278,"line_end":278,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":3702}],"docs":"","sig":null,"attributes":[]},{"id":466,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":372487,"byte_end":372500,"line_start":285,"line_end":285,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3707}],"docs":"","sig":null,"attributes":[]},{"id":467,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":372650,"byte_end":372663,"line_start":291,"line_end":291,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3712}],"docs":"","sig":null,"attributes":[]},{"id":468,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":372810,"byte_end":372823,"line_start":297,"line_end":297,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":3717}],"docs":"","sig":null,"attributes":[]},{"id":469,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":373000,"byte_end":373013,"line_start":306,"line_end":306,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3722}],"docs":"","sig":null,"attributes":[]},{"id":470,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":373154,"byte_end":373167,"line_start":315,"line_end":315,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3727}],"docs":"","sig":null,"attributes":[]},{"id":471,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":373707,"byte_end":373720,"line_start":334,"line_end":334,"column_start":34,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":472,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":373773,"byte_end":373786,"line_start":336,"line_end":336,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3744}],"docs":"","sig":null,"attributes":[]},{"id":473,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":374790,"byte_end":374803,"line_start":379,"line_end":379,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":474,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":374865,"byte_end":374878,"line_start":381,"line_end":381,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3753}],"docs":"","sig":null,"attributes":[]},{"id":475,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":375063,"byte_end":375076,"line_start":390,"line_end":390,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3758}],"docs":"","sig":null,"attributes":[]},{"id":476,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":375265,"byte_end":375278,"line_start":401,"line_end":401,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3764},{"krate":0,"index":3765},{"krate":0,"index":3766},{"krate":0,"index":3767},{"krate":0,"index":3768}],"docs":"","sig":null,"attributes":[]},{"id":477,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":376799,"byte_end":376812,"line_start":461,"line_end":461,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3773},{"krate":0,"index":3774},{"krate":0,"index":3776},{"krate":0,"index":3777},{"krate":0,"index":3778},{"krate":0,"index":3779},{"krate":0,"index":3780},{"krate":0,"index":3781},{"krate":0,"index":3782},{"krate":0,"index":3783},{"krate":0,"index":3784},{"krate":0,"index":3785}],"docs":"","sig":null,"attributes":[]},{"id":478,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":379668,"byte_end":379681,"line_start":575,"line_end":575,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":3791},{"krate":0,"index":3792}],"docs":"","sig":null,"attributes":[]},{"id":479,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":379987,"byte_end":380000,"line_start":583,"line_end":583,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":3797}],"docs":"","sig":null,"attributes":[]},{"id":480,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":380240,"byte_end":380253,"line_start":591,"line_end":591,"column_start":69,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":3803},{"krate":0,"index":3804}],"docs":"","sig":null,"attributes":[]},{"id":481,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":380559,"byte_end":380572,"line_start":599,"line_end":599,"column_start":72,"column_end":85},"value":"","parent":null,"children":[{"krate":0,"index":3809}],"docs":"","sig":null,"attributes":[]},{"id":482,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":380789,"byte_end":380802,"line_start":607,"line_end":607,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3814}],"docs":"","sig":null,"attributes":[]},{"id":483,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":380957,"byte_end":380970,"line_start":613,"line_end":613,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3819}],"docs":"","sig":null,"attributes":[]},{"id":484,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":381125,"byte_end":381138,"line_start":619,"line_end":619,"column_start":54,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":3824}],"docs":"","sig":null,"attributes":[]},{"id":485,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":381323,"byte_end":381336,"line_start":628,"line_end":628,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3829}],"docs":"","sig":null,"attributes":[]},{"id":486,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":381477,"byte_end":381490,"line_start":637,"line_end":637,"column_start":46,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":3834}],"docs":"","sig":null,"attributes":[]},{"id":487,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":393143,"byte_end":393151,"line_start":47,"line_end":47,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":488,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":393190,"byte_end":393198,"line_start":49,"line_end":49,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3972}],"docs":"","sig":null,"attributes":[]},{"id":489,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":394465,"byte_end":394473,"line_start":106,"line_end":106,"column_start":23,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":490,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":394520,"byte_end":394528,"line_start":108,"line_end":108,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3979}],"docs":"","sig":null,"attributes":[]},{"id":491,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":394660,"byte_end":394668,"line_start":114,"line_end":114,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3983}],"docs":"","sig":null,"attributes":[]},{"id":492,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":394815,"byte_end":394823,"line_start":121,"line_end":121,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3988}],"docs":"","sig":null,"attributes":[]},{"id":493,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":395020,"byte_end":395028,"line_start":129,"line_end":129,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3992}],"docs":"","sig":null,"attributes":[]},{"id":494,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":395202,"byte_end":395210,"line_start":135,"line_end":135,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3996}],"docs":"","sig":null,"attributes":[]},{"id":495,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":395328,"byte_end":395336,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4000},{"krate":0,"index":4001},{"krate":0,"index":4002},{"krate":0,"index":4003},{"krate":0,"index":4004},{"krate":0,"index":4005},{"krate":0,"index":4006},{"krate":0,"index":4007},{"krate":0,"index":4008},{"krate":0,"index":4009},{"krate":0,"index":4010},{"krate":0,"index":4011}],"docs":"","sig":null,"attributes":[]},{"id":496,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":398352,"byte_end":398360,"line_start":267,"line_end":267,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4015},{"krate":0,"index":4016},{"krate":0,"index":4017},{"krate":0,"index":4018},{"krate":0,"index":4019},{"krate":0,"index":4020},{"krate":0,"index":4022},{"krate":0,"index":4024},{"krate":0,"index":4025},{"krate":0,"index":4026},{"krate":0,"index":4027},{"krate":0,"index":4028},{"krate":0,"index":4029},{"krate":0,"index":4030}],"docs":"","sig":null,"attributes":[]},{"id":497,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":401875,"byte_end":401883,"line_start":410,"line_end":410,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4034},{"krate":0,"index":4035},{"krate":0,"index":4036}],"docs":"","sig":null,"attributes":[]},{"id":498,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":402769,"byte_end":402777,"line_start":442,"line_end":442,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4040},{"krate":0,"index":4041},{"krate":0,"index":4042},{"krate":0,"index":4043},{"krate":0,"index":4044},{"krate":0,"index":4045},{"krate":0,"index":4046},{"krate":0,"index":4047}],"docs":"","sig":null,"attributes":[]},{"id":499,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":404921,"byte_end":404929,"line_start":520,"line_end":520,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4051},{"krate":0,"index":4052}],"docs":"","sig":null,"attributes":[]},{"id":500,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":406041,"byte_end":406049,"line_start":555,"line_end":555,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4056},{"krate":0,"index":4057},{"krate":0,"index":4058},{"krate":0,"index":4059},{"krate":0,"index":4060}],"docs":"","sig":null,"attributes":[]},{"id":501,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":407351,"byte_end":407359,"line_start":599,"line_end":599,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4064},{"krate":0,"index":4065}],"docs":"","sig":null,"attributes":[]},{"id":502,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":407909,"byte_end":407917,"line_start":619,"line_end":619,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4069},{"krate":0,"index":4071},{"krate":0,"index":4073},{"krate":0,"index":4074},{"krate":0,"index":4075},{"krate":0,"index":4076},{"krate":0,"index":4077},{"krate":0,"index":4078}],"docs":"","sig":null,"attributes":[]},{"id":503,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":410769,"byte_end":410777,"line_start":697,"line_end":697,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4082},{"krate":0,"index":4083}],"docs":"","sig":null,"attributes":[]},{"id":504,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":410942,"byte_end":410950,"line_start":706,"line_end":706,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4087},{"krate":0,"index":4088}],"docs":"","sig":null,"attributes":[]},{"id":505,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":411169,"byte_end":411177,"line_start":715,"line_end":715,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4092},{"krate":0,"index":4093}],"docs":"","sig":null,"attributes":[]},{"id":506,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":411402,"byte_end":411410,"line_start":724,"line_end":724,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":4097}],"docs":"","sig":null,"attributes":[]},{"id":507,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":411597,"byte_end":411605,"line_start":730,"line_end":730,"column_start":74,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":4103}],"docs":"","sig":null,"attributes":[]},{"id":508,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":411775,"byte_end":411783,"line_start":736,"line_end":736,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":4108}],"docs":"","sig":null,"attributes":[]},{"id":509,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":411913,"byte_end":411921,"line_start":743,"line_end":743,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4112},{"krate":0,"index":4113}],"docs":"","sig":null,"attributes":[]},{"id":510,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":412161,"byte_end":412169,"line_start":752,"line_end":752,"column_start":69,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":4117}],"docs":"","sig":null,"attributes":[]},{"id":511,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":412309,"byte_end":412317,"line_start":759,"line_end":759,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4121},{"krate":0,"index":4122}],"docs":"","sig":null,"attributes":[]},{"id":512,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":412537,"byte_end":412545,"line_start":768,"line_end":768,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":4126}],"docs":"","sig":null,"attributes":[]},{"id":513,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":412702,"byte_end":412710,"line_start":775,"line_end":775,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4131},{"krate":0,"index":4132}],"docs":"","sig":null,"attributes":[]},{"id":514,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":412955,"byte_end":412963,"line_start":784,"line_end":784,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":4136}],"docs":"","sig":null,"attributes":[]},{"id":515,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":413137,"byte_end":413145,"line_start":792,"line_end":792,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4140},{"krate":0,"index":4141}],"docs":"","sig":null,"attributes":[]},{"id":516,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":413365,"byte_end":413373,"line_start":801,"line_end":801,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":4145}],"docs":"","sig":null,"attributes":[]},{"id":517,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":413530,"byte_end":413538,"line_start":808,"line_end":808,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4150},{"krate":0,"index":4151}],"docs":"","sig":null,"attributes":[]},{"id":518,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":413783,"byte_end":413791,"line_start":817,"line_end":817,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":4155}],"docs":"","sig":null,"attributes":[]},{"id":519,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":413959,"byte_end":413967,"line_start":825,"line_end":825,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4159}],"docs":"","sig":null,"attributes":[]},{"id":520,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":414124,"byte_end":414132,"line_start":833,"line_end":833,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4163}],"docs":"","sig":null,"attributes":[]},{"id":521,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":414287,"byte_end":414295,"line_start":841,"line_end":841,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4167}],"docs":"","sig":null,"attributes":[]},{"id":522,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":414479,"byte_end":414487,"line_start":849,"line_end":849,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":4171},{"krate":0,"index":4172}],"docs":"","sig":null,"attributes":[]},{"id":523,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":414810,"byte_end":414818,"line_start":861,"line_end":861,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4177}],"docs":"","sig":null,"attributes":[]},{"id":524,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":414919,"byte_end":414927,"line_start":867,"line_end":867,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4183}],"docs":"","sig":null,"attributes":[]},{"id":525,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415030,"byte_end":415038,"line_start":873,"line_end":873,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4188}],"docs":"","sig":null,"attributes":[]},{"id":526,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415139,"byte_end":415147,"line_start":879,"line_end":879,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4192}],"docs":"","sig":null,"attributes":[]},{"id":527,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415267,"byte_end":415275,"line_start":885,"line_end":885,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4196}],"docs":"","sig":null,"attributes":[]},{"id":528,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415771,"byte_end":415779,"line_start":906,"line_end":906,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":529,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415818,"byte_end":415826,"line_start":908,"line_end":908,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4210}],"docs":"","sig":null,"attributes":[]},{"id":530,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":416772,"byte_end":416780,"line_start":951,"line_end":951,"column_start":23,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":531,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":416827,"byte_end":416835,"line_start":953,"line_end":953,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4217}],"docs":"","sig":null,"attributes":[]},{"id":532,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":416988,"byte_end":416996,"line_start":959,"line_end":959,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4221}],"docs":"","sig":null,"attributes":[]},{"id":533,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":417167,"byte_end":417175,"line_start":967,"line_end":967,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4226}],"docs":"","sig":null,"attributes":[]},{"id":534,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":417377,"byte_end":417385,"line_start":975,"line_end":975,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":4230}],"docs":"","sig":null,"attributes":[]},{"id":535,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":417626,"byte_end":417634,"line_start":985,"line_end":985,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4234}],"docs":"","sig":null,"attributes":[]},{"id":536,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":417772,"byte_end":417780,"line_start":991,"line_end":991,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4238},{"krate":0,"index":4239},{"krate":0,"index":4240},{"krate":0,"index":4241},{"krate":0,"index":4242},{"krate":0,"index":4243},{"krate":0,"index":4244},{"krate":0,"index":4245}],"docs":"","sig":null,"attributes":[]},{"id":537,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419986,"byte_end":419994,"line_start":1084,"line_end":1084,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4249},{"krate":0,"index":4250},{"krate":0,"index":4251},{"krate":0,"index":4252},{"krate":0,"index":4253},{"krate":0,"index":4254},{"krate":0,"index":4255},{"krate":0,"index":4256},{"krate":0,"index":4258},{"krate":0,"index":4260},{"krate":0,"index":4261},{"krate":0,"index":4262},{"krate":0,"index":4263},{"krate":0,"index":4265},{"krate":0,"index":4266},{"krate":0,"index":4267},{"krate":0,"index":4268},{"krate":0,"index":4269}],"docs":"","sig":null,"attributes":[]},{"id":538,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":424365,"byte_end":424373,"line_start":1257,"line_end":1257,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4273},{"krate":0,"index":4274}],"docs":"","sig":null,"attributes":[]},{"id":539,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":424960,"byte_end":424968,"line_start":1279,"line_end":1279,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4278},{"krate":0,"index":4279},{"krate":0,"index":4280},{"krate":0,"index":4281},{"krate":0,"index":4282},{"krate":0,"index":4283},{"krate":0,"index":4284},{"krate":0,"index":4285},{"krate":0,"index":4286}],"docs":"","sig":null,"attributes":[]},{"id":540,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427476,"byte_end":427484,"line_start":1370,"line_end":1370,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4290},{"krate":0,"index":4291}],"docs":"","sig":null,"attributes":[]},{"id":541,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":428638,"byte_end":428646,"line_start":1405,"line_end":1405,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4295},{"krate":0,"index":4296},{"krate":0,"index":4297},{"krate":0,"index":4298},{"krate":0,"index":4299}],"docs":"","sig":null,"attributes":[]},{"id":542,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":430152,"byte_end":430160,"line_start":1459,"line_end":1459,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4303},{"krate":0,"index":4304}],"docs":"","sig":null,"attributes":[]},{"id":543,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":430778,"byte_end":430786,"line_start":1481,"line_end":1481,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4308},{"krate":0,"index":4310},{"krate":0,"index":4312},{"krate":0,"index":4313},{"krate":0,"index":4314},{"krate":0,"index":4315},{"krate":0,"index":4316},{"krate":0,"index":4317}],"docs":"","sig":null,"attributes":[]},{"id":544,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":433715,"byte_end":433723,"line_start":1563,"line_end":1563,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4321},{"krate":0,"index":4322}],"docs":"","sig":null,"attributes":[]},{"id":545,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":433897,"byte_end":433905,"line_start":1572,"line_end":1572,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4326},{"krate":0,"index":4327}],"docs":"","sig":null,"attributes":[]},{"id":546,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":434146,"byte_end":434154,"line_start":1581,"line_end":1581,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4332},{"krate":0,"index":4333}],"docs":"","sig":null,"attributes":[]},{"id":547,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":434388,"byte_end":434396,"line_start":1590,"line_end":1590,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":4337}],"docs":"","sig":null,"attributes":[]},{"id":548,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":434583,"byte_end":434591,"line_start":1596,"line_end":1596,"column_start":74,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":4343}],"docs":"","sig":null,"attributes":[]},{"id":549,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":434761,"byte_end":434769,"line_start":1602,"line_end":1602,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":4348}],"docs":"","sig":null,"attributes":[]},{"id":550,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":434899,"byte_end":434907,"line_start":1609,"line_end":1609,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4352},{"krate":0,"index":4353}],"docs":"","sig":null,"attributes":[]},{"id":551,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":435165,"byte_end":435173,"line_start":1618,"line_end":1618,"column_start":69,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":4357}],"docs":"","sig":null,"attributes":[]},{"id":552,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":435313,"byte_end":435321,"line_start":1625,"line_end":1625,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4361},{"krate":0,"index":4362}],"docs":"","sig":null,"attributes":[]},{"id":553,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":435604,"byte_end":435612,"line_start":1638,"line_end":1638,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":4366}],"docs":"","sig":null,"attributes":[]},{"id":554,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":435769,"byte_end":435777,"line_start":1645,"line_end":1645,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4371},{"krate":0,"index":4372}],"docs":"","sig":null,"attributes":[]},{"id":555,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":436087,"byte_end":436095,"line_start":1658,"line_end":1658,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":4376}],"docs":"","sig":null,"attributes":[]},{"id":556,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":436296,"byte_end":436304,"line_start":1667,"line_end":1667,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4380},{"krate":0,"index":4381}],"docs":"","sig":null,"attributes":[]},{"id":557,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":436587,"byte_end":436595,"line_start":1680,"line_end":1680,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":4385}],"docs":"","sig":null,"attributes":[]},{"id":558,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":436752,"byte_end":436760,"line_start":1687,"line_end":1687,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4390},{"krate":0,"index":4391}],"docs":"","sig":null,"attributes":[]},{"id":559,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":437070,"byte_end":437078,"line_start":1700,"line_end":1700,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":4395}],"docs":"","sig":null,"attributes":[]},{"id":560,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":437273,"byte_end":437281,"line_start":1709,"line_end":1709,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4399}],"docs":"","sig":null,"attributes":[]},{"id":561,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":437438,"byte_end":437446,"line_start":1717,"line_end":1717,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4403}],"docs":"","sig":null,"attributes":[]},{"id":562,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":437601,"byte_end":437609,"line_start":1725,"line_end":1725,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4407}],"docs":"","sig":null,"attributes":[]},{"id":563,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":437793,"byte_end":437801,"line_start":1733,"line_end":1733,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":4411},{"krate":0,"index":4412}],"docs":"","sig":null,"attributes":[]},{"id":564,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":438258,"byte_end":438266,"line_start":1751,"line_end":1751,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4417}],"docs":"","sig":null,"attributes":[]},{"id":565,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":438375,"byte_end":438383,"line_start":1757,"line_end":1757,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":4423}],"docs":"","sig":null,"attributes":[]},{"id":566,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":438495,"byte_end":438503,"line_start":1763,"line_end":1763,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4428}],"docs":"","sig":null,"attributes":[]},{"id":567,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":438618,"byte_end":438626,"line_start":1769,"line_end":1769,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4432}],"docs":"","sig":null,"attributes":[]},{"id":568,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439120,"byte_end":439132,"line_start":1790,"line_end":1790,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4434},{"krate":0,"index":4435},{"krate":0,"index":4436},{"krate":0,"index":4437},{"krate":0,"index":4438},{"krate":0,"index":4439},{"krate":0,"index":4440},{"krate":0,"index":4443},{"krate":0,"index":4446}],"docs":"","sig":null,"attributes":[]},{"id":569,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":441564,"byte_end":441576,"line_start":1867,"line_end":1867,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4450},{"krate":0,"index":4451},{"krate":0,"index":4452},{"krate":0,"index":4453},{"krate":0,"index":4454},{"krate":0,"index":4455},{"krate":0,"index":4456},{"krate":0,"index":4459},{"krate":0,"index":4462},{"krate":0,"index":4465},{"krate":0,"index":4466},{"krate":0,"index":4467}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2692,"byte_end":2700,"line_start":67,"line_end":67,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":275}},{"kind":"Mod","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2710,"byte_end":2719,"line_start":68,"line_end":68,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":282}},{"kind":"Mod","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/lib.rs","byte_start":2776,"byte_end":2779,"line_start":73,"line_end":73,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1113}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":6672,"byte_end":6677,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":4520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":6851,"byte_end":6856,"line_start":40,"line_end":40,"column_start":9,"column_end":14},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":4520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":7124,"byte_end":7129,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":4520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":7668,"byte_end":7673,"line_start":77,"line_end":77,"column_start":9,"column_end":14},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":4520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":8358,"byte_end":8363,"line_start":104,"line_end":104,"column_start":9,"column_end":14},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":4520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":8659,"byte_end":8664,"line_start":120,"line_end":120,"column_start":9,"column_end":14},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":4520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":8768,"byte_end":8773,"line_start":129,"line_end":129,"column_start":9,"column_end":14},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":4520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":9213,"byte_end":9218,"line_start":154,"line_end":154,"column_start":9,"column_end":14},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":4520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":9933,"byte_end":9938,"line_start":184,"line_end":184,"column_start":37,"column_end":42},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":4520},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":10119,"byte_end":10124,"line_start":191,"line_end":191,"column_start":51,"column_end":56},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":4520},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":10284,"byte_end":10289,"line_start":198,"line_end":198,"column_start":29,"column_end":34},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":4520},"to":{"krate":1,"index":7106}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":10454,"byte_end":10459,"line_start":204,"line_end":204,"column_start":55,"column_end":60},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":4520},"to":{"krate":1,"index":7106}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":10610,"byte_end":10615,"line_start":210,"line_end":210,"column_start":37,"column_end":42},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":4520},"to":{"krate":1,"index":2951}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":10763,"byte_end":10768,"line_start":216,"line_end":216,"column_start":47,"column_end":52},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":4520},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":10961,"byte_end":10966,"line_start":223,"line_end":223,"column_start":37,"column_end":42},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":4520},"to":{"krate":1,"index":2955}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":11114,"byte_end":11119,"line_start":229,"line_end":229,"column_start":47,"column_end":52},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":4520},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":11286,"byte_end":11291,"line_start":237,"line_end":237,"column_start":40,"column_end":45},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":4520},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":11475,"byte_end":11480,"line_start":245,"line_end":245,"column_start":40,"column_end":45},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":4520},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":11608,"byte_end":11613,"line_start":251,"line_end":251,"column_start":40,"column_end":45},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":4520},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":11797,"byte_end":11802,"line_start":259,"line_end":259,"column_start":40,"column_end":45},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":4520},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":11924,"byte_end":11929,"line_start":265,"line_end":265,"column_start":34,"column_end":39},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":4520},"to":{"krate":1,"index":2947}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/angle.rs","byte_start":12070,"byte_end":12075,"line_start":272,"line_end":272,"column_start":38,"column_end":43},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":4520},"to":{"krate":0,"index":276}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19691,"byte_end":19696,"line_start":70,"line_end":70,"column_start":27,"column_end":32},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":370},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19835,"byte_end":19840,"line_start":77,"line_end":77,"column_start":27,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":370},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":19879,"byte_end":19884,"line_start":79,"line_end":79,"column_start":29,"column_end":34},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":370},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":20022,"byte_end":20027,"line_start":85,"line_end":85,"column_start":37,"column_end":42},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":370},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":20167,"byte_end":20172,"line_start":91,"line_end":91,"column_start":23,"column_end":28},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":370},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":20221,"byte_end":20226,"line_start":93,"line_end":93,"column_start":39,"column_end":44},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":370},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":20427,"byte_end":20432,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":21151,"byte_end":21156,"line_start":131,"line_end":131,"column_start":12,"column_end":17},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":22868,"byte_end":22873,"line_start":180,"line_end":180,"column_start":12,"column_end":17},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":24565,"byte_end":24570,"line_start":238,"line_end":238,"column_start":12,"column_end":17},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":24855,"byte_end":24860,"line_start":252,"line_end":252,"column_start":12,"column_end":17},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":25604,"byte_end":25609,"line_start":288,"line_end":288,"column_start":12,"column_end":17},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":26824,"byte_end":26829,"line_start":324,"line_end":324,"column_start":12,"column_end":17},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":27826,"byte_end":27831,"line_start":365,"line_end":365,"column_start":12,"column_end":17},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":28144,"byte_end":28149,"line_start":376,"line_end":376,"column_start":12,"column_end":17},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":28370,"byte_end":28375,"line_start":386,"line_end":386,"column_start":12,"column_end":17},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":28574,"byte_end":28579,"line_start":397,"line_end":397,"column_start":12,"column_end":17},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":28779,"byte_end":28784,"line_start":407,"line_end":407,"column_start":35,"column_end":40},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":370},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":29002,"byte_end":29007,"line_start":416,"line_end":416,"column_start":47,"column_end":52},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":370},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":29150,"byte_end":29155,"line_start":423,"line_end":423,"column_start":35,"column_end":40},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":370},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":29373,"byte_end":29378,"line_start":432,"line_end":432,"column_start":47,"column_end":52},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":370},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":29541,"byte_end":29546,"line_start":439,"line_end":439,"column_start":55,"column_end":60},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":370},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":29794,"byte_end":29799,"line_start":448,"line_end":448,"column_start":60,"column_end":65},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":370},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":29993,"byte_end":29998,"line_start":456,"line_end":456,"column_start":55,"column_end":60},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":370},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":30246,"byte_end":30251,"line_start":465,"line_end":465,"column_start":60,"column_end":65},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":370},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":30402,"byte_end":30407,"line_start":473,"line_end":473,"column_start":12,"column_end":17},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":31473,"byte_end":31478,"line_start":517,"line_end":517,"column_start":28,"column_end":33},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34324,"byte_end":34329,"line_start":595,"line_end":595,"column_start":19,"column_end":24},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":34510,"byte_end":34515,"line_start":603,"line_end":603,"column_start":12,"column_end":17},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":35190,"byte_end":35195,"line_start":622,"line_end":622,"column_start":12,"column_end":17},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":370},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":35857,"byte_end":35862,"line_start":645,"line_end":645,"column_start":35,"column_end":40},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":370},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box2d.rs","byte_start":36017,"byte_end":36022,"line_start":654,"line_end":654,"column_start":33,"column_end":38},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":370},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":44967,"byte_end":44972,"line_start":40,"line_end":40,"column_start":27,"column_end":32},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":45111,"byte_end":45116,"line_start":47,"line_end":47,"column_start":27,"column_end":32},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":45155,"byte_end":45160,"line_start":49,"line_end":49,"column_start":29,"column_end":34},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":45298,"byte_end":45303,"line_start":55,"line_end":55,"column_start":37,"column_end":42},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":45443,"byte_end":45448,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":45497,"byte_end":45502,"line_start":63,"line_end":63,"column_start":39,"column_end":44},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":45703,"byte_end":45708,"line_start":72,"line_end":72,"column_start":12,"column_end":17},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":46137,"byte_end":46142,"line_start":89,"line_end":89,"column_start":12,"column_end":17},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":48168,"byte_end":48173,"line_start":146,"line_end":146,"column_start":12,"column_end":17},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":49797,"byte_end":49802,"line_start":213,"line_end":213,"column_start":12,"column_end":17},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":50105,"byte_end":50110,"line_start":228,"line_end":228,"column_start":12,"column_end":17},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":50629,"byte_end":50634,"line_start":257,"line_end":257,"column_start":12,"column_end":17},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":51100,"byte_end":51105,"line_start":272,"line_end":272,"column_start":12,"column_end":17},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":52287,"byte_end":52292,"line_start":319,"line_end":319,"column_start":12,"column_end":17},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":52609,"byte_end":52614,"line_start":330,"line_end":330,"column_start":12,"column_end":17},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":52835,"byte_end":52840,"line_start":340,"line_end":340,"column_start":12,"column_end":17},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":53410,"byte_end":53415,"line_start":369,"line_end":369,"column_start":12,"column_end":17},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":53615,"byte_end":53620,"line_start":379,"line_end":379,"column_start":35,"column_end":40},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":53838,"byte_end":53843,"line_start":388,"line_end":388,"column_start":47,"column_end":52},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":54004,"byte_end":54009,"line_start":396,"line_end":396,"column_start":35,"column_end":40},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":54235,"byte_end":54240,"line_start":405,"line_end":405,"column_start":47,"column_end":52},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":54421,"byte_end":54426,"line_start":413,"line_end":413,"column_start":55,"column_end":60},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":54682,"byte_end":54687,"line_start":422,"line_end":422,"column_start":60,"column_end":65},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":54889,"byte_end":54894,"line_start":430,"line_end":430,"column_start":55,"column_end":60},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":55150,"byte_end":55155,"line_start":439,"line_end":439,"column_start":60,"column_end":65},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":55314,"byte_end":55319,"line_start":447,"line_end":447,"column_start":12,"column_end":17},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":56603,"byte_end":56608,"line_start":502,"line_end":502,"column_start":28,"column_end":33},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59474,"byte_end":59479,"line_start":580,"line_end":580,"column_start":19,"column_end":24},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":59660,"byte_end":59665,"line_start":588,"line_end":588,"column_start":12,"column_end":17},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":60344,"byte_end":60349,"line_start":607,"line_end":607,"column_start":12,"column_end":17},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":61017,"byte_end":61022,"line_start":632,"line_end":632,"column_start":35,"column_end":40},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/box3d.rs","byte_start":61177,"byte_end":61182,"line_start":641,"line_end":641,"column_start":33,"column_end":38},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":614},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":71439,"byte_end":71456,"line_start":34,"line_end":34,"column_start":27,"column_end":44},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":829},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":71495,"byte_end":71512,"line_start":36,"line_end":36,"column_start":29,"column_end":46},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":829},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":72548,"byte_end":72565,"line_start":81,"line_end":81,"column_start":19,"column_end":36},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":829},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":72613,"byte_end":72630,"line_start":83,"line_end":83,"column_start":26,"column_end":43},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":829},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":72822,"byte_end":72839,"line_start":92,"line_end":92,"column_start":21,"column_end":38},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":829},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":73038,"byte_end":73055,"line_start":104,"line_end":104,"column_start":12,"column_end":29},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":73381,"byte_end":73398,"line_start":118,"line_end":118,"column_start":59,"column_end":76},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":74203,"byte_end":74220,"line_start":148,"line_end":148,"column_start":43,"column_end":60},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":829},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":74398,"byte_end":74415,"line_start":155,"line_end":155,"column_start":43,"column_end":60},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":829},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":74592,"byte_end":74609,"line_start":162,"line_end":162,"column_start":48,"column_end":65},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":829},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":74783,"byte_end":74800,"line_start":169,"line_end":169,"column_start":41,"column_end":58},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":829},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/homogen.rs","byte_start":74966,"byte_end":74983,"line_start":176,"line_end":176,"column_start":39,"column_end":56},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":829},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77723,"byte_end":77729,"line_start":44,"line_end":44,"column_start":29,"column_end":35},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":77847,"byte_end":77853,"line_start":50,"line_end":50,"column_start":27,"column_end":33},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":78421,"byte_end":78427,"line_start":78,"line_end":78,"column_start":12,"column_end":18},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":960},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":78595,"byte_end":78601,"line_start":86,"line_end":86,"column_start":19,"column_end":25},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":960},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":79670,"byte_end":79676,"line_start":124,"line_end":124,"column_start":24,"column_end":30},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":960},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":80023,"byte_end":80029,"line_start":138,"line_end":138,"column_start":29,"column_end":35},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":960},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":80481,"byte_end":80487,"line_start":151,"line_end":151,"column_start":39,"column_end":45},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":80618,"byte_end":80624,"line_start":157,"line_end":157,"column_start":33,"column_end":39},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":80749,"byte_end":80755,"line_start":164,"line_end":164,"column_start":27,"column_end":33},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":80883,"byte_end":80889,"line_start":171,"line_end":171,"column_start":25,"column_end":31},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":81092,"byte_end":81098,"line_start":180,"line_end":180,"column_start":39,"column_end":45},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":81317,"byte_end":81323,"line_start":189,"line_end":189,"column_start":44,"column_end":50},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":7106}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":81531,"byte_end":81537,"line_start":196,"line_end":196,"column_start":74,"column_end":80},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":7106}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":81711,"byte_end":81717,"line_start":203,"line_end":203,"column_start":37,"column_end":43},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2951}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":81849,"byte_end":81855,"line_start":210,"line_end":210,"column_start":25,"column_end":31},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":82064,"byte_end":82070,"line_start":219,"line_end":219,"column_start":37,"column_end":43},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2955}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":82248,"byte_end":82254,"line_start":226,"line_end":226,"column_start":39,"column_end":45},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":960},"to":{"krate":4,"index":723}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":82551,"byte_end":82557,"line_start":237,"line_end":237,"column_start":48,"column_end":54},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":82779,"byte_end":82785,"line_start":247,"line_end":247,"column_start":28,"column_end":34},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":83014,"byte_end":83020,"line_start":257,"line_end":257,"column_start":56,"column_end":62},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":83169,"byte_end":83175,"line_start":265,"line_end":265,"column_start":28,"column_end":34},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":83404,"byte_end":83410,"line_start":275,"line_end":275,"column_start":56,"column_end":62},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":83588,"byte_end":83594,"line_start":283,"line_end":283,"column_start":52,"column_end":58},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":83846,"byte_end":83852,"line_start":293,"line_end":293,"column_start":52,"column_end":58},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":84064,"byte_end":84070,"line_start":303,"line_end":303,"column_start":25,"column_end":31},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2947}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":84243,"byte_end":84249,"line_start":312,"line_end":312,"column_start":37,"column_end":43},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":84374,"byte_end":84380,"line_start":318,"line_end":318,"column_start":39,"column_end":45},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2551}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":84519,"byte_end":84525,"line_start":324,"line_end":324,"column_start":23,"column_end":29},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":84560,"byte_end":84566,"line_start":326,"line_end":326,"column_start":25,"column_end":31},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":960},"to":{"krate":1,"index":2540}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":84685,"byte_end":84691,"line_start":332,"line_end":332,"column_start":27,"column_end":33},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":960},"to":{"krate":0,"index":1117}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/length.rs","byte_start":84821,"byte_end":84827,"line_start":339,"line_end":339,"column_start":41,"column_end":47},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":960},"to":{"krate":0,"index":276}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":93525,"byte_end":93526,"line_start":32,"line_end":32,"column_start":36,"column_end":37},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1120},"to":{"krate":0,"index":1117}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":93666,"byte_end":93667,"line_start":42,"line_end":42,"column_start":34,"column_end":35},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1125},"to":{"krate":0,"index":1122}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":93808,"byte_end":93812,"line_start":49,"line_end":49,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":2863},"to":{"krate":0,"index":1127}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":94083,"byte_end":94087,"line_start":57,"line_end":57,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":2863},"to":{"krate":0,"index":1129}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/num.rs","byte_start":94393,"byte_end":94397,"line_start":65,"line_end":65,"column_start":17,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":2863},"to":{"krate":0,"index":1131}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":96881,"byte_end":96888,"line_start":38,"line_end":38,"column_start":27,"column_end":34},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":96927,"byte_end":96934,"line_start":40,"line_end":40,"column_start":29,"column_end":36},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":98190,"byte_end":98197,"line_start":96,"line_end":96,"column_start":19,"column_end":26},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":98245,"byte_end":98252,"line_start":98,"line_end":98,"column_start":26,"column_end":33},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":98402,"byte_end":98409,"line_start":107,"line_end":107,"column_start":21,"column_end":28},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":98623,"byte_end":98630,"line_start":119,"line_end":119,"column_start":39,"column_end":46},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":98804,"byte_end":98811,"line_start":125,"line_end":125,"column_start":33,"column_end":40},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":98928,"byte_end":98935,"line_start":131,"line_end":131,"column_start":12,"column_end":19},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":100084,"byte_end":100091,"line_start":186,"line_end":186,"column_start":18,"column_end":25},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":105153,"byte_end":105160,"line_start":386,"line_end":386,"column_start":24,"column_end":31},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":105761,"byte_end":105768,"line_start":410,"line_end":410,"column_start":28,"column_end":35},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108582,"byte_end":108589,"line_start":488,"line_end":488,"column_start":19,"column_end":26},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108793,"byte_end":108800,"line_start":496,"line_end":496,"column_start":39,"column_end":46},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":108989,"byte_end":108996,"line_start":503,"line_end":503,"column_start":40,"column_end":47},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1227},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":109133,"byte_end":109140,"line_start":510,"line_end":510,"column_start":25,"column_end":32},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2947}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":109320,"byte_end":109327,"line_start":519,"line_end":519,"column_start":39,"column_end":46},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":109567,"byte_end":109574,"line_start":528,"line_end":528,"column_start":51,"column_end":58},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2951}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":109761,"byte_end":109768,"line_start":536,"line_end":536,"column_start":41,"column_end":48},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":110019,"byte_end":110026,"line_start":545,"line_end":545,"column_start":69,"column_end":76},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2951}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":110166,"byte_end":110173,"line_start":552,"line_end":552,"column_start":25,"column_end":32},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":110383,"byte_end":110390,"line_start":561,"line_end":561,"column_start":39,"column_end":46},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":110630,"byte_end":110637,"line_start":570,"line_end":570,"column_start":51,"column_end":58},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2955}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":110824,"byte_end":110831,"line_start":578,"line_end":578,"column_start":41,"column_end":48},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":111082,"byte_end":111089,"line_start":587,"line_end":587,"column_start":69,"column_end":76},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2955}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":111239,"byte_end":111246,"line_start":594,"line_end":594,"column_start":35,"column_end":42},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":111467,"byte_end":111474,"line_start":603,"line_end":603,"column_start":56,"column_end":63},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":111631,"byte_end":111638,"line_start":610,"line_end":610,"column_start":55,"column_end":62},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":111884,"byte_end":111891,"line_start":619,"line_end":619,"column_start":60,"column_end":67},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":112065,"byte_end":112072,"line_start":627,"line_end":627,"column_start":35,"column_end":42},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":112293,"byte_end":112300,"line_start":636,"line_end":636,"column_start":56,"column_end":63},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":112457,"byte_end":112464,"line_start":643,"line_end":643,"column_start":55,"column_end":62},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":112710,"byte_end":112717,"line_start":652,"line_end":652,"column_start":60,"column_end":67},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":112883,"byte_end":112890,"line_start":660,"line_end":660,"column_start":27,"column_end":34},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":1227},"to":{"krate":0,"index":1117}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":112997,"byte_end":113004,"line_start":667,"line_end":667,"column_start":29,"column_end":36},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":1227},"to":{"krate":0,"index":1127}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":113158,"byte_end":113165,"line_start":675,"line_end":675,"column_start":27,"column_end":34},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":1227},"to":{"krate":0,"index":1131}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":113317,"byte_end":113324,"line_start":683,"line_end":683,"column_start":29,"column_end":36},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":1227},"to":{"krate":0,"index":1129}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":113504,"byte_end":113511,"line_start":691,"line_end":691,"column_start":53,"column_end":60},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":1227},"to":{"krate":0,"index":276}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":113836,"byte_end":113843,"line_start":703,"line_end":703,"column_start":29,"column_end":36},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2756}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":113944,"byte_end":113951,"line_start":709,"line_end":709,"column_start":29,"column_end":36},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":114056,"byte_end":114063,"line_start":715,"line_end":715,"column_start":29,"column_end":36},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2756}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":114164,"byte_end":114171,"line_start":721,"line_end":721,"column_start":29,"column_end":36},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":1227},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":114492,"byte_end":114499,"line_start":739,"line_end":739,"column_start":27,"column_end":34},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":114538,"byte_end":114545,"line_start":741,"line_end":741,"column_start":29,"column_end":36},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":115483,"byte_end":115490,"line_start":784,"line_end":784,"column_start":19,"column_end":26},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":115538,"byte_end":115545,"line_start":786,"line_end":786,"column_start":26,"column_end":33},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":115716,"byte_end":115723,"line_start":795,"line_end":795,"column_start":21,"column_end":28},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":115925,"byte_end":115932,"line_start":806,"line_end":806,"column_start":39,"column_end":46},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":116173,"byte_end":116180,"line_start":816,"line_end":816,"column_start":33,"column_end":40},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":116317,"byte_end":116324,"line_start":822,"line_end":822,"column_start":12,"column_end":19},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":1442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":117561,"byte_end":117568,"line_start":879,"line_end":879,"column_start":18,"column_end":25},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":1442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":123159,"byte_end":123166,"line_start":1094,"line_end":1094,"column_start":24,"column_end":31},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":1442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":123905,"byte_end":123912,"line_start":1126,"line_end":1126,"column_start":28,"column_end":35},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":1442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":126812,"byte_end":126819,"line_start":1208,"line_end":1208,"column_start":19,"column_end":26},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":1442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":127045,"byte_end":127052,"line_start":1216,"line_end":1216,"column_start":39,"column_end":46},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":1442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":127309,"byte_end":127316,"line_start":1227,"line_end":1227,"column_start":40,"column_end":47},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":1442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":127453,"byte_end":127460,"line_start":1234,"line_end":1234,"column_start":25,"column_end":32},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2947}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":127649,"byte_end":127656,"line_start":1243,"line_end":1243,"column_start":39,"column_end":46},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":127965,"byte_end":127972,"line_start":1256,"line_end":1256,"column_start":51,"column_end":58},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2951}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":128190,"byte_end":128197,"line_start":1265,"line_end":1265,"column_start":41,"column_end":48},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":128466,"byte_end":128473,"line_start":1274,"line_end":1274,"column_start":69,"column_end":76},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2951}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":128613,"byte_end":128620,"line_start":1281,"line_end":1281,"column_start":25,"column_end":32},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":128848,"byte_end":128855,"line_start":1290,"line_end":1290,"column_start":39,"column_end":46},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":129164,"byte_end":129171,"line_start":1303,"line_end":1303,"column_start":51,"column_end":58},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2955}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":129389,"byte_end":129396,"line_start":1312,"line_end":1312,"column_start":41,"column_end":48},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":129665,"byte_end":129672,"line_start":1321,"line_end":1321,"column_start":69,"column_end":76},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2955}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":129822,"byte_end":129829,"line_start":1328,"line_end":1328,"column_start":35,"column_end":42},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":130104,"byte_end":130111,"line_start":1341,"line_end":1341,"column_start":47,"column_end":54},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":130313,"byte_end":130320,"line_start":1350,"line_end":1350,"column_start":55,"column_end":62},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":130631,"byte_end":130638,"line_start":1363,"line_end":1363,"column_start":60,"column_end":67},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":130784,"byte_end":130791,"line_start":1370,"line_end":1370,"column_start":35,"column_end":42},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":131066,"byte_end":131073,"line_start":1383,"line_end":1383,"column_start":47,"column_end":54},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":131275,"byte_end":131282,"line_start":1392,"line_end":1392,"column_start":55,"column_end":62},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":131593,"byte_end":131600,"line_start":1405,"line_end":1405,"column_start":60,"column_end":67},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":131738,"byte_end":131745,"line_start":1412,"line_end":1412,"column_start":27,"column_end":34},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":1442},"to":{"krate":0,"index":1117}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":131852,"byte_end":131859,"line_start":1419,"line_end":1419,"column_start":29,"column_end":36},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":1442},"to":{"krate":0,"index":1127}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":132013,"byte_end":132020,"line_start":1427,"line_end":1427,"column_start":27,"column_end":34},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":1442},"to":{"krate":0,"index":1131}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":132172,"byte_end":132179,"line_start":1435,"line_end":1435,"column_start":29,"column_end":36},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":1442},"to":{"krate":0,"index":1129}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":132359,"byte_end":132366,"line_start":1443,"line_end":1443,"column_start":53,"column_end":60},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":1442},"to":{"krate":0,"index":276}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":132825,"byte_end":132832,"line_start":1461,"line_end":1461,"column_start":29,"column_end":36},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2756}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":132941,"byte_end":132948,"line_start":1467,"line_end":1467,"column_start":29,"column_end":36},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":133062,"byte_end":133069,"line_start":1473,"line_end":1473,"column_start":32,"column_end":39},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2756}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/point.rs","byte_start":133184,"byte_end":133191,"line_start":1479,"line_end":1479,"column_start":32,"column_end":39},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":148893,"byte_end":148897,"line_start":72,"line_end":72,"column_start":27,"column_end":31},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":149040,"byte_end":149044,"line_start":79,"line_end":79,"column_start":27,"column_end":31},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":149083,"byte_end":149087,"line_start":81,"line_end":81,"column_start":29,"column_end":33},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":149229,"byte_end":149233,"line_start":87,"line_end":87,"column_start":37,"column_end":41},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":149381,"byte_end":149385,"line_start":93,"line_end":93,"column_start":23,"column_end":27},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":149434,"byte_end":149438,"line_start":95,"line_end":95,"column_start":39,"column_end":43},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":149711,"byte_end":149715,"line_start":105,"line_end":105,"column_start":33,"column_end":37},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":149829,"byte_end":149833,"line_start":111,"line_end":111,"column_start":12,"column_end":16},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150001,"byte_end":150005,"line_start":119,"line_end":119,"column_start":12,"column_end":16},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":150406,"byte_end":150410,"line_start":139,"line_end":139,"column_start":12,"column_end":16},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":151678,"byte_end":151682,"line_start":209,"line_end":209,"column_start":12,"column_end":16},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":152201,"byte_end":152205,"line_start":227,"line_end":227,"column_start":12,"column_end":16},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":152561,"byte_end":152565,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":152985,"byte_end":152989,"line_start":260,"line_end":260,"column_start":12,"column_end":16},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":153559,"byte_end":153563,"line_start":277,"line_end":277,"column_start":12,"column_end":16},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":154410,"byte_end":154414,"line_start":300,"line_end":300,"column_start":12,"column_end":16},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":155032,"byte_end":155036,"line_start":319,"line_end":319,"column_start":12,"column_end":16},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":155849,"byte_end":155853,"line_start":341,"line_end":341,"column_start":12,"column_end":16},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":156221,"byte_end":156225,"line_start":355,"line_end":355,"column_start":12,"column_end":16},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":156448,"byte_end":156452,"line_start":365,"line_end":365,"column_start":12,"column_end":16},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":156683,"byte_end":156687,"line_start":375,"line_end":375,"column_start":12,"column_end":16},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":157025,"byte_end":157029,"line_start":388,"line_end":388,"column_start":39,"column_end":43},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":157153,"byte_end":157157,"line_start":395,"line_end":395,"column_start":38,"column_end":42},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":157292,"byte_end":157296,"line_start":402,"line_end":402,"column_start":38,"column_end":42},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":157496,"byte_end":157500,"line_start":413,"line_end":413,"column_start":35,"column_end":39},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":157720,"byte_end":157724,"line_start":422,"line_end":422,"column_start":47,"column_end":51},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":157867,"byte_end":157871,"line_start":429,"line_end":429,"column_start":35,"column_end":39},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":158099,"byte_end":158103,"line_start":438,"line_end":438,"column_start":47,"column_end":51},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":158266,"byte_end":158270,"line_start":445,"line_end":445,"column_start":55,"column_end":59},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":158528,"byte_end":158532,"line_start":454,"line_end":454,"column_start":60,"column_end":64},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":158738,"byte_end":158742,"line_start":462,"line_end":462,"column_start":55,"column_end":59},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":159000,"byte_end":159004,"line_start":471,"line_end":471,"column_start":60,"column_end":64},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":159173,"byte_end":159177,"line_start":479,"line_end":479,"column_start":18,"column_end":22},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":159818,"byte_end":159822,"line_start":502,"line_end":502,"column_start":28,"column_end":32},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163109,"byte_end":163113,"line_start":590,"line_end":590,"column_start":19,"column_end":23},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":163362,"byte_end":163366,"line_start":598,"line_end":598,"column_start":76,"column_end":80},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rect.rs","byte_start":165428,"byte_end":165432,"line_start":649,"line_end":649,"column_start":35,"column_end":39},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":175955,"byte_end":175971,"line_start":28,"line_end":28,"column_start":19,"column_end":35},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":4618},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":176284,"byte_end":176300,"line_start":39,"line_end":39,"column_start":25,"column_end":41},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":4618},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":176582,"byte_end":176598,"line_start":48,"line_end":48,"column_start":40,"column_end":56},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":4618},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":180984,"byte_end":181000,"line_start":187,"line_end":187,"column_start":9,"column_end":25},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":4618},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rigid.rs","byte_start":181176,"byte_end":181192,"line_start":194,"line_end":194,"column_start":67,"column_end":83},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":4618},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":185081,"byte_end":185091,"line_start":40,"line_end":40,"column_start":34,"column_end":44},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":2071},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":185144,"byte_end":185154,"line_start":42,"line_end":42,"column_start":36,"column_end":46},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":2071},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":185336,"byte_end":185346,"line_start":51,"line_end":51,"column_start":26,"column_end":36},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":2071},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":185408,"byte_end":185418,"line_start":53,"line_end":53,"column_start":33,"column_end":43},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":2071},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":185569,"byte_end":185579,"line_start":62,"line_end":62,"column_start":28,"column_end":38},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":2071},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":185724,"byte_end":185734,"line_start":71,"line_end":71,"column_start":19,"column_end":29},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":2071},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":186285,"byte_end":186295,"line_start":96,"line_end":96,"column_start":25,"column_end":35},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":2071},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":187940,"byte_end":187950,"line_start":159,"line_end":159,"column_start":19,"column_end":29},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":2071},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":188155,"byte_end":188165,"line_start":169,"line_end":169,"column_start":26,"column_end":36},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":2071},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":189564,"byte_end":189574,"line_start":209,"line_end":209,"column_start":19,"column_end":29},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":2071},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":190994,"byte_end":191004,"line_start":251,"line_end":251,"column_start":34,"column_end":44},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":2137},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":191057,"byte_end":191067,"line_start":253,"line_end":253,"column_start":36,"column_end":46},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":2137},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":191334,"byte_end":191344,"line_start":265,"line_end":265,"column_start":26,"column_end":36},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":2137},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":191406,"byte_end":191416,"line_start":267,"line_end":267,"column_start":33,"column_end":43},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":2137},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":191622,"byte_end":191632,"line_start":276,"line_end":276,"column_start":28,"column_end":38},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":2137},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":191845,"byte_end":191855,"line_start":288,"line_end":288,"column_start":19,"column_end":29},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":2137},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":192726,"byte_end":192736,"line_start":319,"line_end":319,"column_start":19,"column_end":29},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":2137},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":195283,"byte_end":195293,"line_start":403,"line_end":403,"column_start":19,"column_end":29},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":2137},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":204931,"byte_end":204941,"line_start":706,"line_end":706,"column_start":46,"column_end":56},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":2137},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/rotation.rs","byte_start":205196,"byte_end":205206,"line_start":716,"line_end":716,"column_start":35,"column_end":45},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":2137},"to":{"krate":0,"index":276}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":215806,"byte_end":215811,"line_start":53,"line_end":53,"column_start":19,"column_end":24},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":2282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":220473,"byte_end":220478,"line_start":241,"line_end":241,"column_start":28,"column_end":33},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":2282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":222364,"byte_end":222369,"line_start":300,"line_end":300,"column_start":47,"column_end":52},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":2282},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":222592,"byte_end":222597,"line_start":310,"line_end":310,"column_start":32,"column_end":37},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":2282},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":222832,"byte_end":222837,"line_start":320,"line_end":320,"column_start":32,"column_end":37},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":2282},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":223195,"byte_end":223200,"line_start":332,"line_end":332,"column_start":44,"column_end":49},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":2282},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":223335,"byte_end":223340,"line_start":338,"line_end":338,"column_start":30,"column_end":35},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":2282},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":223403,"byte_end":223408,"line_start":340,"line_end":340,"column_start":46,"column_end":51},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":2282},"to":{"krate":1,"index":2551}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":223563,"byte_end":223568,"line_start":346,"line_end":346,"column_start":32,"column_end":37},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":2282},"to":{"krate":1,"index":2540}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":223703,"byte_end":223708,"line_start":352,"line_end":352,"column_start":36,"column_end":41},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":2282},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":223845,"byte_end":223850,"line_start":358,"line_end":358,"column_start":34,"column_end":39},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":2282},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":223913,"byte_end":223918,"line_start":360,"line_end":360,"column_start":46,"column_end":51},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":2282},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":224063,"byte_end":224068,"line_start":366,"line_end":366,"column_start":40,"column_end":45},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":2282},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":224185,"byte_end":224190,"line_start":372,"line_end":372,"column_start":34,"column_end":39},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":2282},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/scale.rs","byte_start":224320,"byte_end":224325,"line_start":378,"line_end":378,"column_start":32,"column_end":37},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":2282},"to":{"krate":0,"index":1122}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":227320,"byte_end":227333,"line_start":60,"line_end":60,"column_start":27,"column_end":40},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":2429},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":227372,"byte_end":227385,"line_start":62,"line_end":62,"column_start":29,"column_end":42},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":2429},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":227669,"byte_end":227682,"line_start":74,"line_end":74,"column_start":19,"column_end":32},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":2429},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":227730,"byte_end":227743,"line_start":76,"line_end":76,"column_start":26,"column_end":39},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":2429},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":227999,"byte_end":228012,"line_start":88,"line_end":88,"column_start":21,"column_end":34},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":2429},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":228252,"byte_end":228265,"line_start":100,"line_end":100,"column_start":39,"column_end":52},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":2429},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":228509,"byte_end":228522,"line_start":110,"line_end":110,"column_start":33,"column_end":46},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":2429},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":228798,"byte_end":228811,"line_start":122,"line_end":122,"column_start":12,"column_end":25},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":2429},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":231889,"byte_end":231902,"line_start":229,"line_end":229,"column_start":20,"column_end":33},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":2429},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":232237,"byte_end":232250,"line_start":244,"line_end":244,"column_start":35,"column_end":48},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":2429},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":232585,"byte_end":232598,"line_start":258,"line_end":258,"column_start":47,"column_end":60},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":2429},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":232839,"byte_end":232852,"line_start":268,"line_end":268,"column_start":55,"column_end":68},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":2429},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":233225,"byte_end":233238,"line_start":282,"line_end":282,"column_start":60,"column_end":73},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":2429},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":233384,"byte_end":233397,"line_start":289,"line_end":289,"column_start":35,"column_end":48},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":2429},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":233732,"byte_end":233745,"line_start":303,"line_end":303,"column_start":47,"column_end":60},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":2429},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":233986,"byte_end":233999,"line_start":313,"line_end":313,"column_start":55,"column_end":68},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":2429},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/side_offsets.rs","byte_start":234372,"byte_end":234385,"line_start":327,"line_end":327,"column_start":60,"column_end":73},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":2429},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":238834,"byte_end":238840,"line_start":41,"line_end":41,"column_start":27,"column_end":33},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":238879,"byte_end":238885,"line_start":43,"line_end":43,"column_start":29,"column_end":35},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":240317,"byte_end":240323,"line_start":102,"line_end":102,"column_start":19,"column_end":25},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":240371,"byte_end":240377,"line_start":104,"line_end":104,"column_start":26,"column_end":32},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":240545,"byte_end":240551,"line_start":113,"line_end":113,"column_start":21,"column_end":27},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":240738,"byte_end":240744,"line_start":123,"line_end":123,"column_start":39,"column_end":45},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":240961,"byte_end":240967,"line_start":131,"line_end":131,"column_start":33,"column_end":39},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":241083,"byte_end":241089,"line_start":137,"line_end":137,"column_start":12,"column_end":18},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":2615},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":242220,"byte_end":242226,"line_start":184,"line_end":184,"column_start":18,"column_end":24},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":2615},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":245593,"byte_end":245599,"line_start":307,"line_end":307,"column_start":28,"column_end":34},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":2615},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248766,"byte_end":248772,"line_start":395,"line_end":395,"column_start":19,"column_end":25},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":2615},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":248966,"byte_end":248972,"line_start":403,"line_end":403,"column_start":20,"column_end":26},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":2615},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":249565,"byte_end":249571,"line_start":419,"line_end":419,"column_start":24,"column_end":30},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":2615},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":251467,"byte_end":251473,"line_start":478,"line_end":478,"column_start":23,"column_end":29},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":2615},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":252032,"byte_end":252038,"line_start":496,"line_end":496,"column_start":29,"column_end":35},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":2615},"to":{"krate":0,"index":1127}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":252194,"byte_end":252200,"line_start":504,"line_end":504,"column_start":27,"column_end":33},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":2615},"to":{"krate":0,"index":1131}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":252354,"byte_end":252360,"line_start":512,"line_end":512,"column_start":29,"column_end":35},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":2615},"to":{"krate":0,"index":1129}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":252516,"byte_end":252522,"line_start":520,"line_end":520,"column_start":27,"column_end":33},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":2615},"to":{"krate":0,"index":1117}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":252650,"byte_end":252656,"line_start":527,"line_end":527,"column_start":25,"column_end":31},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2947}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":252835,"byte_end":252841,"line_start":536,"line_end":536,"column_start":25,"column_end":31},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":253089,"byte_end":253095,"line_start":545,"line_end":545,"column_start":54,"column_end":60},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":253295,"byte_end":253301,"line_start":552,"line_end":552,"column_start":44,"column_end":50},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":7106}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":253488,"byte_end":253494,"line_start":558,"line_end":558,"column_start":74,"column_end":80},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":7106}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":253648,"byte_end":253654,"line_start":564,"line_end":564,"column_start":37,"column_end":43},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2951}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":253826,"byte_end":253832,"line_start":572,"line_end":572,"column_start":25,"column_end":31},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":254063,"byte_end":254069,"line_start":581,"line_end":581,"column_start":37,"column_end":43},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2955}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":254251,"byte_end":254257,"line_start":589,"line_end":589,"column_start":35,"column_end":41},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":254482,"byte_end":254488,"line_start":598,"line_end":598,"column_start":47,"column_end":53},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":254674,"byte_end":254680,"line_start":606,"line_end":606,"column_start":55,"column_end":61},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":254939,"byte_end":254945,"line_start":615,"line_end":615,"column_start":60,"column_end":66},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":255091,"byte_end":255097,"line_start":622,"line_end":622,"column_start":35,"column_end":41},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":255322,"byte_end":255328,"line_start":631,"line_end":631,"column_start":47,"column_end":53},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":255514,"byte_end":255520,"line_start":639,"line_end":639,"column_start":55,"column_end":61},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":255779,"byte_end":255785,"line_start":648,"line_end":648,"column_start":60,"column_end":66},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":256543,"byte_end":256549,"line_start":683,"line_end":683,"column_start":37,"column_end":43},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":256674,"byte_end":256680,"line_start":690,"line_end":690,"column_start":29,"column_end":35},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2756}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":256804,"byte_end":256810,"line_start":697,"line_end":697,"column_start":29,"column_end":35},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":256928,"byte_end":256934,"line_start":704,"line_end":704,"column_start":29,"column_end":35},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2756}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":257058,"byte_end":257064,"line_start":711,"line_end":711,"column_start":29,"column_end":35},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":2615},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":263754,"byte_end":263760,"line_start":947,"line_end":947,"column_start":27,"column_end":33},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":263799,"byte_end":263805,"line_start":949,"line_end":949,"column_start":29,"column_end":35},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":264804,"byte_end":264810,"line_start":992,"line_end":992,"column_start":19,"column_end":25},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":264858,"byte_end":264864,"line_start":994,"line_end":994,"column_start":26,"column_end":32},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":265061,"byte_end":265067,"line_start":1003,"line_end":1003,"column_start":21,"column_end":27},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":265282,"byte_end":265288,"line_start":1014,"line_end":1014,"column_start":39,"column_end":45},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":265572,"byte_end":265578,"line_start":1024,"line_end":1024,"column_start":33,"column_end":39},"kind":{"Impl":{"id":384}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":265714,"byte_end":265720,"line_start":1030,"line_end":1030,"column_start":12,"column_end":18},"kind":{"Impl":{"id":385}},"from":{"krate":0,"index":2829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":266949,"byte_end":266955,"line_start":1078,"line_end":1078,"column_start":18,"column_end":24},"kind":{"Impl":{"id":386}},"from":{"krate":0,"index":2829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":270543,"byte_end":270549,"line_start":1201,"line_end":1201,"column_start":28,"column_end":34},"kind":{"Impl":{"id":387}},"from":{"krate":0,"index":2829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273448,"byte_end":273454,"line_start":1283,"line_end":1283,"column_start":19,"column_end":25},"kind":{"Impl":{"id":388}},"from":{"krate":0,"index":2829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":273674,"byte_end":273680,"line_start":1291,"line_end":1291,"column_start":20,"column_end":26},"kind":{"Impl":{"id":389}},"from":{"krate":0,"index":2829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":274318,"byte_end":274324,"line_start":1307,"line_end":1307,"column_start":24,"column_end":30},"kind":{"Impl":{"id":390}},"from":{"krate":0,"index":2829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":276400,"byte_end":276406,"line_start":1375,"line_end":1375,"column_start":23,"column_end":29},"kind":{"Impl":{"id":391}},"from":{"krate":0,"index":2829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":277049,"byte_end":277055,"line_start":1395,"line_end":1395,"column_start":29,"column_end":35},"kind":{"Impl":{"id":392}},"from":{"krate":0,"index":2829},"to":{"krate":0,"index":1127}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":277211,"byte_end":277217,"line_start":1403,"line_end":1403,"column_start":27,"column_end":33},"kind":{"Impl":{"id":393}},"from":{"krate":0,"index":2829},"to":{"krate":0,"index":1131}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":277371,"byte_end":277377,"line_start":1411,"line_end":1411,"column_start":29,"column_end":35},"kind":{"Impl":{"id":394}},"from":{"krate":0,"index":2829},"to":{"krate":0,"index":1129}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":277533,"byte_end":277539,"line_start":1419,"line_end":1419,"column_start":27,"column_end":33},"kind":{"Impl":{"id":395}},"from":{"krate":0,"index":2829},"to":{"krate":0,"index":1117}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":277681,"byte_end":277687,"line_start":1426,"line_end":1426,"column_start":25,"column_end":31},"kind":{"Impl":{"id":396}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2947}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":277879,"byte_end":277885,"line_start":1435,"line_end":1435,"column_start":25,"column_end":31},"kind":{"Impl":{"id":397}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":278206,"byte_end":278212,"line_start":1448,"line_end":1448,"column_start":54,"column_end":60},"kind":{"Impl":{"id":398}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":278485,"byte_end":278491,"line_start":1459,"line_end":1459,"column_start":44,"column_end":50},"kind":{"Impl":{"id":399}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":7106}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":278678,"byte_end":278684,"line_start":1465,"line_end":1465,"column_start":74,"column_end":80},"kind":{"Impl":{"id":400}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":7106}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":278838,"byte_end":278844,"line_start":1471,"line_end":1471,"column_start":37,"column_end":43},"kind":{"Impl":{"id":401}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2951}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":279051,"byte_end":279057,"line_start":1480,"line_end":1480,"column_start":25,"column_end":31},"kind":{"Impl":{"id":402}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":279361,"byte_end":279367,"line_start":1493,"line_end":1493,"column_start":37,"column_end":43},"kind":{"Impl":{"id":403}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2955}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":279584,"byte_end":279590,"line_start":1502,"line_end":1502,"column_start":35,"column_end":41},"kind":{"Impl":{"id":404}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":279882,"byte_end":279888,"line_start":1515,"line_end":1515,"column_start":47,"column_end":53},"kind":{"Impl":{"id":405}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":280103,"byte_end":280109,"line_start":1524,"line_end":1524,"column_start":55,"column_end":61},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":280437,"byte_end":280443,"line_start":1537,"line_end":1537,"column_start":60,"column_end":66},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":280589,"byte_end":280595,"line_start":1544,"line_end":1544,"column_start":35,"column_end":41},"kind":{"Impl":{"id":408}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":280887,"byte_end":280893,"line_start":1557,"line_end":1557,"column_start":47,"column_end":53},"kind":{"Impl":{"id":409}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":281108,"byte_end":281114,"line_start":1566,"line_end":1566,"column_start":55,"column_end":61},"kind":{"Impl":{"id":410}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":281442,"byte_end":281448,"line_start":1579,"line_end":1579,"column_start":60,"column_end":66},"kind":{"Impl":{"id":411}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":282025,"byte_end":282031,"line_start":1605,"line_end":1605,"column_start":37,"column_end":43},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":282161,"byte_end":282167,"line_start":1612,"line_end":1612,"column_start":29,"column_end":35},"kind":{"Impl":{"id":413}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2756}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":282303,"byte_end":282309,"line_start":1619,"line_end":1619,"column_start":29,"column_end":35},"kind":{"Impl":{"id":414}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":282436,"byte_end":282442,"line_start":1626,"line_end":1626,"column_start":32,"column_end":38},"kind":{"Impl":{"id":415}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2756}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/size.rs","byte_start":282584,"byte_end":282590,"line_start":1633,"line_end":1633,"column_start":32,"column_end":38},"kind":{"Impl":{"id":416}},"from":{"krate":0,"index":2829},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":292201,"byte_end":292212,"line_start":87,"line_end":87,"column_start":34,"column_end":45},"kind":{"Impl":{"id":417}},"from":{"krate":0,"index":3120},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":292265,"byte_end":292276,"line_start":89,"line_end":89,"column_start":36,"column_end":47},"kind":{"Impl":{"id":418}},"from":{"krate":0,"index":3120},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":292630,"byte_end":292641,"line_start":103,"line_end":103,"column_start":26,"column_end":37},"kind":{"Impl":{"id":419}},"from":{"krate":0,"index":3120},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":292703,"byte_end":292714,"line_start":105,"line_end":105,"column_start":33,"column_end":44},"kind":{"Impl":{"id":420}},"from":{"krate":0,"index":3120},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293045,"byte_end":293056,"line_start":118,"line_end":118,"column_start":28,"column_end":39},"kind":{"Impl":{"id":421}},"from":{"krate":0,"index":3120},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":293329,"byte_end":293340,"line_start":132,"line_end":132,"column_start":19,"column_end":30},"kind":{"Impl":{"id":422}},"from":{"krate":0,"index":3120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":295005,"byte_end":295016,"line_start":182,"line_end":182,"column_start":25,"column_end":36},"kind":{"Impl":{"id":423}},"from":{"krate":0,"index":3120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":298764,"byte_end":298775,"line_start":306,"line_end":306,"column_start":35,"column_end":46},"kind":{"Impl":{"id":424}},"from":{"krate":0,"index":3120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":299694,"byte_end":299705,"line_start":332,"line_end":332,"column_start":19,"column_end":30},"kind":{"Impl":{"id":425}},"from":{"krate":0,"index":3120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":300339,"byte_end":300350,"line_start":361,"line_end":361,"column_start":19,"column_end":30},"kind":{"Impl":{"id":426}},"from":{"krate":0,"index":3120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":301137,"byte_end":301148,"line_start":383,"line_end":383,"column_start":19,"column_end":30},"kind":{"Impl":{"id":427}},"from":{"krate":0,"index":3120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":302250,"byte_end":302261,"line_start":428,"line_end":428,"column_start":19,"column_end":30},"kind":{"Impl":{"id":428}},"from":{"krate":0,"index":3120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":303229,"byte_end":303240,"line_start":461,"line_end":461,"column_start":19,"column_end":30},"kind":{"Impl":{"id":429}},"from":{"krate":0,"index":3120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":304332,"byte_end":304343,"line_start":509,"line_end":509,"column_start":19,"column_end":30},"kind":{"Impl":{"id":430}},"from":{"krate":0,"index":3120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":306167,"byte_end":306178,"line_start":568,"line_end":568,"column_start":19,"column_end":30},"kind":{"Impl":{"id":431}},"from":{"krate":0,"index":3120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":307313,"byte_end":307324,"line_start":607,"line_end":607,"column_start":32,"column_end":43},"kind":{"Impl":{"id":432}},"from":{"krate":0,"index":3120},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":307532,"byte_end":307543,"line_start":616,"line_end":616,"column_start":48,"column_end":59},"kind":{"Impl":{"id":433}},"from":{"krate":0,"index":3120},"to":{"krate":0,"index":276}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform2d.rs","byte_start":308129,"byte_end":308140,"line_start":629,"line_end":629,"column_start":34,"column_end":45},"kind":{"Impl":{"id":434}},"from":{"krate":0,"index":3120},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":316965,"byte_end":316976,"line_start":108,"line_end":108,"column_start":34,"column_end":45},"kind":{"Impl":{"id":435}},"from":{"krate":0,"index":3361},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":317029,"byte_end":317040,"line_start":110,"line_end":110,"column_start":36,"column_end":47},"kind":{"Impl":{"id":436}},"from":{"krate":0,"index":3361},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":317744,"byte_end":317755,"line_start":134,"line_end":134,"column_start":26,"column_end":37},"kind":{"Impl":{"id":437}},"from":{"krate":0,"index":3361},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":317817,"byte_end":317828,"line_start":136,"line_end":136,"column_start":33,"column_end":44},"kind":{"Impl":{"id":438}},"from":{"krate":0,"index":3361},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":318529,"byte_end":318540,"line_start":159,"line_end":159,"column_start":28,"column_end":39},"kind":{"Impl":{"id":439}},"from":{"krate":0,"index":3361},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":319073,"byte_end":319084,"line_start":183,"line_end":183,"column_start":19,"column_end":30},"kind":{"Impl":{"id":440}},"from":{"krate":0,"index":3361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":321492,"byte_end":321503,"line_start":264,"line_end":264,"column_start":25,"column_end":36},"kind":{"Impl":{"id":441}},"from":{"krate":0,"index":3361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":326948,"byte_end":326959,"line_start":416,"line_end":416,"column_start":20,"column_end":31},"kind":{"Impl":{"id":442}},"from":{"krate":0,"index":3361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":328798,"byte_end":328809,"line_start":491,"line_end":491,"column_start":20,"column_end":31},"kind":{"Impl":{"id":443}},"from":{"krate":0,"index":3361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":331077,"byte_end":331088,"line_start":526,"line_end":526,"column_start":20,"column_end":31},"kind":{"Impl":{"id":444}},"from":{"krate":0,"index":3361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":332258,"byte_end":332269,"line_start":571,"line_end":571,"column_start":19,"column_end":30},"kind":{"Impl":{"id":445}},"from":{"krate":0,"index":3361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":333945,"byte_end":333956,"line_start":627,"line_end":627,"column_start":19,"column_end":30},"kind":{"Impl":{"id":446}},"from":{"krate":0,"index":3361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":335305,"byte_end":335316,"line_start":677,"line_end":677,"column_start":19,"column_end":30},"kind":{"Impl":{"id":447}},"from":{"krate":0,"index":3361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":341004,"byte_end":341015,"line_start":817,"line_end":817,"column_start":20,"column_end":31},"kind":{"Impl":{"id":448}},"from":{"krate":0,"index":3361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":348565,"byte_end":348576,"line_start":988,"line_end":988,"column_start":20,"column_end":31},"kind":{"Impl":{"id":449}},"from":{"krate":0,"index":3361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":350122,"byte_end":350133,"line_start":1029,"line_end":1029,"column_start":35,"column_end":46},"kind":{"Impl":{"id":450}},"from":{"krate":0,"index":3361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":351632,"byte_end":351643,"line_start":1060,"line_end":1060,"column_start":32,"column_end":43},"kind":{"Impl":{"id":451}},"from":{"krate":0,"index":3361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":352611,"byte_end":352622,"line_start":1085,"line_end":1085,"column_start":48,"column_end":59},"kind":{"Impl":{"id":452}},"from":{"krate":0,"index":3361},"to":{"krate":0,"index":276}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":353556,"byte_end":353567,"line_start":1101,"line_end":1101,"column_start":32,"column_end":43},"kind":{"Impl":{"id":453}},"from":{"krate":0,"index":3361},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/transform3d.rs","byte_start":353761,"byte_end":353772,"line_start":1110,"line_end":1110,"column_start":34,"column_end":45},"kind":{"Impl":{"id":454}},"from":{"krate":0,"index":3361},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":367132,"byte_end":367145,"line_start":74,"line_end":74,"column_start":34,"column_end":47},"kind":{"Impl":{"id":455}},"from":{"krate":0,"index":3624},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":367198,"byte_end":367211,"line_start":76,"line_end":76,"column_start":36,"column_end":49},"kind":{"Impl":{"id":456}},"from":{"krate":0,"index":3624},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":367419,"byte_end":367432,"line_start":86,"line_end":86,"column_start":26,"column_end":39},"kind":{"Impl":{"id":457}},"from":{"krate":0,"index":3624},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":367494,"byte_end":367507,"line_start":88,"line_end":88,"column_start":33,"column_end":46},"kind":{"Impl":{"id":458}},"from":{"krate":0,"index":3624},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":367671,"byte_end":367684,"line_start":97,"line_end":97,"column_start":28,"column_end":41},"kind":{"Impl":{"id":459}},"from":{"krate":0,"index":3624},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":367849,"byte_end":367862,"line_start":107,"line_end":107,"column_start":19,"column_end":32},"kind":{"Impl":{"id":460}},"from":{"krate":0,"index":3624},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":369218,"byte_end":369231,"line_start":164,"line_end":164,"column_start":25,"column_end":38},"kind":{"Impl":{"id":461}},"from":{"krate":0,"index":3624},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":371456,"byte_end":371469,"line_start":255,"line_end":255,"column_start":69,"column_end":82},"kind":{"Impl":{"id":462}},"from":{"krate":0,"index":3624},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":371757,"byte_end":371770,"line_start":263,"line_end":263,"column_start":72,"column_end":85},"kind":{"Impl":{"id":463}},"from":{"krate":0,"index":3624},"to":{"krate":1,"index":2951}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":371983,"byte_end":371996,"line_start":270,"line_end":270,"column_start":69,"column_end":82},"kind":{"Impl":{"id":464}},"from":{"krate":0,"index":3624},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":372284,"byte_end":372297,"line_start":278,"line_end":278,"column_start":72,"column_end":85},"kind":{"Impl":{"id":465}},"from":{"krate":0,"index":3624},"to":{"krate":1,"index":2955}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":372487,"byte_end":372500,"line_start":285,"line_end":285,"column_start":46,"column_end":59},"kind":{"Impl":{"id":466}},"from":{"krate":0,"index":3624},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":372650,"byte_end":372663,"line_start":291,"line_end":291,"column_start":46,"column_end":59},"kind":{"Impl":{"id":467}},"from":{"krate":0,"index":3624},"to":{"krate":1,"index":2756}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":372810,"byte_end":372823,"line_start":297,"line_end":297,"column_start":54,"column_end":67},"kind":{"Impl":{"id":468}},"from":{"krate":0,"index":3624},"to":{"krate":1,"index":2756}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":373000,"byte_end":373013,"line_start":306,"line_end":306,"column_start":31,"column_end":44},"kind":{"Impl":{"id":469}},"from":{"krate":0,"index":3624},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":373154,"byte_end":373167,"line_start":315,"line_end":315,"column_start":46,"column_end":59},"kind":{"Impl":{"id":470}},"from":{"krate":0,"index":3624},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":373707,"byte_end":373720,"line_start":334,"line_end":334,"column_start":34,"column_end":47},"kind":{"Impl":{"id":471}},"from":{"krate":0,"index":3728},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":373773,"byte_end":373786,"line_start":336,"line_end":336,"column_start":36,"column_end":49},"kind":{"Impl":{"id":472}},"from":{"krate":0,"index":3728},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":374790,"byte_end":374803,"line_start":379,"line_end":379,"column_start":26,"column_end":39},"kind":{"Impl":{"id":473}},"from":{"krate":0,"index":3728},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":374865,"byte_end":374878,"line_start":381,"line_end":381,"column_start":33,"column_end":46},"kind":{"Impl":{"id":474}},"from":{"krate":0,"index":3728},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":375063,"byte_end":375076,"line_start":390,"line_end":390,"column_start":28,"column_end":41},"kind":{"Impl":{"id":475}},"from":{"krate":0,"index":3728},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":375265,"byte_end":375278,"line_start":401,"line_end":401,"column_start":19,"column_end":32},"kind":{"Impl":{"id":476}},"from":{"krate":0,"index":3728},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":376799,"byte_end":376812,"line_start":461,"line_end":461,"column_start":25,"column_end":38},"kind":{"Impl":{"id":477}},"from":{"krate":0,"index":3728},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":379668,"byte_end":379681,"line_start":575,"line_end":575,"column_start":69,"column_end":82},"kind":{"Impl":{"id":478}},"from":{"krate":0,"index":3728},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":379987,"byte_end":380000,"line_start":583,"line_end":583,"column_start":72,"column_end":85},"kind":{"Impl":{"id":479}},"from":{"krate":0,"index":3728},"to":{"krate":1,"index":2951}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":380240,"byte_end":380253,"line_start":591,"line_end":591,"column_start":69,"column_end":82},"kind":{"Impl":{"id":480}},"from":{"krate":0,"index":3728},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":380559,"byte_end":380572,"line_start":599,"line_end":599,"column_start":72,"column_end":85},"kind":{"Impl":{"id":481}},"from":{"krate":0,"index":3728},"to":{"krate":1,"index":2955}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":380789,"byte_end":380802,"line_start":607,"line_end":607,"column_start":46,"column_end":59},"kind":{"Impl":{"id":482}},"from":{"krate":0,"index":3728},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":380957,"byte_end":380970,"line_start":613,"line_end":613,"column_start":46,"column_end":59},"kind":{"Impl":{"id":483}},"from":{"krate":0,"index":3728},"to":{"krate":1,"index":2756}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":381125,"byte_end":381138,"line_start":619,"line_end":619,"column_start":54,"column_end":67},"kind":{"Impl":{"id":484}},"from":{"krate":0,"index":3728},"to":{"krate":1,"index":2756}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":381323,"byte_end":381336,"line_start":628,"line_end":628,"column_start":31,"column_end":44},"kind":{"Impl":{"id":485}},"from":{"krate":0,"index":3728},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/translation.rs","byte_start":381477,"byte_end":381490,"line_start":637,"line_end":637,"column_start":46,"column_end":59},"kind":{"Impl":{"id":486}},"from":{"krate":0,"index":3728},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":393143,"byte_end":393151,"line_start":47,"line_end":47,"column_start":27,"column_end":35},"kind":{"Impl":{"id":487}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":393190,"byte_end":393198,"line_start":49,"line_end":49,"column_start":29,"column_end":37},"kind":{"Impl":{"id":488}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":394465,"byte_end":394473,"line_start":106,"line_end":106,"column_start":23,"column_end":31},"kind":{"Impl":{"id":489}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":394520,"byte_end":394528,"line_start":108,"line_end":108,"column_start":37,"column_end":45},"kind":{"Impl":{"id":490}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":394660,"byte_end":394668,"line_start":114,"line_end":114,"column_start":27,"column_end":35},"kind":{"Impl":{"id":491}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":394815,"byte_end":394823,"line_start":121,"line_end":121,"column_start":27,"column_end":35},"kind":{"Impl":{"id":492}},"from":{"krate":0,"index":3960},"to":{"krate":0,"index":1117}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":395020,"byte_end":395028,"line_start":129,"line_end":129,"column_start":39,"column_end":47},"kind":{"Impl":{"id":493}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":395202,"byte_end":395210,"line_start":135,"line_end":135,"column_start":33,"column_end":41},"kind":{"Impl":{"id":494}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":395328,"byte_end":395336,"line_start":141,"line_end":141,"column_start":12,"column_end":20},"kind":{"Impl":{"id":495}},"from":{"krate":0,"index":3960},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":398352,"byte_end":398360,"line_start":267,"line_end":267,"column_start":18,"column_end":26},"kind":{"Impl":{"id":496}},"from":{"krate":0,"index":3960},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":401875,"byte_end":401883,"line_start":410,"line_end":410,"column_start":12,"column_end":20},"kind":{"Impl":{"id":497}},"from":{"krate":0,"index":3960},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":402769,"byte_end":402777,"line_start":442,"line_end":442,"column_start":19,"column_end":27},"kind":{"Impl":{"id":498}},"from":{"krate":0,"index":3960},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":404921,"byte_end":404929,"line_start":520,"line_end":520,"column_start":12,"column_end":20},"kind":{"Impl":{"id":499}},"from":{"krate":0,"index":3960},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":406041,"byte_end":406049,"line_start":555,"line_end":555,"column_start":24,"column_end":32},"kind":{"Impl":{"id":500}},"from":{"krate":0,"index":3960},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":407351,"byte_end":407359,"line_start":599,"line_end":599,"column_start":23,"column_end":31},"kind":{"Impl":{"id":501}},"from":{"krate":0,"index":3960},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":407909,"byte_end":407917,"line_start":619,"line_end":619,"column_start":28,"column_end":36},"kind":{"Impl":{"id":502}},"from":{"krate":0,"index":3960},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":410769,"byte_end":410777,"line_start":697,"line_end":697,"column_start":25,"column_end":33},"kind":{"Impl":{"id":503}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2947}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":410942,"byte_end":410950,"line_start":706,"line_end":706,"column_start":25,"column_end":33},"kind":{"Impl":{"id":504}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":411169,"byte_end":411177,"line_start":715,"line_end":715,"column_start":39,"column_end":47},"kind":{"Impl":{"id":505}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":411402,"byte_end":411410,"line_start":724,"line_end":724,"column_start":44,"column_end":52},"kind":{"Impl":{"id":506}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":7106}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":411597,"byte_end":411605,"line_start":730,"line_end":730,"column_start":74,"column_end":82},"kind":{"Impl":{"id":507}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":7106}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":411775,"byte_end":411783,"line_start":736,"line_end":736,"column_start":53,"column_end":61},"kind":{"Impl":{"id":508}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2951}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":411913,"byte_end":411921,"line_start":743,"line_end":743,"column_start":25,"column_end":33},"kind":{"Impl":{"id":509}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":412161,"byte_end":412169,"line_start":752,"line_end":752,"column_start":69,"column_end":77},"kind":{"Impl":{"id":510}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2955}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":412309,"byte_end":412317,"line_start":759,"line_end":759,"column_start":35,"column_end":43},"kind":{"Impl":{"id":511}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":412537,"byte_end":412545,"line_start":768,"line_end":768,"column_start":56,"column_end":64},"kind":{"Impl":{"id":512}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":412702,"byte_end":412710,"line_start":775,"line_end":775,"column_start":55,"column_end":63},"kind":{"Impl":{"id":513}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":412955,"byte_end":412963,"line_start":784,"line_end":784,"column_start":60,"column_end":68},"kind":{"Impl":{"id":514}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":413137,"byte_end":413145,"line_start":792,"line_end":792,"column_start":35,"column_end":43},"kind":{"Impl":{"id":515}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":413365,"byte_end":413373,"line_start":801,"line_end":801,"column_start":56,"column_end":64},"kind":{"Impl":{"id":516}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":413530,"byte_end":413538,"line_start":808,"line_end":808,"column_start":55,"column_end":63},"kind":{"Impl":{"id":517}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":413783,"byte_end":413791,"line_start":817,"line_end":817,"column_start":60,"column_end":68},"kind":{"Impl":{"id":518}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":413959,"byte_end":413967,"line_start":825,"line_end":825,"column_start":29,"column_end":37},"kind":{"Impl":{"id":519}},"from":{"krate":0,"index":3960},"to":{"krate":0,"index":1127}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":414124,"byte_end":414132,"line_start":833,"line_end":833,"column_start":27,"column_end":35},"kind":{"Impl":{"id":520}},"from":{"krate":0,"index":3960},"to":{"krate":0,"index":1131}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":414287,"byte_end":414295,"line_start":841,"line_end":841,"column_start":29,"column_end":37},"kind":{"Impl":{"id":521}},"from":{"krate":0,"index":3960},"to":{"krate":0,"index":1129}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":414479,"byte_end":414487,"line_start":849,"line_end":849,"column_start":54,"column_end":62},"kind":{"Impl":{"id":522}},"from":{"krate":0,"index":3960},"to":{"krate":0,"index":276}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":414810,"byte_end":414818,"line_start":861,"line_end":861,"column_start":29,"column_end":37},"kind":{"Impl":{"id":523}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2756}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":414919,"byte_end":414927,"line_start":867,"line_end":867,"column_start":29,"column_end":37},"kind":{"Impl":{"id":524}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415030,"byte_end":415038,"line_start":873,"line_end":873,"column_start":29,"column_end":37},"kind":{"Impl":{"id":525}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2756}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415139,"byte_end":415147,"line_start":879,"line_end":879,"column_start":29,"column_end":37},"kind":{"Impl":{"id":526}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415267,"byte_end":415275,"line_start":885,"line_end":885,"column_start":35,"column_end":43},"kind":{"Impl":{"id":527}},"from":{"krate":0,"index":3960},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415771,"byte_end":415779,"line_start":906,"line_end":906,"column_start":27,"column_end":35},"kind":{"Impl":{"id":528}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2863}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":415818,"byte_end":415826,"line_start":908,"line_end":908,"column_start":29,"column_end":37},"kind":{"Impl":{"id":529}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2474}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":416772,"byte_end":416780,"line_start":951,"line_end":951,"column_start":23,"column_end":31},"kind":{"Impl":{"id":530}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2509}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":416827,"byte_end":416835,"line_start":953,"line_end":953,"column_start":37,"column_end":45},"kind":{"Impl":{"id":531}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2504}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":416988,"byte_end":416996,"line_start":959,"line_end":959,"column_start":27,"column_end":35},"kind":{"Impl":{"id":532}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":9093}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":417167,"byte_end":417175,"line_start":967,"line_end":967,"column_start":27,"column_end":35},"kind":{"Impl":{"id":533}},"from":{"krate":0,"index":4197},"to":{"krate":0,"index":1117}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":417377,"byte_end":417385,"line_start":975,"line_end":975,"column_start":39,"column_end":47},"kind":{"Impl":{"id":534}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":8887}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":417626,"byte_end":417634,"line_start":985,"line_end":985,"column_start":33,"column_end":41},"kind":{"Impl":{"id":535}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2831}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":417772,"byte_end":417780,"line_start":991,"line_end":991,"column_start":12,"column_end":20},"kind":{"Impl":{"id":536}},"from":{"krate":0,"index":4197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":419986,"byte_end":419994,"line_start":1084,"line_end":1084,"column_start":18,"column_end":26},"kind":{"Impl":{"id":537}},"from":{"krate":0,"index":4197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":424365,"byte_end":424373,"line_start":1257,"line_end":1257,"column_start":12,"column_end":20},"kind":{"Impl":{"id":538}},"from":{"krate":0,"index":4197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":424960,"byte_end":424968,"line_start":1279,"line_end":1279,"column_start":19,"column_end":27},"kind":{"Impl":{"id":539}},"from":{"krate":0,"index":4197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":427476,"byte_end":427484,"line_start":1370,"line_end":1370,"column_start":12,"column_end":20},"kind":{"Impl":{"id":540}},"from":{"krate":0,"index":4197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":428638,"byte_end":428646,"line_start":1405,"line_end":1405,"column_start":24,"column_end":32},"kind":{"Impl":{"id":541}},"from":{"krate":0,"index":4197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":430152,"byte_end":430160,"line_start":1459,"line_end":1459,"column_start":23,"column_end":31},"kind":{"Impl":{"id":542}},"from":{"krate":0,"index":4197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":430778,"byte_end":430786,"line_start":1481,"line_end":1481,"column_start":28,"column_end":36},"kind":{"Impl":{"id":543}},"from":{"krate":0,"index":4197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":433715,"byte_end":433723,"line_start":1563,"line_end":1563,"column_start":25,"column_end":33},"kind":{"Impl":{"id":544}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2947}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":433897,"byte_end":433905,"line_start":1572,"line_end":1572,"column_start":25,"column_end":33},"kind":{"Impl":{"id":545}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":434146,"byte_end":434154,"line_start":1581,"line_end":1581,"column_start":52,"column_end":60},"kind":{"Impl":{"id":546}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2920}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":434388,"byte_end":434396,"line_start":1590,"line_end":1590,"column_start":44,"column_end":52},"kind":{"Impl":{"id":547}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":7106}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":434583,"byte_end":434591,"line_start":1596,"line_end":1596,"column_start":74,"column_end":82},"kind":{"Impl":{"id":548}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":7106}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":434761,"byte_end":434769,"line_start":1602,"line_end":1602,"column_start":53,"column_end":61},"kind":{"Impl":{"id":549}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2951}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":434899,"byte_end":434907,"line_start":1609,"line_end":1609,"column_start":25,"column_end":33},"kind":{"Impl":{"id":550}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":435165,"byte_end":435173,"line_start":1618,"line_end":1618,"column_start":69,"column_end":77},"kind":{"Impl":{"id":551}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2955}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":435313,"byte_end":435321,"line_start":1625,"line_end":1625,"column_start":35,"column_end":43},"kind":{"Impl":{"id":552}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":435604,"byte_end":435612,"line_start":1638,"line_end":1638,"column_start":56,"column_end":64},"kind":{"Impl":{"id":553}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":435769,"byte_end":435777,"line_start":1645,"line_end":1645,"column_start":55,"column_end":63},"kind":{"Impl":{"id":554}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":436087,"byte_end":436095,"line_start":1658,"line_end":1658,"column_start":60,"column_end":68},"kind":{"Impl":{"id":555}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2959}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":436296,"byte_end":436304,"line_start":1667,"line_end":1667,"column_start":35,"column_end":43},"kind":{"Impl":{"id":556}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":436587,"byte_end":436595,"line_start":1680,"line_end":1680,"column_start":56,"column_end":64},"kind":{"Impl":{"id":557}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":436752,"byte_end":436760,"line_start":1687,"line_end":1687,"column_start":55,"column_end":63},"kind":{"Impl":{"id":558}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2935}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":437070,"byte_end":437078,"line_start":1700,"line_end":1700,"column_start":60,"column_end":68},"kind":{"Impl":{"id":559}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2963}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":437273,"byte_end":437281,"line_start":1709,"line_end":1709,"column_start":29,"column_end":37},"kind":{"Impl":{"id":560}},"from":{"krate":0,"index":4197},"to":{"krate":0,"index":1127}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":437438,"byte_end":437446,"line_start":1717,"line_end":1717,"column_start":27,"column_end":35},"kind":{"Impl":{"id":561}},"from":{"krate":0,"index":4197},"to":{"krate":0,"index":1131}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":437601,"byte_end":437609,"line_start":1725,"line_end":1725,"column_start":29,"column_end":37},"kind":{"Impl":{"id":562}},"from":{"krate":0,"index":4197},"to":{"krate":0,"index":1129}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":437793,"byte_end":437801,"line_start":1733,"line_end":1733,"column_start":54,"column_end":62},"kind":{"Impl":{"id":563}},"from":{"krate":0,"index":4197},"to":{"krate":0,"index":276}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":438258,"byte_end":438266,"line_start":1751,"line_end":1751,"column_start":29,"column_end":37},"kind":{"Impl":{"id":564}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2756}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":438375,"byte_end":438383,"line_start":1757,"line_end":1757,"column_start":29,"column_end":37},"kind":{"Impl":{"id":565}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":438495,"byte_end":438503,"line_start":1763,"line_end":1763,"column_start":32,"column_end":40},"kind":{"Impl":{"id":566}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2756}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":438618,"byte_end":438626,"line_start":1769,"line_end":1769,"column_start":32,"column_end":40},"kind":{"Impl":{"id":567}},"from":{"krate":0,"index":4197},"to":{"krate":1,"index":2759}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":439120,"byte_end":439132,"line_start":1790,"line_end":1790,"column_start":6,"column_end":18},"kind":{"Impl":{"id":568}},"from":{"krate":0,"index":4683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/euclid-0.22.6/src/vector.rs","byte_start":441564,"byte_end":441576,"line_start":1867,"line_end":1867,"column_start":6,"column_end":18},"kind":{"Impl":{"id":569}},"from":{"krate":0,"index":4701},"to":{"krate":4294967295,"index":4294967295}}]}