{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1","program":"/home/namn/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","shlex","/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=da61fa59b29a1a9a","-C","extra-filename=-da61fa59b29a1a9a","--out-dir","/home/namn/Desktop/n/dev/minigame/shooting_rst/target/rls/debug/deps","-L","dependency=/home/namn/Desktop/n/dev/minigame/shooting_rst/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/namn/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/namn/Desktop/n/dev/minigame/shooting_rst/target/rls/debug/deps/libshlex-da61fa59b29a1a9a.rmeta"},"prelude":{"crate_id":{"name":"shlex","disambiguator":[18147968575770062253,3686188841111974872]},"crate_root":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src","external_crates":[{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15256637969148649584,12170509131058075833]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2572959971889902175,17506693968225989007]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7380289047210505863,13821127130725723065]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15494144285296940423,1517275930380298805]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[16074686111301742862,11174094882134223101]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9848143689052418189,5596786287495938678]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4765876764407181064,11122159180720543906]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[3249135693812064660,5763443684941168569]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17048817722375060837,16920886256309599893]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13552797903376776722,10482089333731059857]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[5989449439605467183,7256304997069434828]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13279369789493161905,12463804053127379464]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[295047501211602818,3843164955111373824]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[14781020588812023641,7393321088923443539]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[1927264790928947756,6617054577979570835]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[7597657085106642381,11470551509849691989]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[2355022556203982070,155364045674250901]}},{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[3046834347757213021,4625500188193743608]}}],"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":306,"byte_end":8064,"line_start":6,"line_end":229,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":306,"byte_end":8064,"line_start":6,"line_end":229,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":11},{"krate":0,"index":18},{"krate":0,"index":22},{"krate":0,"index":23}],"decl_id":null,"docs":" Same idea as (but implementation not directly based on) the Python shlex module.  However, this\n implementation does not support any of the Python module's customization because it makes\n parsing slower and is fairly useless.  You only get the default settings of shlex.split, which\n mimic the POSIX shell:\n http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html","sig":null,"attributes":[{"value":"/ Same idea as (but implementation not directly based on) the Python shlex module.  However, this","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":306,"byte_end":405,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"/ implementation does not support any of the Python module's customization because it makes","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":406,"byte_end":499,"line_start":7,"line_end":7,"column_start":1,"column_end":94}},{"value":"/ parsing slower and is fairly useless.  You only get the default settings of shlex.split, which","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":500,"byte_end":598,"line_start":8,"line_end":8,"column_start":1,"column_end":99}},{"value":"/ mimic the POSIX shell:","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":599,"byte_end":625,"line_start":9,"line_end":9,"column_start":1,"column_end":27}},{"value":"/ http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":626,"byte_end":702,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":703,"byte_end":706,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This implementation also deviates from the Python version in not treating \\r specially, which I","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":707,"byte_end":806,"line_start":12,"line_end":12,"column_start":1,"column_end":100}},{"value":"/ believe is more compliant.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":807,"byte_end":837,"line_start":13,"line_end":13,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":838,"byte_end":841,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The algorithms in this crate are oblivious to UTF-8 high bytes, so they iterate over the bytes","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":842,"byte_end":940,"line_start":15,"line_end":15,"column_start":1,"column_end":99}},{"value":"/ directly as a micro-optimization.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":941,"byte_end":978,"line_start":16,"line_end":16,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":6},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":1132,"byte_end":1137,"line_start":22,"line_end":22,"column_start":12,"column_end":17},"name":"Shlex","qualname":"::Shlex","value":"Shlex { line_no, had_error }","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10}],"decl_id":null,"docs":" An iterator that takes an input string and splits it into the words using the same syntax as\n the POSIX shell.\n","sig":null,"attributes":[{"value":"/ An iterator that takes an input string and splits it into the words using the same syntax as","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":1003,"byte_end":1099,"line_start":20,"line_end":20,"column_start":1,"column_end":97}},{"value":"/ the POSIX shell.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":1100,"byte_end":1120,"line_start":21,"line_end":21,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":9},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":1240,"byte_end":1247,"line_start":25,"line_end":25,"column_start":9,"column_end":16},"name":"line_no","qualname":"::Shlex::line_no","value":"usize","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" The number of newlines read so far, plus one.\n","sig":null,"attributes":[{"value":"/ The number of newlines read so far, plus one.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":1182,"byte_end":1231,"line_start":24,"line_end":24,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":10},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":1613,"byte_end":1622,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"name":"had_error","qualname":"::Shlex::had_error","value":"bool","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" An input string is erroneous if it ends while inside a quotation or right after an\n unescaped backslash.  Since Iterator does not have a mechanism to return an error, if that\n happens, Shlex just throws out the last token, ends the iteration, and sets 'had_error' to\n true; best to check it after you're done iterating.\n","sig":null,"attributes":[{"value":"/ An input string is erroneous if it ends while inside a quotation or right after an","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":1260,"byte_end":1346,"line_start":26,"line_end":26,"column_start":5,"column_end":91}},{"value":"/ unescaped backslash.  Since Iterator does not have a mechanism to return an error, if that","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":1351,"byte_end":1445,"line_start":27,"line_end":27,"column_start":5,"column_end":99}},{"value":"/ happens, Shlex just throws out the last token, ends the iteration, and sets 'had_error' to","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":1450,"byte_end":1544,"line_start":28,"line_end":28,"column_start":5,"column_end":99}},{"value":"/ true; best to check it after you're done iterating.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":1549,"byte_end":1604,"line_start":29,"line_end":29,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":1665,"byte_end":1668,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<Shlex>::new","value":"pub fn new(&'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":22},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":5784,"byte_end":5789,"line_start":153,"line_end":153,"column_start":8,"column_end":13},"name":"split","qualname":"::split","value":"pub fn split(&str) -> Option<Vec<String>>","parent":null,"children":[],"decl_id":null,"docs":" Convenience function that consumes the whole string at once.  Returns None if the input was\n erroneous.\n","sig":null,"attributes":[{"value":"/ Convenience function that consumes the whole string at once.  Returns None if the input was","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":5666,"byte_end":5761,"line_start":151,"line_end":151,"column_start":1,"column_end":96}},{"value":"/ erroneous.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":5762,"byte_end":5776,"line_start":152,"line_end":152,"column_start":1,"column_end":15}}]},{"kind":"Function","id":{"krate":0,"index":23},"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":6048,"byte_end":6053,"line_start":160,"line_end":160,"column_start":8,"column_end":13},"name":"quote","qualname":"::quote","value":"pub fn quote(&str) -> Cow<, str>","parent":null,"children":[],"decl_id":null,"docs":" Given a single word, return a string suitable to encode it as a shell argument.\n","sig":null,"attributes":[{"value":"/ Given a single word, return a string suitable to encode it as a shell argument.","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":5957,"byte_end":6040,"line_start":159,"line_end":159,"column_start":1,"column_end":84}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":1642,"byte_end":1647,"line_start":33,"line_end":33,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":4929,"byte_end":4934,"line_start":126,"line_end":126,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":1642,"byte_end":1647,"line_start":33,"line_end":33,"column_start":10,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":6},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/namn/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":4929,"byte_end":4934,"line_start":126,"line_end":126,"column_start":23,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":6},"to":{"krate":2,"index":7310}}]}